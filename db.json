{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"5585cddba538ff5873f7466838da65370d976e4e","modified":1483431168000},{"_id":"source/CNAME","hash":"d9e13b066cc8af2a77271cc843c593518d844896","modified":1479031600000},{"_id":"themes/next/.bowerrc","hash":"2b3e52c128518d9b84b1580579f1fba87b3c6236","modified":1479032870000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1467008496000},{"_id":"themes/next/.gitignore","hash":"799a3a3ec3b7f9a5f3b584c25843e2d7fb2a8d56","modified":1479032877000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1467008496000},{"_id":"themes/next/.javascript_ignore","hash":"de73037693881ad2626e2962e8c5ab243f7b24d0","modified":1479032882000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1467008496000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1467008496000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1467008496000},{"_id":"themes/next/_config.yml","hash":"e7885ee3ff074993a0c3a82e9cecb081b1513ff2","modified":1479032791000},{"_id":"themes/next/bower.json","hash":"023b5b945bc45c205129a18e26d304fb9caa15c7","modified":1479032890000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1467008496000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1467008496000},{"_id":"source/_drafts/2016-06-29-jingjin-note-1.md","hash":"3e3247c03128a22befde557ae527c40e606f3c3a","modified":1467166215000},{"_id":"source/_drafts/2016-06-29-jingjin-note-2.md","hash":"b59b10e90326f63ceb2884618ae62be600ac1082","modified":1467166112000},{"_id":"source/_drafts/2016-08-06-harvard-happiness-course-what-is-positive-psychology.md","hash":"fc28869416d33d1a1c2086ef611413010031c9fe","modified":1471932139000},{"_id":"source/_drafts/2016-08-06-harvard-happiness-course-why-do-we-learn-positive-psychology.md","hash":"7621308f4705abbfdff198a348ed006e15c85365","modified":1470748427000},{"_id":"source/_drafts/2016-08-30-writing-lesson-2.md","hash":"d2ad71b58e2493c0926a0056eab1f558eb01769f","modified":1483453532000},{"_id":"source/_drafts/2016-09-15-writing-lesson-3.md","hash":"d2a97014bf48226392d57d0fd9540ee7977c3fa4","modified":1473949945000},{"_id":"source/_drafts/2017-01-03-coding-diary.md","hash":"6381c5ce5a06e03c79a599d7f17d52325ffc8b67","modified":1483460442000},{"_id":"source/_drafts/2017-01-03-draft-testing.md","hash":"764f8ffae4a65d717da14bb2c92c5efd87bb2224","modified":1483432081000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1483433425000},{"_id":"source/_posts/.aliases","hash":"6615f53a5fc988da24c744012e97f8f73a1d8e70","modified":1482119502000},{"_id":"source/_posts/.bash_prompt","hash":"7ad9945fab2fa19f01d0ed4ecf30e2571d304d1c","modified":1482119502000},{"_id":"source/_posts/2016-06-27-alfred.md","hash":"b686d293ce47f89e036a999454a9a0e45e404d47","modified":1482288518000},{"_id":"source/_posts/2016-06-30-mocha-babel.md","hash":"abd6cc881ce55da7863c7296800cebaa0df70b9e","modified":1470560298000},{"_id":"source/_posts/2016-07-19-vuex.md","hash":"8b263b866753cce9ba9c866c94403f3abd201cb2","modified":1470560247000},{"_id":"source/_posts/2016-07-20-vue-loader.md","hash":"e4f84802e1a56ecfe4d0665f9600f6ef375cbb2e","modified":1470560267000},{"_id":"source/_posts/2016-08-07-nginx.md","hash":"52f43e3765cd17a96a5717f237c9029e6d833f44","modified":1477287060000},{"_id":"source/_posts/2016-08-09-efficiency.md","hash":"b3b310c656bea675aca4dab21604f4813bf82613","modified":1482288475000},{"_id":"source/_posts/2016-08-10-node_global.md","hash":"2140eac8b733ee4de60cca1b526cc0c2d3eb80ce","modified":1472723988000},{"_id":"source/_posts/2016-08-11-learn-new-things.md","hash":"1c5610a6b4513c9a71f3abde6a4fa210d20dce7e","modified":1482288460000},{"_id":"source/_posts/2016-08-22-wechat.md","hash":"ebcd432566b9f1b4e09a3a21afd175b7f92281ca","modified":1472723957000},{"_id":"source/_posts/2016-08-24-weinre.md","hash":"ebf0aec9bb32f0817120276cebd3719053ad0cb8","modified":1482288507000},{"_id":"source/_posts/2016-08-25-supertest.md","hash":"6c3069951053d740b992d265529e580a1686b747","modified":1472724001000},{"_id":"source/_posts/2016-09-16-login_register.md","hash":"3ac604b9ec2fde57fa7a92d910358e444a4eaf9c","modified":1473995038000},{"_id":"source/_posts/2016-10-20-koa2-vue-1.md","hash":"8283b9d5b79e249f615cadf04af9a1b69bc30231","modified":1477041838000},{"_id":"source/_posts/2016-10-22-coding-principle.md","hash":"415b98477787831fba6f02539f7399e9aa672c8f","modified":1482288442000},{"_id":"source/_posts/2016-10-24-vue-caveats.md","hash":"85daf0fa157dec2e2a5b05dab8e2c43e421aee62","modified":1477286854000},{"_id":"source/_posts/2016-11-13-scope.md","hash":"47c239517943ee791db2e7ff771eeaa860af5a1b","modified":1479040413000},{"_id":"source/_posts/2016-11-14-snowflake.md","hash":"a56888f15b55b316216161d1767b86d7ac6b6319","modified":1479127876000},{"_id":"source/_posts/2016-12-07-vue-upgrade.md","hash":"abf3d07253ac1352d55b0a44067df5fbaa33f28b","modified":1481119781000},{"_id":"source/_posts/2016-12-08-coding-diary.md","hash":"2c0af21fe873b9449e092d01f8f3aaaed72ab174","modified":1482287275000},{"_id":"source/_posts/2016-12-08-vuex-error.md","hash":"f81c8f4f5a0ae7e1b5d07dcd1f52bbcbe344fd91","modified":1481188813000},{"_id":"source/_posts/2016-12-09-coding-diary.md","hash":"649b2d702aba30d86f70b4102c1c131f8283f189","modified":1482287422000},{"_id":"source/_posts/2016-12-10-coding-diary.md","hash":"2f1019d2eb94fb8fb97c588cd576546690f81b9b","modified":1482287673000},{"_id":"source/_posts/2016-12-11-coding-diary.md","hash":"d85a4517f4d17b4c330c9fee0c55662359a9e10c","modified":1482287708000},{"_id":"source/_posts/2016-12-19-display-table.md","hash":"9f82d50f69af63a96ab52889b469b92dac99b384","modified":1482142194000},{"_id":"source/_posts/2016-12-19-es6-unit-test.md","hash":"4a0e114c4c8bf6e1c8956b6a981f05521e56b8e1","modified":1470560154000},{"_id":"source/_posts/2016-12-19-share.md","hash":"5f195a1da0396dc55779576049771f4600a6cc2a","modified":1482121317000},{"_id":"source/_posts/2016-12-21-applicationRecord-error.md","hash":"a6bf4a216191de42350c7bfdaf9e26488564d042","modified":1482287621000},{"_id":"source/_posts/2016-12-21-functional_programming.md","hash":"de2ed8887184ef7f0fca8c101f5eaea4c52105e3","modified":1482288404000},{"_id":"source/_posts/2016-12-21-git-amend.md","hash":"b5651f6b1ca98a65329640a6245eb0f014941541","modified":1482287961000},{"_id":"source/_posts/2016-12-21-git-ignore.md","hash":"a797f9bfc5d6148c0db0505760e5ddb950fcb91f","modified":1482288003000},{"_id":"source/_posts/2016-12-21-heroku-publish-error.md","hash":"80da46f747d9853270b3c0b9b7479d07f8930dd2","modified":1482287881000},{"_id":"source/_posts/2016-12-21-install-devise-error.md","hash":"6302d6b019a9e6b072ea5d106232fb842121b94c","modified":1482287923000},{"_id":"source/_posts/2016-12-21-rails-101-extra-jobs.md","hash":"c1c1828ee66a541d44b66457619691e78cb2a3ae","modified":1482287362000},{"_id":"source/_posts/2016-12-21-rails-console-error.md","hash":"2cfc4372c46ebf16b6dbdf237ca2e4535dbfa959","modified":1482287608000},{"_id":"source/_posts/2016-12-21-textarea-input.md","hash":"d0fdeb1288850e835bc9b13ddccf1659656a0b5e","modified":1482288055000},{"_id":"source/_posts/2016-12-21-the-wrong-count-for-the-associated-table-problem.md","hash":"789ee9499a868bd9a4a678c53daf7f39a2c6136c","modified":1482288103000},{"_id":"source/_posts/2016-12-21-why-writing.md","hash":"70547a89198caf43193c3aa428ab34589546d088","modified":1482288410000},{"_id":"source/categories/index.md","hash":"eaf63ec1817e535393b2a305aa9dab28c09f493b","modified":1467286567000},{"_id":"source/tags/index.md","hash":"687fc85e68fe3b7d28fadfb63730ed7220dab772","modified":1467011148000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1467008496000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1467008496000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1467008484000},{"_id":"themes/next/.git/index","hash":"dfb9372a2aca6b309233148359b5b3d5694b45ae","modified":1467008496000},{"_id":"themes/next/.git/packed-refs","hash":"247bb20f837b1fd8880ce23f7285c3f9dbb86d29","modified":1467008496000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1467008496000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1467008496000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1467008496000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1467008496000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1467008496000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1467008496000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1467008496000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1467008496000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1467008496000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1467008496000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1467008496000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1467008496000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1467008496000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1467008496000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1467008496000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1467008496000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1467008496000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1467008496000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1467008496000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1467008496000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1467008496000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1467008496000},{"_id":"themes/next/source/404.html","hash":"310fc37341c13586d09c4d1d82ca51ed082d6481","modified":1467010973000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1467008496000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1467008496000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1467008496000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1467008484000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1467008484000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1467008484000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1467008484000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1467008484000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1467008484000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1467008484000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1467008484000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1467008484000},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1467008484000},{"_id":"themes/next/.git/logs/HEAD","hash":"66657656535c9a381772ad3d98e6a72f6511642e","modified":1467008496000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1467008496000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1467008496000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1467008496000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1467008496000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1467008496000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1467008496000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1467008496000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1467008496000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1467008496000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1467008496000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1467008496000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1467008496000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1467008496000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1467008496000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1467008496000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1467008496000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1467008496000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1467008496000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1467008496000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1467008496000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1467008496000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1467008496000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1467008496000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1467008496000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1467008496000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1467008496000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1467008496000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1467008496000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1467008496000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1467008496000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1467008496000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1467008496000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1467008496000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1467008496000},{"_id":"themes/next/.git/refs/heads/master","hash":"4bd6aa9b86c8b9102aac211cc1924c2416ee18ea","modified":1467008496000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1467008496000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1467008496000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1467008496000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1467008496000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1467008496000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1467008496000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1467008496000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1467008496000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1467008496000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1467008496000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1467008496000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1467008496000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1467008496000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1467008496000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1467008496000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1467008496000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1467008496000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1467008496000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1467008496000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1467008496000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1467008496000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1467008496000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1467008496000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1467008496000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1467008496000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1467008496000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1467008496000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1467008496000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1467008496000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1467008496000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1467008496000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1467008496000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1467008496000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1467008496000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1467008496000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1467008496000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1467008496000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1467008496000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1467008496000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1467008496000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"66657656535c9a381772ad3d98e6a72f6511642e","modified":1467008496000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1467008496000},{"_id":"themes/next/.git/objects/pack/pack-2abd80b654abc42dc58697d88d1bc632fcf4af14.idx","hash":"2a0e42c561626e0c30f499e9047ed4f5748dc1e2","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1467008496000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1467008496000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1467008496000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1467008496000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1467008496000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1467008496000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1467008496000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1467008496000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1467008496000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1467008496000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1467008496000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1467008496000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1467008496000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1467008496000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"66657656535c9a381772ad3d98e6a72f6511642e","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1467008496000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1467008496000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1467008496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1467008496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1467008496000},{"_id":"themes/next/.git/objects/pack/pack-2abd80b654abc42dc58697d88d1bc632fcf4af14.pack","hash":"ad92b9e9474be92fdf98c484385d6d57c7fb923c","modified":1467008496000},{"_id":"public/categories/index.html","hash":"b7ed32dfed6c8f05f812f9bfc6f3996a9756772d","modified":1483494782143},{"_id":"public/tags/index.html","hash":"b9209c1710d1ab5cb49339e3a4d570893c1747c9","modified":1483494782143},{"_id":"public/2016/12/21/2016-12-21-git-ignore/index.html","hash":"365012db25ff80aa48ac31989736ae4797808628","modified":1483494782143},{"_id":"public/2016/12/21/2016-12-21-git-amend/index.html","hash":"d5f1b77bb792f25762a823f9ba0b876497628012","modified":1483494782143},{"_id":"public/2016/12/21/2016-12-21-heroku-publish-error/index.html","hash":"ff116e89ae1f36692aeb5d5d2ba33ef458002171","modified":1483494782143},{"_id":"public/2016/12/21/2016-12-11-coding-diary/index.html","hash":"6b48919b580dc22939b5312ad37b5eee25408316","modified":1483494782146},{"_id":"public/2016/12/21/2016-12-21-applicationRecord-error/index.html","hash":"b2fb2955e9ee50fa83aaf0ebe011859ddaa32e83","modified":1483494782143},{"_id":"public/2016/12/21/2016-12-21-rails-101-extra-jobs/index.html","hash":"b195be355c95e18e87ba88e00c5edcc7b26b9e52","modified":1483494782143},{"_id":"public/2016/12/21/2016-12-21-rails-console-error/index.html","hash":"f3336562f38f2ae079dcee969715efa5116413d3","modified":1483494782143},{"_id":"public/2016/12/19/2016-12-19-display-table/index.html","hash":"1951bb4576535d5c2b84aa22f9a77a765262c8c2","modified":1483494782143},{"_id":"public/2016/12/19/2016-12-19-share/index.html","hash":"07568adc40742c31f85164ccbfc7d50207aed703","modified":1483494782143},{"_id":"public/2016/12/08/2016-12-08-vuex-error/index.html","hash":"1931fb6f684d1bdac6e2be29c3dbad4ffaba2be5","modified":1483494782143},{"_id":"public/2016/09/16/2016-09-16-login_register/index.html","hash":"9eddb9271c49ad6e5d2a868e5634ae5dd6f22021","modified":1483494782143},{"_id":"public/2016/08/24/2016-08-24-weinre/index.html","hash":"a36fa4531a401e60ecb09c3fe41d8b849433d63f","modified":1483494782143},{"_id":"public/2016/08/09/2016-08-09-efficiency/index.html","hash":"2d6178942f6a55d86ea3d5d323ca39a1a46585b5","modified":1483494782143},{"_id":"public/2016/06/30/2016-06-30-mocha-babel/index.html","hash":"5cb9566d6f069c93f6d6c3866976ac826b8feb24","modified":1483494782143},{"_id":"public/archives/page/4/index.html","hash":"88895053ddbea54f10cfc4f4743f7ef80d50eda4","modified":1483494782143},{"_id":"public/archives/2016/page/4/index.html","hash":"40db90e571ea8ff1f5da34b576e1558f4da9213c","modified":1483494782143},{"_id":"public/archives/2016/06/index.html","hash":"705a7ba3324c9dece7423e201ff93d81e069e70a","modified":1483494782143},{"_id":"public/archives/2016/07/index.html","hash":"f5859c63fe394405f69fabbe2597625cfde55be1","modified":1483494782143},{"_id":"public/archives/2016/08/index.html","hash":"aa75766c789bee065eaff86f3d14e97a4af009b1","modified":1483494782144},{"_id":"public/archives/2016/09/index.html","hash":"72f4d666bc8d79f42e58984ac7c365b187155f93","modified":1483494782144},{"_id":"public/archives/2016/10/index.html","hash":"22e9c7e17a2202f87ab3e8328712f27328c1c9bf","modified":1483494782144},{"_id":"public/archives/2016/11/index.html","hash":"55bf189f65ca75286e8da881ceebeee9a2a4f8a3","modified":1483494782144},{"_id":"public/archives/2016/12/page/2/index.html","hash":"45646e32a6eb6fba5c0a2a632de53d5a0727d8aa","modified":1483494782144},{"_id":"public/categories/工具/index.html","hash":"4b0252a430138ad2c57c57e2037e687038f43664","modified":1483494782144},{"_id":"public/categories/Javascript/index.html","hash":"6c0a575298819fd16a916317fae927528f7cb57e","modified":1483494782144},{"_id":"public/categories/服务端/index.html","hash":"2c8fdcc2a6016f13462992657dcabd75d85ce7a4","modified":1483494782144},{"_id":"public/categories/践行/index.html","hash":"0d372d10203b17ad5dcab3ab5b3f77813b91813a","modified":1483494782144},{"_id":"public/categories/node/index.html","hash":"3734d8d83c7218b7663412690744061a1abc9ebb","modified":1483494782144},{"_id":"public/categories/总结/index.html","hash":"a1bb1e9fc4dbe470e829bf4ebe03aab01d99bd63","modified":1483494782144},{"_id":"public/categories/javascript/index.html","hash":"6758d1eaf2dcd0d4e1ed8a0a2c1640d8effc7eab","modified":1483494782144},{"_id":"public/categories/css/index.html","hash":"93f74f83ee151ccce55c2a957ed738984fff97c0","modified":1483494782144},{"_id":"public/categories/项目/index.html","hash":"5cd770fa1dcf9a5ea439997aea7f5b84ddf64749","modified":1483494782145},{"_id":"public/categories/rails/index.html","hash":"8501df35805491b785ef71ed2557fee05dc197ac","modified":1483494782145},{"_id":"public/categories/git/index.html","hash":"86ecdd238bde797dbaddb9054b46e92ad646c654","modified":1483494782145},{"_id":"public/tags/Mocha/index.html","hash":"be748ba717c372a8e51a105bb334c76d7f95a4aa","modified":1483494782145},{"_id":"public/tags/Cheatsheets/index.html","hash":"8b37f7aa00982631857bc8a7cecb0f69d173cabd","modified":1483494782145},{"_id":"public/tags/vue/index.html","hash":"1d3b944d46f813da51eda07a3c116ef3468883db","modified":1483494782145},{"_id":"public/tags/vuex/index.html","hash":"c508e5d94039f8334e6d288ccf2fed230c3f1b04","modified":1483494782145},{"_id":"public/tags/vue-loader/index.html","hash":"60f3db7d8a77bed08fe0aa7515dbff72079fd735","modified":1483494782145},{"_id":"public/tags/组件化/index.html","hash":"832f68849c60aaba15f98ed4055f65e06ba06389","modified":1483494782145},{"_id":"public/tags/Nginx/index.html","hash":"1eb6b8c7cf19d33d655dc5dce56d0afa55008ee9","modified":1483494782145},{"_id":"public/tags/node/index.html","hash":"14ce71e1da39fb8acd88c6c24835fad0753646fe","modified":1483494782146},{"_id":"public/tags/测试/index.html","hash":"acec827cc460c0af4ba009f83704225f648878ce","modified":1483494782146},{"_id":"public/tags/koa2/index.html","hash":"6af6e5d10414048bfa21811c46c57a27e070dc5c","modified":1483494782146},{"_id":"public/tags/react/index.html","hash":"50bbcf7f3f9adca814112628f9e24056325464b6","modified":1483494782146},{"_id":"public/tags/es6/index.html","hash":"01bb6c369ffd5a862625b970efcfd8bb5cd946f5","modified":1483494782146},{"_id":"public/tags/单元测试/index.html","hash":"e08629f27a20f3380b6d426532edf8a1edf5b352","modified":1483494782146},{"_id":"public/tags/错误/index.html","hash":"cf3c2b5d87eb62141079f43048c50c7e20e3a7e9","modified":1483494782146},{"_id":"public/2016/12/21/2016-12-21-the-wrong-count-for-the-associated-table-problem/index.html","hash":"61705265b44cf18afb27986fab17c7ca2dda665a","modified":1483494782146},{"_id":"public/2016/12/21/2016-12-21-textarea-input/index.html","hash":"0e1692a6b068ec71e021ad2867348fb7fce75ec4","modified":1483494782146},{"_id":"public/2016/12/21/2016-12-21-install-devise-error/index.html","hash":"02e6258e94a9f6d91631066f9440695e9cf656ba","modified":1483494782146},{"_id":"public/2016/12/21/2016-12-21-why-writing/index.html","hash":"9628beb442f9d886952af69073341b561240ea0b","modified":1483494782146},{"_id":"public/2016/12/21/2016-12-10-coding-diary/index.html","hash":"f96890f669badb2eea544802d94801dea9de89ad","modified":1483494782146},{"_id":"public/2016/12/21/2016-12-09-coding-diary/index.html","hash":"1a7b3b47f9563fa24a2d0d272e81c223ab4a8d66","modified":1483494782146},{"_id":"public/2016/12/21/2016-12-08-coding-diary/index.html","hash":"811e4f93c984cc8bb5858883003171819e9ea570","modified":1483494782146},{"_id":"public/2016/12/07/2016-12-07-vue-upgrade/index.html","hash":"c7e546f30c43ea6f22c983d4d22131f1ba41adfe","modified":1483494782146},{"_id":"public/2016/11/14/2016-11-14-snowflake/index.html","hash":"e37672fdc44201d5b6c729e0c78696925073ea19","modified":1483494782146},{"_id":"public/2016/11/13/2016-11-13-scope/index.html","hash":"a2ba772217a6c38a6103b81102776227d951912e","modified":1483494782146},{"_id":"public/2016/10/24/2016-10-24-vue-caveats/index.html","hash":"157804c1b966582bb44b1ac9fb264b3ef50f90cb","modified":1483494782146},{"_id":"public/2016/10/22/2016-10-22-coding-principle/index.html","hash":"2e83107843634a27d732ecfcb5d69fddf5c1f0e3","modified":1483494782146},{"_id":"public/2016/10/20/2016-10-20-koa2-vue-1/index.html","hash":"b89b47aa3cc4edff0ba67e2513cfa9d5c3d02c18","modified":1483494782147},{"_id":"public/2016/09/24/2016-12-21-functional_programming/index.html","hash":"fe8465ac590d9b122275fe95645c45ae5b5c47c8","modified":1483494782150},{"_id":"public/2016/08/25/2016-08-25-supertest/index.html","hash":"89bd6251a852495886733d68d45555895d980255","modified":1483494782150},{"_id":"public/2016/08/22/2016-08-22-wechat/index.html","hash":"327625496833a79e50535e9992c2504ed0603d5c","modified":1483494782150},{"_id":"public/2016/08/11/2016-08-11-learn-new-things/index.html","hash":"5f8c182186dc51ceaac343fd034109a144a3722e","modified":1483494782150},{"_id":"public/2016/08/10/2016-08-10-node_global/index.html","hash":"7ddc42c92ea07bb23dbbcea17dd7166dcc08a2c5","modified":1483494782150},{"_id":"public/2016/08/07/2016-08-07-nginx/index.html","hash":"abf903190f5285bf82de2c00c9c6be599e959531","modified":1483494782150},{"_id":"public/2016/07/20/2016-07-20-vue-loader/index.html","hash":"258489d7cf1f17cca88902775facce5202236bea","modified":1483494782150},{"_id":"public/2016/07/19/2016-07-19-vuex/index.html","hash":"de72b2e626e62234d8ae9c3180bdb4ab7f7e813b","modified":1483494782150},{"_id":"public/2016/07/02/2016-12-19-es6-unit-test/index.html","hash":"c391a16c56f59a02c5891af8a3719d4c8eb6214c","modified":1483494782150},{"_id":"public/2016/06/27/2016-06-27-alfred/index.html","hash":"bd1947ad5feb46f3866b790b9249207ebce9398a","modified":1483494782150},{"_id":"public/archives/index.html","hash":"c9e24761036dec0a474ebd458b21c4b2044f2ee1","modified":1483494782151},{"_id":"public/archives/page/2/index.html","hash":"f9a5dd70b055003b59521e1b9b1e6676b64819f9","modified":1483494782151},{"_id":"public/archives/page/3/index.html","hash":"1db315227f91892dde7dd3e61a667bfa09ce8c1a","modified":1483494782151},{"_id":"public/archives/2016/index.html","hash":"31019c0910ab4c47bae614d0e72edca44f4f4019","modified":1483494782151},{"_id":"public/archives/2016/page/2/index.html","hash":"d327e3846fc61f7ed57b9ef0206be947b603be92","modified":1483494782151},{"_id":"public/archives/2016/page/3/index.html","hash":"c550787acbe8fa8f1a5926c409127f66356ed4b6","modified":1483494782151},{"_id":"public/archives/2016/12/index.html","hash":"1b4e1abda6e7768de54946866a297b311644b8b0","modified":1483494782151},{"_id":"public/index.html","hash":"81f5d6a8d41099c62d7efa346e1abd64b5caaa7d","modified":1483494782151},{"_id":"public/page/2/index.html","hash":"1c3d0d42b08b2edb40948a6dbc4cf7087c9ad28a","modified":1483494782151},{"_id":"public/page/3/index.html","hash":"3bdf782ceee2669d2636c3bb589f079957bff073","modified":1483494782151},{"_id":"public/page/4/index.html","hash":"a0b7e9a10247e37b6813842a6113e062e00794fd","modified":1483494782151},{"_id":"source/_drafts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1483494062000},{"_id":"public/CNAME","hash":"d9e13b066cc8af2a77271cc843c593518d844896","modified":1483494782161},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1483494782161},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1483494782161},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1483494782161},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1483494782161},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1483494782161},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1483494782161},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1483494782161},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1483494782161},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1483494782161},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1483494782162},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1483494782162},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1483494782162},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1483494782162},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1483494782162},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1483494782162},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1483494782162},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1483494782162},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1483494782162},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1483494782162},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1483494782162},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1483494782162},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1483494782162},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1483494782162},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1483494782162},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1483494782822},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1483494782831},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1483494782834},{"_id":"public/404.html","hash":"310fc37341c13586d09c4d1d82ca51ed082d6481","modified":1483494782843},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1483494782843},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1483494782843},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1483494782843},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1483494782843},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1483494782843},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1483494782843},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1483494782843},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1483494782843},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1483494782843},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1483494782843},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1483494782843},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1483494782843},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1483494782843},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1483494782843},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1483494782843},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1483494782843},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1483494782843},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1483494782843},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1483494782843},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1483494782843},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1483494782844},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1483494782844},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1483494782844},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1483494782844},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1483494782844},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1483494782844},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1483494782844},{"_id":"public/css/main.css","hash":"fc4042f5fdfacdc228bfc4a1e704b8f35352d3a2","modified":1483494782844},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1483494782844},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1483494782844},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1483494782844},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1483494782844},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1483494782844},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1483494782844},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1483494782844},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1483494782844},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1483494782844},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1483494782844},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1483494782859}],"Category":[{"name":"读书笔记","_id":"cixhpxr7x0005y3onedl1unh5"},{"name":"工具","_id":"cixhpxr8q000ky3onvllvkmil"},{"name":"Javascript","_id":"cixhpxr8z000py3onczdq6dvn"},{"name":"服务端","_id":"cixhpxr9k0016y3onfn8pm2lk"},{"name":"践行","_id":"cixhpxr9o001cy3on1ylp9q6k"},{"name":"node","_id":"cixhpxr9s001jy3onnpn4twzs"},{"name":"javascript","_id":"cixhpxrau002my3onjbd24l9s"},{"name":"总结","_id":"cixhpxrax002ty3onwpbqspnz"},{"name":"css","_id":"cixhpxrbi003iy3onpv3rj165"},{"name":"项目","_id":"cixhpxrbn003oy3on4d504jpw"},{"name":"rails","_id":"cixhpxrbp003uy3onc9nb6u6s"},{"name":"git","_id":"cixhpxrbq003yy3on7rfyi0i4"}],"Data":[],"Page":[{"title":"categories","date":"2016-06-30T11:35:19.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-06-30 19:35:19\ntype: \"categories\"\n---\n","updated":"2016-06-30T11:36:07.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cixhpxr7n0001y3on4patboyz","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-06-27T07:05:07.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-06-27 15:05:07\ntype: \"tags\"\n---\n","updated":"2016-06-27T07:05:48.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cixhpxr7u0003y3onnzkiured","content":"","excerpt":"","more":""}],"Post":[{"title":"《精进》学习笔记（1）：学习","_content":"\n我们知道，在学习的时候， 如果不主动思考，效率是很低的，对于知识的理解也只是停留在比较肤浅的层面，并没有真正的掌握。所以，我们需要一些方法论来提高学习时的主动性。\n\n## 低效率的学习方式\n低效率的学习方式就是在学习知识时，只是简单的理解和“装载”，而没有任何思考。在这个过程中，学习者只是纯粹的记忆，更关注知识的完整性和精确性。对于知识而言，只是从一个载体运输到另一个载体，没有发生任何改变，是一个完全静态的东西。在阅读的过程中，学习者将原有的知识隔离，既没有对比新、旧知识，也没有对新知识进行拓展。\n\n## 我的阅读方式\n拿到一本书，从第一页开始翻看，对重点知识进行标记，并记录到笔记本里面，看完整本书之后，再整理出一份思维导图，然后就把读书笔记和思维导图存放进我的知识库，开始阅读下一本书。这就是我一直以来的读书方式，看起来并不存在什么问题。但是，我发现，过了一周或者一个月之后，当我重新复习这本书的笔记和思维导图时，只记得很少的几个结论和观点，对于书中的很多知识，都忘记了。\n\n现在我才发现，一直以来我只是个知识“搬运工”，只是简单地把从书中或者网上看到的观点记录下来，装进的我“知识仓库”，然后就把仓库门关上了。事实上，这些知识并不属于我，它们暂时存放在我这里，却很难被我使用。\n\n原来这类学习模式叫作：“直接传递模式”，即认为学习就是简单、线性的“传递--接受”的过程。在这个过程中，为什么我没能主动思考的行为呢？答案就是我**没有提出问题**，从而失去了主动性，只是被动的接受知识。\n\n> **好的学习者，首先要向自己提问**。\n\n一旦我们提出了问题，就自然而然地会想要去探索答案，这就是另外一种学习方式：**构建式模式**，学习者不是简单地吸收知识，而是**主动地构建知识**，充分调用他们已有知识，在**主动性目标**的指引下，把新旧知识糅合在一起，在头脑中构建出新的知识体系。\n\n## 解码\n现在是一个互联网时代，也是一个碎片化阅读的时代，很多人养成了一种囤积的习惯，就是下载很多电子书、收藏网上的文章或者拷贝到笔记软件中。这种资料的收集固然好，可惜经常只是**存而不阅**，不过是做了知识的搬运工。\n\n在阅读一段材料是，有两个阶段，“理解--解码”，理解通常指的对字面意义的解读，常以自动化的方式进行，无须做太深入的思考，并且应该遵从客观本义，不可擅自演化（笑来老师在“[如何使自己变傻](http://v.youku.com/v_show/id_XNjI2ODA4ODA4.html)”的演讲中提到的**匹配模式和自欺欺人**）。解码则是更为主动的过程，需要调用原有的知识，对于同一材料，不同的人有不同的解码。\n\n### 解码的方法论\n两个步骤，首先是**通过提问的方式，打开新旧知识之间的通道**，对于一段学习材料，可以多去思考以下4个问题：\n> 1. 我已经具备了哪些相关知识？\n> 2. 我又学到了哪些新的知识？\n> 3. 还有哪些未知的东西，且这些东西我通过简单的探索就可以了解？\n> 4. 还有哪些未知的东西，目前无法轻易知道答案，但是值得我长期去探索的问题？\n\n然后，除了寻结论、归纳和寻找共鸣之外，还需关注3个额外的突破口：寻过程、扩展和比较与现有知识不相同的地方。\n\n## 学以致用\n通过理解和解码，我们已经初步地吸取了知识，但是，\n> 你掌握知识的多少，并不取决于你记忆了多少知识，而取决于你能调用多少知识。\n\n知识应该当作一项技能来学习，技能是什么？就是学完之后，要拿来用的。\n\n> 求知分为3个层级：信息、知识和技能。最差的学习者只接受知识，贪多求广；好一点的学习者看重知识，以记忆为目标；高手磨炼技能。\n\n那么，怎样操练已经学习到的知识呢？除了在生活中对知识进行实践之外，还有一种非常重要的输出方式：**写作**，对知识进行重构，并且有条理地输出，这其实就是一种“教”。\n\n## “教”就是最好的“学”\n关于这点，笑来老师在第四次直播[《新生大学的原则：分享》](http://h5.xinshengdaxue.com/member_video_4.html)中也提到过：\n> 我们一直主张的是：“教”是最好的学习方法。而所谓的“教”，其实也是一种分享，不是吗？\n\n刘未鹏在[《为什么你应该（从现在开始就）写博客》](http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/)中提到：\n> 如果一件事情你不能讲清楚，十有八九你还没有完全理解。绝大多数人应该都知道在程序员行业面试官经常要求你讲解一个东西给他听，他会说他不懂这个东西（他如果真的不懂的话效果其实是最好的），而你的任务则是说到让他理解为止。\n\n文章还提到一个小故事：\n> 据说在某个著名软件公司里，开发组的桌上会放着一只小熊，大家互相问问题之前，先对着小熊把问题说一遍，看能不能把问题描述的清晰，基本上说的比较有条理以后，答案也就随之而来了。\n\n当你学习了一个知识点之后，想象你将这个知识点讲给一个完全不懂的人听，而且要让他听懂。当你在某个点上卡住了，说明你有些地方还不清楚。这就迫使你必须去反思你的知识体系，反思得越深刻，你的知识体系就越完善。\n\n---\n这是我在新生大学的第二篇文章，花了两天的时间才整理完，在这个过程中，真真切切地感受到接受知识很容易，而对知识的输出则是一件需要不断操练的技能。我希望自己能从固守型转变为进步型，从不断地写作中，让自己进步，最后，引用笑来老师的一句话：\n> 不真诚、不行动、不分享，就感觉活着没意思，活着没意义，甚至干脆活不下去的地步。\n","source":"_drafts/2016-06-29-jingjin-note-1.md","raw":"---\ntitle: 《精进》学习笔记（1）：学习\ncategories: 读书笔记\ntags: 《精进》\n---\n\n我们知道，在学习的时候， 如果不主动思考，效率是很低的，对于知识的理解也只是停留在比较肤浅的层面，并没有真正的掌握。所以，我们需要一些方法论来提高学习时的主动性。\n\n## 低效率的学习方式\n低效率的学习方式就是在学习知识时，只是简单的理解和“装载”，而没有任何思考。在这个过程中，学习者只是纯粹的记忆，更关注知识的完整性和精确性。对于知识而言，只是从一个载体运输到另一个载体，没有发生任何改变，是一个完全静态的东西。在阅读的过程中，学习者将原有的知识隔离，既没有对比新、旧知识，也没有对新知识进行拓展。\n\n## 我的阅读方式\n拿到一本书，从第一页开始翻看，对重点知识进行标记，并记录到笔记本里面，看完整本书之后，再整理出一份思维导图，然后就把读书笔记和思维导图存放进我的知识库，开始阅读下一本书。这就是我一直以来的读书方式，看起来并不存在什么问题。但是，我发现，过了一周或者一个月之后，当我重新复习这本书的笔记和思维导图时，只记得很少的几个结论和观点，对于书中的很多知识，都忘记了。\n\n现在我才发现，一直以来我只是个知识“搬运工”，只是简单地把从书中或者网上看到的观点记录下来，装进的我“知识仓库”，然后就把仓库门关上了。事实上，这些知识并不属于我，它们暂时存放在我这里，却很难被我使用。\n\n原来这类学习模式叫作：“直接传递模式”，即认为学习就是简单、线性的“传递--接受”的过程。在这个过程中，为什么我没能主动思考的行为呢？答案就是我**没有提出问题**，从而失去了主动性，只是被动的接受知识。\n\n> **好的学习者，首先要向自己提问**。\n\n一旦我们提出了问题，就自然而然地会想要去探索答案，这就是另外一种学习方式：**构建式模式**，学习者不是简单地吸收知识，而是**主动地构建知识**，充分调用他们已有知识，在**主动性目标**的指引下，把新旧知识糅合在一起，在头脑中构建出新的知识体系。\n\n## 解码\n现在是一个互联网时代，也是一个碎片化阅读的时代，很多人养成了一种囤积的习惯，就是下载很多电子书、收藏网上的文章或者拷贝到笔记软件中。这种资料的收集固然好，可惜经常只是**存而不阅**，不过是做了知识的搬运工。\n\n在阅读一段材料是，有两个阶段，“理解--解码”，理解通常指的对字面意义的解读，常以自动化的方式进行，无须做太深入的思考，并且应该遵从客观本义，不可擅自演化（笑来老师在“[如何使自己变傻](http://v.youku.com/v_show/id_XNjI2ODA4ODA4.html)”的演讲中提到的**匹配模式和自欺欺人**）。解码则是更为主动的过程，需要调用原有的知识，对于同一材料，不同的人有不同的解码。\n\n### 解码的方法论\n两个步骤，首先是**通过提问的方式，打开新旧知识之间的通道**，对于一段学习材料，可以多去思考以下4个问题：\n> 1. 我已经具备了哪些相关知识？\n> 2. 我又学到了哪些新的知识？\n> 3. 还有哪些未知的东西，且这些东西我通过简单的探索就可以了解？\n> 4. 还有哪些未知的东西，目前无法轻易知道答案，但是值得我长期去探索的问题？\n\n然后，除了寻结论、归纳和寻找共鸣之外，还需关注3个额外的突破口：寻过程、扩展和比较与现有知识不相同的地方。\n\n## 学以致用\n通过理解和解码，我们已经初步地吸取了知识，但是，\n> 你掌握知识的多少，并不取决于你记忆了多少知识，而取决于你能调用多少知识。\n\n知识应该当作一项技能来学习，技能是什么？就是学完之后，要拿来用的。\n\n> 求知分为3个层级：信息、知识和技能。最差的学习者只接受知识，贪多求广；好一点的学习者看重知识，以记忆为目标；高手磨炼技能。\n\n那么，怎样操练已经学习到的知识呢？除了在生活中对知识进行实践之外，还有一种非常重要的输出方式：**写作**，对知识进行重构，并且有条理地输出，这其实就是一种“教”。\n\n## “教”就是最好的“学”\n关于这点，笑来老师在第四次直播[《新生大学的原则：分享》](http://h5.xinshengdaxue.com/member_video_4.html)中也提到过：\n> 我们一直主张的是：“教”是最好的学习方法。而所谓的“教”，其实也是一种分享，不是吗？\n\n刘未鹏在[《为什么你应该（从现在开始就）写博客》](http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/)中提到：\n> 如果一件事情你不能讲清楚，十有八九你还没有完全理解。绝大多数人应该都知道在程序员行业面试官经常要求你讲解一个东西给他听，他会说他不懂这个东西（他如果真的不懂的话效果其实是最好的），而你的任务则是说到让他理解为止。\n\n文章还提到一个小故事：\n> 据说在某个著名软件公司里，开发组的桌上会放着一只小熊，大家互相问问题之前，先对着小熊把问题说一遍，看能不能把问题描述的清晰，基本上说的比较有条理以后，答案也就随之而来了。\n\n当你学习了一个知识点之后，想象你将这个知识点讲给一个完全不懂的人听，而且要让他听懂。当你在某个点上卡住了，说明你有些地方还不清楚。这就迫使你必须去反思你的知识体系，反思得越深刻，你的知识体系就越完善。\n\n---\n这是我在新生大学的第二篇文章，花了两天的时间才整理完，在这个过程中，真真切切地感受到接受知识很容易，而对知识的输出则是一件需要不断操练的技能。我希望自己能从固守型转变为进步型，从不断地写作中，让自己进步，最后，引用笑来老师的一句话：\n> 不真诚、不行动、不分享，就感觉活着没意思，活着没意义，甚至干脆活不下去的地步。\n","slug":"2016-06-29-jingjin-note-1","published":0,"date":"2016-06-29T02:10:14.000Z","updated":"2016-06-29T02:10:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr7f0000y3onu5mh7gm8","content":"<p>我们知道，在学习的时候， 如果不主动思考，效率是很低的，对于知识的理解也只是停留在比较肤浅的层面，并没有真正的掌握。所以，我们需要一些方法论来提高学习时的主动性。</p>\n<h2 id=\"低效率的学习方式\"><a href=\"#低效率的学习方式\" class=\"headerlink\" title=\"低效率的学习方式\"></a>低效率的学习方式</h2><p>低效率的学习方式就是在学习知识时，只是简单的理解和“装载”，而没有任何思考。在这个过程中，学习者只是纯粹的记忆，更关注知识的完整性和精确性。对于知识而言，只是从一个载体运输到另一个载体，没有发生任何改变，是一个完全静态的东西。在阅读的过程中，学习者将原有的知识隔离，既没有对比新、旧知识，也没有对新知识进行拓展。</p>\n<h2 id=\"我的阅读方式\"><a href=\"#我的阅读方式\" class=\"headerlink\" title=\"我的阅读方式\"></a>我的阅读方式</h2><p>拿到一本书，从第一页开始翻看，对重点知识进行标记，并记录到笔记本里面，看完整本书之后，再整理出一份思维导图，然后就把读书笔记和思维导图存放进我的知识库，开始阅读下一本书。这就是我一直以来的读书方式，看起来并不存在什么问题。但是，我发现，过了一周或者一个月之后，当我重新复习这本书的笔记和思维导图时，只记得很少的几个结论和观点，对于书中的很多知识，都忘记了。</p>\n<p>现在我才发现，一直以来我只是个知识“搬运工”，只是简单地把从书中或者网上看到的观点记录下来，装进的我“知识仓库”，然后就把仓库门关上了。事实上，这些知识并不属于我，它们暂时存放在我这里，却很难被我使用。</p>\n<p>原来这类学习模式叫作：“直接传递模式”，即认为学习就是简单、线性的“传递–接受”的过程。在这个过程中，为什么我没能主动思考的行为呢？答案就是我<strong>没有提出问题</strong>，从而失去了主动性，只是被动的接受知识。</p>\n<blockquote>\n<p><strong>好的学习者，首先要向自己提问</strong>。</p>\n</blockquote>\n<p>一旦我们提出了问题，就自然而然地会想要去探索答案，这就是另外一种学习方式：<strong>构建式模式</strong>，学习者不是简单地吸收知识，而是<strong>主动地构建知识</strong>，充分调用他们已有知识，在<strong>主动性目标</strong>的指引下，把新旧知识糅合在一起，在头脑中构建出新的知识体系。</p>\n<h2 id=\"解码\"><a href=\"#解码\" class=\"headerlink\" title=\"解码\"></a>解码</h2><p>现在是一个互联网时代，也是一个碎片化阅读的时代，很多人养成了一种囤积的习惯，就是下载很多电子书、收藏网上的文章或者拷贝到笔记软件中。这种资料的收集固然好，可惜经常只是<strong>存而不阅</strong>，不过是做了知识的搬运工。</p>\n<p>在阅读一段材料是，有两个阶段，“理解–解码”，理解通常指的对字面意义的解读，常以自动化的方式进行，无须做太深入的思考，并且应该遵从客观本义，不可擅自演化（笑来老师在“<a href=\"http://v.youku.com/v_show/id_XNjI2ODA4ODA4.html\" target=\"_blank\" rel=\"external\">如何使自己变傻</a>”的演讲中提到的<strong>匹配模式和自欺欺人</strong>）。解码则是更为主动的过程，需要调用原有的知识，对于同一材料，不同的人有不同的解码。</p>\n<h3 id=\"解码的方法论\"><a href=\"#解码的方法论\" class=\"headerlink\" title=\"解码的方法论\"></a>解码的方法论</h3><p>两个步骤，首先是<strong>通过提问的方式，打开新旧知识之间的通道</strong>，对于一段学习材料，可以多去思考以下4个问题：</p>\n<blockquote>\n<ol>\n<li>我已经具备了哪些相关知识？</li>\n<li>我又学到了哪些新的知识？</li>\n<li>还有哪些未知的东西，且这些东西我通过简单的探索就可以了解？</li>\n<li>还有哪些未知的东西，目前无法轻易知道答案，但是值得我长期去探索的问题？</li>\n</ol>\n</blockquote>\n<p>然后，除了寻结论、归纳和寻找共鸣之外，还需关注3个额外的突破口：寻过程、扩展和比较与现有知识不相同的地方。</p>\n<h2 id=\"学以致用\"><a href=\"#学以致用\" class=\"headerlink\" title=\"学以致用\"></a>学以致用</h2><p>通过理解和解码，我们已经初步地吸取了知识，但是，</p>\n<blockquote>\n<p>你掌握知识的多少，并不取决于你记忆了多少知识，而取决于你能调用多少知识。</p>\n</blockquote>\n<p>知识应该当作一项技能来学习，技能是什么？就是学完之后，要拿来用的。</p>\n<blockquote>\n<p>求知分为3个层级：信息、知识和技能。最差的学习者只接受知识，贪多求广；好一点的学习者看重知识，以记忆为目标；高手磨炼技能。</p>\n</blockquote>\n<p>那么，怎样操练已经学习到的知识呢？除了在生活中对知识进行实践之外，还有一种非常重要的输出方式：<strong>写作</strong>，对知识进行重构，并且有条理地输出，这其实就是一种“教”。</p>\n<h2 id=\"“教”就是最好的“学”\"><a href=\"#“教”就是最好的“学”\" class=\"headerlink\" title=\"“教”就是最好的“学”\"></a>“教”就是最好的“学”</h2><p>关于这点，笑来老师在第四次直播<a href=\"http://h5.xinshengdaxue.com/member_video_4.html\" target=\"_blank\" rel=\"external\">《新生大学的原则：分享》</a>中也提到过：</p>\n<blockquote>\n<p>我们一直主张的是：“教”是最好的学习方法。而所谓的“教”，其实也是一种分享，不是吗？</p>\n</blockquote>\n<p>刘未鹏在<a href=\"http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/\" target=\"_blank\" rel=\"external\">《为什么你应该（从现在开始就）写博客》</a>中提到：</p>\n<blockquote>\n<p>如果一件事情你不能讲清楚，十有八九你还没有完全理解。绝大多数人应该都知道在程序员行业面试官经常要求你讲解一个东西给他听，他会说他不懂这个东西（他如果真的不懂的话效果其实是最好的），而你的任务则是说到让他理解为止。</p>\n</blockquote>\n<p>文章还提到一个小故事：</p>\n<blockquote>\n<p>据说在某个著名软件公司里，开发组的桌上会放着一只小熊，大家互相问问题之前，先对着小熊把问题说一遍，看能不能把问题描述的清晰，基本上说的比较有条理以后，答案也就随之而来了。</p>\n</blockquote>\n<p>当你学习了一个知识点之后，想象你将这个知识点讲给一个完全不懂的人听，而且要让他听懂。当你在某个点上卡住了，说明你有些地方还不清楚。这就迫使你必须去反思你的知识体系，反思得越深刻，你的知识体系就越完善。</p>\n<hr>\n<p>这是我在新生大学的第二篇文章，花了两天的时间才整理完，在这个过程中，真真切切地感受到接受知识很容易，而对知识的输出则是一件需要不断操练的技能。我希望自己能从固守型转变为进步型，从不断地写作中，让自己进步，最后，引用笑来老师的一句话：</p>\n<blockquote>\n<p>不真诚、不行动、不分享，就感觉活着没意思，活着没意义，甚至干脆活不下去的地步。</p>\n</blockquote>\n","excerpt":"","more":"<p>我们知道，在学习的时候， 如果不主动思考，效率是很低的，对于知识的理解也只是停留在比较肤浅的层面，并没有真正的掌握。所以，我们需要一些方法论来提高学习时的主动性。</p>\n<h2 id=\"低效率的学习方式\"><a href=\"#低效率的学习方式\" class=\"headerlink\" title=\"低效率的学习方式\"></a>低效率的学习方式</h2><p>低效率的学习方式就是在学习知识时，只是简单的理解和“装载”，而没有任何思考。在这个过程中，学习者只是纯粹的记忆，更关注知识的完整性和精确性。对于知识而言，只是从一个载体运输到另一个载体，没有发生任何改变，是一个完全静态的东西。在阅读的过程中，学习者将原有的知识隔离，既没有对比新、旧知识，也没有对新知识进行拓展。</p>\n<h2 id=\"我的阅读方式\"><a href=\"#我的阅读方式\" class=\"headerlink\" title=\"我的阅读方式\"></a>我的阅读方式</h2><p>拿到一本书，从第一页开始翻看，对重点知识进行标记，并记录到笔记本里面，看完整本书之后，再整理出一份思维导图，然后就把读书笔记和思维导图存放进我的知识库，开始阅读下一本书。这就是我一直以来的读书方式，看起来并不存在什么问题。但是，我发现，过了一周或者一个月之后，当我重新复习这本书的笔记和思维导图时，只记得很少的几个结论和观点，对于书中的很多知识，都忘记了。</p>\n<p>现在我才发现，一直以来我只是个知识“搬运工”，只是简单地把从书中或者网上看到的观点记录下来，装进的我“知识仓库”，然后就把仓库门关上了。事实上，这些知识并不属于我，它们暂时存放在我这里，却很难被我使用。</p>\n<p>原来这类学习模式叫作：“直接传递模式”，即认为学习就是简单、线性的“传递–接受”的过程。在这个过程中，为什么我没能主动思考的行为呢？答案就是我<strong>没有提出问题</strong>，从而失去了主动性，只是被动的接受知识。</p>\n<blockquote>\n<p><strong>好的学习者，首先要向自己提问</strong>。</p>\n</blockquote>\n<p>一旦我们提出了问题，就自然而然地会想要去探索答案，这就是另外一种学习方式：<strong>构建式模式</strong>，学习者不是简单地吸收知识，而是<strong>主动地构建知识</strong>，充分调用他们已有知识，在<strong>主动性目标</strong>的指引下，把新旧知识糅合在一起，在头脑中构建出新的知识体系。</p>\n<h2 id=\"解码\"><a href=\"#解码\" class=\"headerlink\" title=\"解码\"></a>解码</h2><p>现在是一个互联网时代，也是一个碎片化阅读的时代，很多人养成了一种囤积的习惯，就是下载很多电子书、收藏网上的文章或者拷贝到笔记软件中。这种资料的收集固然好，可惜经常只是<strong>存而不阅</strong>，不过是做了知识的搬运工。</p>\n<p>在阅读一段材料是，有两个阶段，“理解–解码”，理解通常指的对字面意义的解读，常以自动化的方式进行，无须做太深入的思考，并且应该遵从客观本义，不可擅自演化（笑来老师在“<a href=\"http://v.youku.com/v_show/id_XNjI2ODA4ODA4.html\">如何使自己变傻</a>”的演讲中提到的<strong>匹配模式和自欺欺人</strong>）。解码则是更为主动的过程，需要调用原有的知识，对于同一材料，不同的人有不同的解码。</p>\n<h3 id=\"解码的方法论\"><a href=\"#解码的方法论\" class=\"headerlink\" title=\"解码的方法论\"></a>解码的方法论</h3><p>两个步骤，首先是<strong>通过提问的方式，打开新旧知识之间的通道</strong>，对于一段学习材料，可以多去思考以下4个问题：</p>\n<blockquote>\n<ol>\n<li>我已经具备了哪些相关知识？</li>\n<li>我又学到了哪些新的知识？</li>\n<li>还有哪些未知的东西，且这些东西我通过简单的探索就可以了解？</li>\n<li>还有哪些未知的东西，目前无法轻易知道答案，但是值得我长期去探索的问题？</li>\n</ol>\n</blockquote>\n<p>然后，除了寻结论、归纳和寻找共鸣之外，还需关注3个额外的突破口：寻过程、扩展和比较与现有知识不相同的地方。</p>\n<h2 id=\"学以致用\"><a href=\"#学以致用\" class=\"headerlink\" title=\"学以致用\"></a>学以致用</h2><p>通过理解和解码，我们已经初步地吸取了知识，但是，</p>\n<blockquote>\n<p>你掌握知识的多少，并不取决于你记忆了多少知识，而取决于你能调用多少知识。</p>\n</blockquote>\n<p>知识应该当作一项技能来学习，技能是什么？就是学完之后，要拿来用的。</p>\n<blockquote>\n<p>求知分为3个层级：信息、知识和技能。最差的学习者只接受知识，贪多求广；好一点的学习者看重知识，以记忆为目标；高手磨炼技能。</p>\n</blockquote>\n<p>那么，怎样操练已经学习到的知识呢？除了在生活中对知识进行实践之外，还有一种非常重要的输出方式：<strong>写作</strong>，对知识进行重构，并且有条理地输出，这其实就是一种“教”。</p>\n<h2 id=\"“教”就是最好的“学”\"><a href=\"#“教”就是最好的“学”\" class=\"headerlink\" title=\"“教”就是最好的“学”\"></a>“教”就是最好的“学”</h2><p>关于这点，笑来老师在第四次直播<a href=\"http://h5.xinshengdaxue.com/member_video_4.html\">《新生大学的原则：分享》</a>中也提到过：</p>\n<blockquote>\n<p>我们一直主张的是：“教”是最好的学习方法。而所谓的“教”，其实也是一种分享，不是吗？</p>\n</blockquote>\n<p>刘未鹏在<a href=\"http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/\">《为什么你应该（从现在开始就）写博客》</a>中提到：</p>\n<blockquote>\n<p>如果一件事情你不能讲清楚，十有八九你还没有完全理解。绝大多数人应该都知道在程序员行业面试官经常要求你讲解一个东西给他听，他会说他不懂这个东西（他如果真的不懂的话效果其实是最好的），而你的任务则是说到让他理解为止。</p>\n</blockquote>\n<p>文章还提到一个小故事：</p>\n<blockquote>\n<p>据说在某个著名软件公司里，开发组的桌上会放着一只小熊，大家互相问问题之前，先对着小熊把问题说一遍，看能不能把问题描述的清晰，基本上说的比较有条理以后，答案也就随之而来了。</p>\n</blockquote>\n<p>当你学习了一个知识点之后，想象你将这个知识点讲给一个完全不懂的人听，而且要让他听懂。当你在某个点上卡住了，说明你有些地方还不清楚。这就迫使你必须去反思你的知识体系，反思得越深刻，你的知识体系就越完善。</p>\n<hr>\n<p>这是我在新生大学的第二篇文章，花了两天的时间才整理完，在这个过程中，真真切切地感受到接受知识很容易，而对知识的输出则是一件需要不断操练的技能。我希望自己能从固守型转变为进步型，从不断地写作中，让自己进步，最后，引用笑来老师的一句话：</p>\n<blockquote>\n<p>不真诚、不行动、不分享，就感觉活着没意思，活着没意义，甚至干脆活不下去的地步。</p>\n</blockquote>\n"},{"title":"《精进》学习笔记（2）：发现更多可能性","_content":"\n当我们的处于困局的时候，困住我们的有两方面元素：\n\n> 1. 外界的客观因素\n> 2. 我们过去的经历、习惯和思维惯性\n\n以上两方面因素会导致在我们思考的时候自动植入“**隐设假设**”，从而限制了**思考的角度和范围**，只从极少的“可见选项”中做决定，而意识不到更多的“可能选项” 。\n\n> 可见选项：从个人经验和当前环境中自动产生，显而易见，无需主动探索。\n>\n> 可能选项：未被发现的潜在可能性，来自于我们关联的未知世界，或者已知事物的深层信息，需要我们主动探索和发现。\n\n举个例子\n\n> 小明是刚毕业的大学生，在一家小公司里面做着无关紧要的工作，感觉学不到东西，想要去大城市展示自己的才华，做一些有技术含量的工作，不断磨练专业技能，但是现在专业能力太一般，进不了大公司，所以也就不敢换工作，非常沮丧，感觉自己好懦弱。\n\n这个例子里面的隐含假设有：\n> 1. 工作内容是一成不变的，我会一直做着手上这些无关紧要的事情。\n> 2. 只有大城市才有好工作。\n> 3. 只有在工作中才能学到技能。\n> 4. 无法改变就是懦弱。\n\n尽管你可能说，这些隐含假设都太绝对了，小明也许也不会认同这些观点，是的，如果我们把隐含假设明明白白地理清楚，并且写下来，就会发现，其实有着太多的不合理性，有很明显的漏洞。但是，如果没有把隐含假设理清楚，任凭它们在脑中杂乱无章地飘荡，就会导致**你不知不觉就被影响了，虽然它们存在，但是你却意识不到，这太可怕了**。因此，我们需要一个方法论在摆脱隐含假设的限制。\n\n> 1. 罗列出所有隐含假设\n> 2. 找出不合理的隐含假设，并进行校正\n> 3. 思考出更多“可能选项”，并进行尝试\n\n所以，对于上面的例子，我们可以思考出更多的更合理的解决方案\n\n> 1. 不喜欢当前的工作内容，可以询问上司是否有其他工作内容可以尝试，如有必要，可以寻求调换岗位、部门的机会。\n> 2. 多方打听调研，发现本地的好公司。\n> 3. 利用业余时间自学，但自学并不代表只是一个人学习，可以参加培训、加入学校社群、学习在线课程等等。\n> 4. 引用《把时间当作朋友》中的一句话: “现状无法马上摆脱，接受现状才是最优策略 -- 有什么做什么，有什么用什么；做什么都做好，用什么都用好”。\n\n## 四种普遍的隐含假设\n在摆脱假设条件限制的方法论中，最重要的一步就是准确地找出隐含假设，这里列举出四种普遍的隐含假设\n\n**1. 赛道假设**\n这个假设最典型的一句话就是\n\n> ”不要让你的孩子输在起跑线上”\n\n认为人生是一场漫长的马拉松，比赛项目都是设定好的，所以很多家长就强制孩子学钢琴、学跳舞、学英语，希望孩子不落后于其它竞争选手。于是他们因为害怕失败而不去做其他尝试，老老实实地在一个被**外界固化的轨道上**不停地跑着。\n\n**2. 低关联假设**\n认为人生的种种经历之前相互独立，不存在什么关联。其实不是这样的，在一个领域中总结的经验的方法论，可以在另外一个类似领域中发挥很大的作用。\n\n> 知识的正确用法 —— 一个领域里面的大师永远不会是另一个类似领域的菜鸟 （引用自《[写给想成为前端工程师的同学们](https://www.h5jun.com/post/to-be-a-good-frontend-engineer.html)》）\n\n**3. 僵固性心智**\n这是表现型人格比较常见的心态\n\n> 认为人的智力和能力是一成不变的\n\n认为自己资质平平，没什么天赋，于是在遇到一些挫折之后就唉声叹气，也不想继续努力了，抗击打能力几乎没有。\n\n相反，进取型人格的心态则是“成长性心智”，认为智力和能力是可以通过努力不断增长的，因此并不惧怕短期的失败，反而越挫越勇。\n\n>  进取型性格的人，不太在意外界的看法，因为他们历来的经验就是自己在进步的过程中时时刻刻处于明天回头看就知道自己当时傻到不行的状态……他们会去尝试，他们会去学，他们知道自己可能失败、可能做不好，但那只是过程，进步是行动的注定结果。（引用自《[写给女生的五个择偶建议](http://xiaolai.baijia.baidu.com/article/147205)》）\n\n**4. 零和博弈**\n认同这个假设的人，会有两点倾向。\n\n第一是害怕未知，害怕不确定的东西，不肯忍受一定的未知，用很极端或者过分简单化的方式思考问题，非黑即白，但其实很多事情都不是那么绝对的，别轻易地困住自己的思维。\n\n第二个是这些人看事情的角度倾向于聚焦在局部，而整体，与他人的竞争中，更倾向于从别人那里争夺利益，而很少去构想双赢的方案。\n\n## 总结\n经常使用上面提到的方法论，摆脱隐含假设限制的，发现人生中更多的可能性。以前遇到理不清的问题时，就想着偷懒，转移注意力，然后忘掉它。现在尝试着用这个方法，把隐含假设列出来。分析一遍，竟然顺利地理清楚了，而且还发现了更多可以继续深入思考的点，整个过程变得挺好玩的。\n","source":"_drafts/2016-06-29-jingjin-note-2.md","raw":"---\ntitle: 《精进》学习笔记（2）：发现更多可能性\ncategories: 读书笔记\ntags: 《精进》\n---\n\n当我们的处于困局的时候，困住我们的有两方面元素：\n\n> 1. 外界的客观因素\n> 2. 我们过去的经历、习惯和思维惯性\n\n以上两方面因素会导致在我们思考的时候自动植入“**隐设假设**”，从而限制了**思考的角度和范围**，只从极少的“可见选项”中做决定，而意识不到更多的“可能选项” 。\n\n> 可见选项：从个人经验和当前环境中自动产生，显而易见，无需主动探索。\n>\n> 可能选项：未被发现的潜在可能性，来自于我们关联的未知世界，或者已知事物的深层信息，需要我们主动探索和发现。\n\n举个例子\n\n> 小明是刚毕业的大学生，在一家小公司里面做着无关紧要的工作，感觉学不到东西，想要去大城市展示自己的才华，做一些有技术含量的工作，不断磨练专业技能，但是现在专业能力太一般，进不了大公司，所以也就不敢换工作，非常沮丧，感觉自己好懦弱。\n\n这个例子里面的隐含假设有：\n> 1. 工作内容是一成不变的，我会一直做着手上这些无关紧要的事情。\n> 2. 只有大城市才有好工作。\n> 3. 只有在工作中才能学到技能。\n> 4. 无法改变就是懦弱。\n\n尽管你可能说，这些隐含假设都太绝对了，小明也许也不会认同这些观点，是的，如果我们把隐含假设明明白白地理清楚，并且写下来，就会发现，其实有着太多的不合理性，有很明显的漏洞。但是，如果没有把隐含假设理清楚，任凭它们在脑中杂乱无章地飘荡，就会导致**你不知不觉就被影响了，虽然它们存在，但是你却意识不到，这太可怕了**。因此，我们需要一个方法论在摆脱隐含假设的限制。\n\n> 1. 罗列出所有隐含假设\n> 2. 找出不合理的隐含假设，并进行校正\n> 3. 思考出更多“可能选项”，并进行尝试\n\n所以，对于上面的例子，我们可以思考出更多的更合理的解决方案\n\n> 1. 不喜欢当前的工作内容，可以询问上司是否有其他工作内容可以尝试，如有必要，可以寻求调换岗位、部门的机会。\n> 2. 多方打听调研，发现本地的好公司。\n> 3. 利用业余时间自学，但自学并不代表只是一个人学习，可以参加培训、加入学校社群、学习在线课程等等。\n> 4. 引用《把时间当作朋友》中的一句话: “现状无法马上摆脱，接受现状才是最优策略 -- 有什么做什么，有什么用什么；做什么都做好，用什么都用好”。\n\n## 四种普遍的隐含假设\n在摆脱假设条件限制的方法论中，最重要的一步就是准确地找出隐含假设，这里列举出四种普遍的隐含假设\n\n**1. 赛道假设**\n这个假设最典型的一句话就是\n\n> ”不要让你的孩子输在起跑线上”\n\n认为人生是一场漫长的马拉松，比赛项目都是设定好的，所以很多家长就强制孩子学钢琴、学跳舞、学英语，希望孩子不落后于其它竞争选手。于是他们因为害怕失败而不去做其他尝试，老老实实地在一个被**外界固化的轨道上**不停地跑着。\n\n**2. 低关联假设**\n认为人生的种种经历之前相互独立，不存在什么关联。其实不是这样的，在一个领域中总结的经验的方法论，可以在另外一个类似领域中发挥很大的作用。\n\n> 知识的正确用法 —— 一个领域里面的大师永远不会是另一个类似领域的菜鸟 （引用自《[写给想成为前端工程师的同学们](https://www.h5jun.com/post/to-be-a-good-frontend-engineer.html)》）\n\n**3. 僵固性心智**\n这是表现型人格比较常见的心态\n\n> 认为人的智力和能力是一成不变的\n\n认为自己资质平平，没什么天赋，于是在遇到一些挫折之后就唉声叹气，也不想继续努力了，抗击打能力几乎没有。\n\n相反，进取型人格的心态则是“成长性心智”，认为智力和能力是可以通过努力不断增长的，因此并不惧怕短期的失败，反而越挫越勇。\n\n>  进取型性格的人，不太在意外界的看法，因为他们历来的经验就是自己在进步的过程中时时刻刻处于明天回头看就知道自己当时傻到不行的状态……他们会去尝试，他们会去学，他们知道自己可能失败、可能做不好，但那只是过程，进步是行动的注定结果。（引用自《[写给女生的五个择偶建议](http://xiaolai.baijia.baidu.com/article/147205)》）\n\n**4. 零和博弈**\n认同这个假设的人，会有两点倾向。\n\n第一是害怕未知，害怕不确定的东西，不肯忍受一定的未知，用很极端或者过分简单化的方式思考问题，非黑即白，但其实很多事情都不是那么绝对的，别轻易地困住自己的思维。\n\n第二个是这些人看事情的角度倾向于聚焦在局部，而整体，与他人的竞争中，更倾向于从别人那里争夺利益，而很少去构想双赢的方案。\n\n## 总结\n经常使用上面提到的方法论，摆脱隐含假设限制的，发现人生中更多的可能性。以前遇到理不清的问题时，就想着偷懒，转移注意力，然后忘掉它。现在尝试着用这个方法，把隐含假设列出来。分析一遍，竟然顺利地理清楚了，而且还发现了更多可以继续深入思考的点，整个过程变得挺好玩的。\n","slug":"2016-06-29-jingjin-note-2","published":0,"date":"2016-06-28T23:46:31.000Z","updated":"2016-06-29T02:08:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr7o0002y3onfgnqbu0p","content":"<p>当我们的处于困局的时候，困住我们的有两方面元素：</p>\n<blockquote>\n<ol>\n<li>外界的客观因素</li>\n<li>我们过去的经历、习惯和思维惯性</li>\n</ol>\n</blockquote>\n<p>以上两方面因素会导致在我们思考的时候自动植入“<strong>隐设假设</strong>”，从而限制了<strong>思考的角度和范围</strong>，只从极少的“可见选项”中做决定，而意识不到更多的“可能选项” 。</p>\n<blockquote>\n<p>可见选项：从个人经验和当前环境中自动产生，显而易见，无需主动探索。</p>\n<p>可能选项：未被发现的潜在可能性，来自于我们关联的未知世界，或者已知事物的深层信息，需要我们主动探索和发现。</p>\n</blockquote>\n<p>举个例子</p>\n<blockquote>\n<p>小明是刚毕业的大学生，在一家小公司里面做着无关紧要的工作，感觉学不到东西，想要去大城市展示自己的才华，做一些有技术含量的工作，不断磨练专业技能，但是现在专业能力太一般，进不了大公司，所以也就不敢换工作，非常沮丧，感觉自己好懦弱。</p>\n</blockquote>\n<p>这个例子里面的隐含假设有：</p>\n<blockquote>\n<ol>\n<li>工作内容是一成不变的，我会一直做着手上这些无关紧要的事情。</li>\n<li>只有大城市才有好工作。</li>\n<li>只有在工作中才能学到技能。</li>\n<li>无法改变就是懦弱。</li>\n</ol>\n</blockquote>\n<p>尽管你可能说，这些隐含假设都太绝对了，小明也许也不会认同这些观点，是的，如果我们把隐含假设明明白白地理清楚，并且写下来，就会发现，其实有着太多的不合理性，有很明显的漏洞。但是，如果没有把隐含假设理清楚，任凭它们在脑中杂乱无章地飘荡，就会导致<strong>你不知不觉就被影响了，虽然它们存在，但是你却意识不到，这太可怕了</strong>。因此，我们需要一个方法论在摆脱隐含假设的限制。</p>\n<blockquote>\n<ol>\n<li>罗列出所有隐含假设</li>\n<li>找出不合理的隐含假设，并进行校正</li>\n<li>思考出更多“可能选项”，并进行尝试</li>\n</ol>\n</blockquote>\n<p>所以，对于上面的例子，我们可以思考出更多的更合理的解决方案</p>\n<blockquote>\n<ol>\n<li>不喜欢当前的工作内容，可以询问上司是否有其他工作内容可以尝试，如有必要，可以寻求调换岗位、部门的机会。</li>\n<li>多方打听调研，发现本地的好公司。</li>\n<li>利用业余时间自学，但自学并不代表只是一个人学习，可以参加培训、加入学校社群、学习在线课程等等。</li>\n<li>引用《把时间当作朋友》中的一句话: “现状无法马上摆脱，接受现状才是最优策略 – 有什么做什么，有什么用什么；做什么都做好，用什么都用好”。</li>\n</ol>\n</blockquote>\n<h2 id=\"四种普遍的隐含假设\"><a href=\"#四种普遍的隐含假设\" class=\"headerlink\" title=\"四种普遍的隐含假设\"></a>四种普遍的隐含假设</h2><p>在摆脱假设条件限制的方法论中，最重要的一步就是准确地找出隐含假设，这里列举出四种普遍的隐含假设</p>\n<p><strong>1. 赛道假设</strong><br>这个假设最典型的一句话就是</p>\n<blockquote>\n<p>”不要让你的孩子输在起跑线上”</p>\n</blockquote>\n<p>认为人生是一场漫长的马拉松，比赛项目都是设定好的，所以很多家长就强制孩子学钢琴、学跳舞、学英语，希望孩子不落后于其它竞争选手。于是他们因为害怕失败而不去做其他尝试，老老实实地在一个被<strong>外界固化的轨道上</strong>不停地跑着。</p>\n<p><strong>2. 低关联假设</strong><br>认为人生的种种经历之前相互独立，不存在什么关联。其实不是这样的，在一个领域中总结的经验的方法论，可以在另外一个类似领域中发挥很大的作用。</p>\n<blockquote>\n<p>知识的正确用法 —— 一个领域里面的大师永远不会是另一个类似领域的菜鸟 （引用自《<a href=\"https://www.h5jun.com/post/to-be-a-good-frontend-engineer.html\" target=\"_blank\" rel=\"external\">写给想成为前端工程师的同学们</a>》）</p>\n</blockquote>\n<p><strong>3. 僵固性心智</strong><br>这是表现型人格比较常见的心态</p>\n<blockquote>\n<p>认为人的智力和能力是一成不变的</p>\n</blockquote>\n<p>认为自己资质平平，没什么天赋，于是在遇到一些挫折之后就唉声叹气，也不想继续努力了，抗击打能力几乎没有。</p>\n<p>相反，进取型人格的心态则是“成长性心智”，认为智力和能力是可以通过努力不断增长的，因此并不惧怕短期的失败，反而越挫越勇。</p>\n<blockquote>\n<p> 进取型性格的人，不太在意外界的看法，因为他们历来的经验就是自己在进步的过程中时时刻刻处于明天回头看就知道自己当时傻到不行的状态……他们会去尝试，他们会去学，他们知道自己可能失败、可能做不好，但那只是过程，进步是行动的注定结果。（引用自《<a href=\"http://xiaolai.baijia.baidu.com/article/147205\" target=\"_blank\" rel=\"external\">写给女生的五个择偶建议</a>》）</p>\n</blockquote>\n<p><strong>4. 零和博弈</strong><br>认同这个假设的人，会有两点倾向。</p>\n<p>第一是害怕未知，害怕不确定的东西，不肯忍受一定的未知，用很极端或者过分简单化的方式思考问题，非黑即白，但其实很多事情都不是那么绝对的，别轻易地困住自己的思维。</p>\n<p>第二个是这些人看事情的角度倾向于聚焦在局部，而整体，与他人的竞争中，更倾向于从别人那里争夺利益，而很少去构想双赢的方案。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>经常使用上面提到的方法论，摆脱隐含假设限制的，发现人生中更多的可能性。以前遇到理不清的问题时，就想着偷懒，转移注意力，然后忘掉它。现在尝试着用这个方法，把隐含假设列出来。分析一遍，竟然顺利地理清楚了，而且还发现了更多可以继续深入思考的点，整个过程变得挺好玩的。</p>\n","excerpt":"","more":"<p>当我们的处于困局的时候，困住我们的有两方面元素：</p>\n<blockquote>\n<ol>\n<li>外界的客观因素</li>\n<li>我们过去的经历、习惯和思维惯性</li>\n</ol>\n</blockquote>\n<p>以上两方面因素会导致在我们思考的时候自动植入“<strong>隐设假设</strong>”，从而限制了<strong>思考的角度和范围</strong>，只从极少的“可见选项”中做决定，而意识不到更多的“可能选项” 。</p>\n<blockquote>\n<p>可见选项：从个人经验和当前环境中自动产生，显而易见，无需主动探索。</p>\n<p>可能选项：未被发现的潜在可能性，来自于我们关联的未知世界，或者已知事物的深层信息，需要我们主动探索和发现。</p>\n</blockquote>\n<p>举个例子</p>\n<blockquote>\n<p>小明是刚毕业的大学生，在一家小公司里面做着无关紧要的工作，感觉学不到东西，想要去大城市展示自己的才华，做一些有技术含量的工作，不断磨练专业技能，但是现在专业能力太一般，进不了大公司，所以也就不敢换工作，非常沮丧，感觉自己好懦弱。</p>\n</blockquote>\n<p>这个例子里面的隐含假设有：</p>\n<blockquote>\n<ol>\n<li>工作内容是一成不变的，我会一直做着手上这些无关紧要的事情。</li>\n<li>只有大城市才有好工作。</li>\n<li>只有在工作中才能学到技能。</li>\n<li>无法改变就是懦弱。</li>\n</ol>\n</blockquote>\n<p>尽管你可能说，这些隐含假设都太绝对了，小明也许也不会认同这些观点，是的，如果我们把隐含假设明明白白地理清楚，并且写下来，就会发现，其实有着太多的不合理性，有很明显的漏洞。但是，如果没有把隐含假设理清楚，任凭它们在脑中杂乱无章地飘荡，就会导致<strong>你不知不觉就被影响了，虽然它们存在，但是你却意识不到，这太可怕了</strong>。因此，我们需要一个方法论在摆脱隐含假设的限制。</p>\n<blockquote>\n<ol>\n<li>罗列出所有隐含假设</li>\n<li>找出不合理的隐含假设，并进行校正</li>\n<li>思考出更多“可能选项”，并进行尝试</li>\n</ol>\n</blockquote>\n<p>所以，对于上面的例子，我们可以思考出更多的更合理的解决方案</p>\n<blockquote>\n<ol>\n<li>不喜欢当前的工作内容，可以询问上司是否有其他工作内容可以尝试，如有必要，可以寻求调换岗位、部门的机会。</li>\n<li>多方打听调研，发现本地的好公司。</li>\n<li>利用业余时间自学，但自学并不代表只是一个人学习，可以参加培训、加入学校社群、学习在线课程等等。</li>\n<li>引用《把时间当作朋友》中的一句话: “现状无法马上摆脱，接受现状才是最优策略 – 有什么做什么，有什么用什么；做什么都做好，用什么都用好”。</li>\n</ol>\n</blockquote>\n<h2 id=\"四种普遍的隐含假设\"><a href=\"#四种普遍的隐含假设\" class=\"headerlink\" title=\"四种普遍的隐含假设\"></a>四种普遍的隐含假设</h2><p>在摆脱假设条件限制的方法论中，最重要的一步就是准确地找出隐含假设，这里列举出四种普遍的隐含假设</p>\n<p><strong>1. 赛道假设</strong><br>这个假设最典型的一句话就是</p>\n<blockquote>\n<p>”不要让你的孩子输在起跑线上”</p>\n</blockquote>\n<p>认为人生是一场漫长的马拉松，比赛项目都是设定好的，所以很多家长就强制孩子学钢琴、学跳舞、学英语，希望孩子不落后于其它竞争选手。于是他们因为害怕失败而不去做其他尝试，老老实实地在一个被<strong>外界固化的轨道上</strong>不停地跑着。</p>\n<p><strong>2. 低关联假设</strong><br>认为人生的种种经历之前相互独立，不存在什么关联。其实不是这样的，在一个领域中总结的经验的方法论，可以在另外一个类似领域中发挥很大的作用。</p>\n<blockquote>\n<p>知识的正确用法 —— 一个领域里面的大师永远不会是另一个类似领域的菜鸟 （引用自《<a href=\"https://www.h5jun.com/post/to-be-a-good-frontend-engineer.html\">写给想成为前端工程师的同学们</a>》）</p>\n</blockquote>\n<p><strong>3. 僵固性心智</strong><br>这是表现型人格比较常见的心态</p>\n<blockquote>\n<p>认为人的智力和能力是一成不变的</p>\n</blockquote>\n<p>认为自己资质平平，没什么天赋，于是在遇到一些挫折之后就唉声叹气，也不想继续努力了，抗击打能力几乎没有。</p>\n<p>相反，进取型人格的心态则是“成长性心智”，认为智力和能力是可以通过努力不断增长的，因此并不惧怕短期的失败，反而越挫越勇。</p>\n<blockquote>\n<p> 进取型性格的人，不太在意外界的看法，因为他们历来的经验就是自己在进步的过程中时时刻刻处于明天回头看就知道自己当时傻到不行的状态……他们会去尝试，他们会去学，他们知道自己可能失败、可能做不好，但那只是过程，进步是行动的注定结果。（引用自《<a href=\"http://xiaolai.baijia.baidu.com/article/147205\">写给女生的五个择偶建议</a>》）</p>\n</blockquote>\n<p><strong>4. 零和博弈</strong><br>认同这个假设的人，会有两点倾向。</p>\n<p>第一是害怕未知，害怕不确定的东西，不肯忍受一定的未知，用很极端或者过分简单化的方式思考问题，非黑即白，但其实很多事情都不是那么绝对的，别轻易地困住自己的思维。</p>\n<p>第二个是这些人看事情的角度倾向于聚焦在局部，而整体，与他人的竞争中，更倾向于从别人那里争夺利益，而很少去构想双赢的方案。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>经常使用上面提到的方法论，摆脱隐含假设限制的，发现人生中更多的可能性。以前遇到理不清的问题时，就想着偷懒，转移注意力，然后忘掉它。现在尝试着用这个方法，把隐含假设列出来。分析一遍，竟然顺利地理清楚了，而且还发现了更多可以继续深入思考的点，整个过程变得挺好玩的。</p>\n"},{"_content":"# 《哈佛幸福课》学习笔记（1）：什么是积极心理学？\n\n## 大脑的重现可以形成一种学习和记忆的机制\n\n> 让小白鼠穿过迷宫，一组是接连不断地进入迷宫，中间没有停息，另外一组是穿过迷宫一次之后，停下来，稍微休息一下，然后再继续。\n>\n> 最后对小白鼠的大脑进行扫描，发现中间有休息的小白鼠比没有休息学得要多\u0010。\n\n## 解读比信息更重要\n\n将大脑比喻成一个容器，就像这样子\n\n有两种学习方式，一种是简单的接收储存知识\n\n知识并不是越多越好，知识本身对于个人成长并不能提供足够的帮助，远远不够，它无法决定我们的幸福，人际，成功，动机，两性关系等等。\n\n另外一种是通过知识让大脑变形\n\n**大脑的转变**（transfromation）实际上指的是提升认知能力\n\n>  认知能力就是信息解读的能力\n\n人们对处理一件事情的的流程是\n\n> 接受信息 - 解读 - 行动\n\n不同的解读带来不同的结果，生活中有很多例子，比如说\n\n> 有些人身体健康，事业有成，但他们并不幸福，每天感到很焦虑，而另外一些人并不富有，普普通通，但他们时刻享受生活的每件小事，而不是把这些当作理所当然的事情。\n>\n> 再举一个例子，去参加运动会，本来是想得前3名，但却只得了第8名，有的人会认为自己的失败者，从而自暴自弃，而另外一些人则认为这是一个让自己成长的机会，可以从中反思、获得一些失败的经验。\n\n遗憾的是，学校里面都是用第一种方式教导学生，就是简单的用知识把学生的大脑容器装满，然后就让他们毕业，却很少教他们如何思考，如何解读生活中的事情。 那么，如何让自己转变呢？答案只有一个，**给自己提问题** \n\n> 教育的真正目的是让一个人可以经常发问。\n\n## 幸福是终生的追求\n\n幸福不是一个终点，幸福和不幸福来衡量自己的状态是没有意义的，重要的是和以前的自己相比，是不是变得**更**幸福了。\n\n类似的，成功和成长其实是完全不同的两种心态。成功其实是一个伪概念，它只是强调一种结果，而且是静态的，是很多人终其一生都没办法达到的一种状态，因为它根本就没有一个可以衡量的标准。真正有价值的概念是成长，它是动态的，只和以前的自己比较，可以使人活在当下，关注微小的进步。\n\n我们可以向自己提问\n\n> - 如何变得更幸福？\n\n## 必须要有行动\n\n网络上有一句话被反复传播过很多遍\n\n> 听过很多道理 却依然过不好这一生。\n\n根本的原因是什么？没有行动。\n\n知识吸收了，认知提高了，但这还远远不够，你必须有所作为，把你认为有用的方法论践行一遍，当你想要感谢曾经给你提供某个方法论的人时，不要说这个方法论有多棒，有多好，请说出你做出了什么改变，你收获了什么。这才是别人真正想要听到的感谢词。","source":"_drafts/2016-08-06-harvard-happiness-course-what-is-positive-psychology.md","raw":"# 《哈佛幸福课》学习笔记（1）：什么是积极心理学？\n\n## 大脑的重现可以形成一种学习和记忆的机制\n\n> 让小白鼠穿过迷宫，一组是接连不断地进入迷宫，中间没有停息，另外一组是穿过迷宫一次之后，停下来，稍微休息一下，然后再继续。\n>\n> 最后对小白鼠的大脑进行扫描，发现中间有休息的小白鼠比没有休息学得要多\u0010。\n\n## 解读比信息更重要\n\n将大脑比喻成一个容器，就像这样子\n\n有两种学习方式，一种是简单的接收储存知识\n\n知识并不是越多越好，知识本身对于个人成长并不能提供足够的帮助，远远不够，它无法决定我们的幸福，人际，成功，动机，两性关系等等。\n\n另外一种是通过知识让大脑变形\n\n**大脑的转变**（transfromation）实际上指的是提升认知能力\n\n>  认知能力就是信息解读的能力\n\n人们对处理一件事情的的流程是\n\n> 接受信息 - 解读 - 行动\n\n不同的解读带来不同的结果，生活中有很多例子，比如说\n\n> 有些人身体健康，事业有成，但他们并不幸福，每天感到很焦虑，而另外一些人并不富有，普普通通，但他们时刻享受生活的每件小事，而不是把这些当作理所当然的事情。\n>\n> 再举一个例子，去参加运动会，本来是想得前3名，但却只得了第8名，有的人会认为自己的失败者，从而自暴自弃，而另外一些人则认为这是一个让自己成长的机会，可以从中反思、获得一些失败的经验。\n\n遗憾的是，学校里面都是用第一种方式教导学生，就是简单的用知识把学生的大脑容器装满，然后就让他们毕业，却很少教他们如何思考，如何解读生活中的事情。 那么，如何让自己转变呢？答案只有一个，**给自己提问题** \n\n> 教育的真正目的是让一个人可以经常发问。\n\n## 幸福是终生的追求\n\n幸福不是一个终点，幸福和不幸福来衡量自己的状态是没有意义的，重要的是和以前的自己相比，是不是变得**更**幸福了。\n\n类似的，成功和成长其实是完全不同的两种心态。成功其实是一个伪概念，它只是强调一种结果，而且是静态的，是很多人终其一生都没办法达到的一种状态，因为它根本就没有一个可以衡量的标准。真正有价值的概念是成长，它是动态的，只和以前的自己比较，可以使人活在当下，关注微小的进步。\n\n我们可以向自己提问\n\n> - 如何变得更幸福？\n\n## 必须要有行动\n\n网络上有一句话被反复传播过很多遍\n\n> 听过很多道理 却依然过不好这一生。\n\n根本的原因是什么？没有行动。\n\n知识吸收了，认知提高了，但这还远远不够，你必须有所作为，把你认为有用的方法论践行一遍，当你想要感谢曾经给你提供某个方法论的人时，不要说这个方法论有多棒，有多好，请说出你做出了什么改变，你收获了什么。这才是别人真正想要听到的感谢词。","slug":"2016-08-06-harvard-happiness-course-what-is-positive-psychology","published":0,"date":"2016-08-06T00:48:10.000Z","updated":"2016-08-23T06:02:19.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr7y0006y3onkwqz8xxe","content":"<h1 id=\"《哈佛幸福课》学习笔记（1）：什么是积极心理学？\"><a href=\"#《哈佛幸福课》学习笔记（1）：什么是积极心理学？\" class=\"headerlink\" title=\"《哈佛幸福课》学习笔记（1）：什么是积极心理学？\"></a>《哈佛幸福课》学习笔记（1）：什么是积极心理学？</h1><h2 id=\"大脑的重现可以形成一种学习和记忆的机制\"><a href=\"#大脑的重现可以形成一种学习和记忆的机制\" class=\"headerlink\" title=\"大脑的重现可以形成一种学习和记忆的机制\"></a>大脑的重现可以形成一种学习和记忆的机制</h2><blockquote>\n<p>让小白鼠穿过迷宫，一组是接连不断地进入迷宫，中间没有停息，另外一组是穿过迷宫一次之后，停下来，稍微休息一下，然后再继续。</p>\n<p>最后对小白鼠的大脑进行扫描，发现中间有休息的小白鼠比没有休息学得要多\u0010。</p>\n</blockquote>\n<h2 id=\"解读比信息更重要\"><a href=\"#解读比信息更重要\" class=\"headerlink\" title=\"解读比信息更重要\"></a>解读比信息更重要</h2><p>将大脑比喻成一个容器，就像这样子</p>\n<p>有两种学习方式，一种是简单的接收储存知识</p>\n<p>知识并不是越多越好，知识本身对于个人成长并不能提供足够的帮助，远远不够，它无法决定我们的幸福，人际，成功，动机，两性关系等等。</p>\n<p>另外一种是通过知识让大脑变形</p>\n<p><strong>大脑的转变</strong>（transfromation）实际上指的是提升认知能力</p>\n<blockquote>\n<p> 认知能力就是信息解读的能力</p>\n</blockquote>\n<p>人们对处理一件事情的的流程是</p>\n<blockquote>\n<p>接受信息 - 解读 - 行动</p>\n</blockquote>\n<p>不同的解读带来不同的结果，生活中有很多例子，比如说</p>\n<blockquote>\n<p>有些人身体健康，事业有成，但他们并不幸福，每天感到很焦虑，而另外一些人并不富有，普普通通，但他们时刻享受生活的每件小事，而不是把这些当作理所当然的事情。</p>\n<p>再举一个例子，去参加运动会，本来是想得前3名，但却只得了第8名，有的人会认为自己的失败者，从而自暴自弃，而另外一些人则认为这是一个让自己成长的机会，可以从中反思、获得一些失败的经验。</p>\n</blockquote>\n<p>遗憾的是，学校里面都是用第一种方式教导学生，就是简单的用知识把学生的大脑容器装满，然后就让他们毕业，却很少教他们如何思考，如何解读生活中的事情。 那么，如何让自己转变呢？答案只有一个，<strong>给自己提问题</strong> </p>\n<blockquote>\n<p>教育的真正目的是让一个人可以经常发问。</p>\n</blockquote>\n<h2 id=\"幸福是终生的追求\"><a href=\"#幸福是终生的追求\" class=\"headerlink\" title=\"幸福是终生的追求\"></a>幸福是终生的追求</h2><p>幸福不是一个终点，幸福和不幸福来衡量自己的状态是没有意义的，重要的是和以前的自己相比，是不是变得<strong>更</strong>幸福了。</p>\n<p>类似的，成功和成长其实是完全不同的两种心态。成功其实是一个伪概念，它只是强调一种结果，而且是静态的，是很多人终其一生都没办法达到的一种状态，因为它根本就没有一个可以衡量的标准。真正有价值的概念是成长，它是动态的，只和以前的自己比较，可以使人活在当下，关注微小的进步。</p>\n<p>我们可以向自己提问</p>\n<blockquote>\n<ul>\n<li>如何变得更幸福？</li>\n</ul>\n</blockquote>\n<h2 id=\"必须要有行动\"><a href=\"#必须要有行动\" class=\"headerlink\" title=\"必须要有行动\"></a>必须要有行动</h2><p>网络上有一句话被反复传播过很多遍</p>\n<blockquote>\n<p>听过很多道理 却依然过不好这一生。</p>\n</blockquote>\n<p>根本的原因是什么？没有行动。</p>\n<p>知识吸收了，认知提高了，但这还远远不够，你必须有所作为，把你认为有用的方法论践行一遍，当你想要感谢曾经给你提供某个方法论的人时，不要说这个方法论有多棒，有多好，请说出你做出了什么改变，你收获了什么。这才是别人真正想要听到的感谢词。</p>\n","excerpt":"","more":"<h1 id=\"《哈佛幸福课》学习笔记（1）：什么是积极心理学？\"><a href=\"#《哈佛幸福课》学习笔记（1）：什么是积极心理学？\" class=\"headerlink\" title=\"《哈佛幸福课》学习笔记（1）：什么是积极心理学？\"></a>《哈佛幸福课》学习笔记（1）：什么是积极心理学？</h1><h2 id=\"大脑的重现可以形成一种学习和记忆的机制\"><a href=\"#大脑的重现可以形成一种学习和记忆的机制\" class=\"headerlink\" title=\"大脑的重现可以形成一种学习和记忆的机制\"></a>大脑的重现可以形成一种学习和记忆的机制</h2><blockquote>\n<p>让小白鼠穿过迷宫，一组是接连不断地进入迷宫，中间没有停息，另外一组是穿过迷宫一次之后，停下来，稍微休息一下，然后再继续。</p>\n<p>最后对小白鼠的大脑进行扫描，发现中间有休息的小白鼠比没有休息学得要多\u0010。</p>\n</blockquote>\n<h2 id=\"解读比信息更重要\"><a href=\"#解读比信息更重要\" class=\"headerlink\" title=\"解读比信息更重要\"></a>解读比信息更重要</h2><p>将大脑比喻成一个容器，就像这样子</p>\n<p>有两种学习方式，一种是简单的接收储存知识</p>\n<p>知识并不是越多越好，知识本身对于个人成长并不能提供足够的帮助，远远不够，它无法决定我们的幸福，人际，成功，动机，两性关系等等。</p>\n<p>另外一种是通过知识让大脑变形</p>\n<p><strong>大脑的转变</strong>（transfromation）实际上指的是提升认知能力</p>\n<blockquote>\n<p> 认知能力就是信息解读的能力</p>\n</blockquote>\n<p>人们对处理一件事情的的流程是</p>\n<blockquote>\n<p>接受信息 - 解读 - 行动</p>\n</blockquote>\n<p>不同的解读带来不同的结果，生活中有很多例子，比如说</p>\n<blockquote>\n<p>有些人身体健康，事业有成，但他们并不幸福，每天感到很焦虑，而另外一些人并不富有，普普通通，但他们时刻享受生活的每件小事，而不是把这些当作理所当然的事情。</p>\n<p>再举一个例子，去参加运动会，本来是想得前3名，但却只得了第8名，有的人会认为自己的失败者，从而自暴自弃，而另外一些人则认为这是一个让自己成长的机会，可以从中反思、获得一些失败的经验。</p>\n</blockquote>\n<p>遗憾的是，学校里面都是用第一种方式教导学生，就是简单的用知识把学生的大脑容器装满，然后就让他们毕业，却很少教他们如何思考，如何解读生活中的事情。 那么，如何让自己转变呢？答案只有一个，<strong>给自己提问题</strong> </p>\n<blockquote>\n<p>教育的真正目的是让一个人可以经常发问。</p>\n</blockquote>\n<h2 id=\"幸福是终生的追求\"><a href=\"#幸福是终生的追求\" class=\"headerlink\" title=\"幸福是终生的追求\"></a>幸福是终生的追求</h2><p>幸福不是一个终点，幸福和不幸福来衡量自己的状态是没有意义的，重要的是和以前的自己相比，是不是变得<strong>更</strong>幸福了。</p>\n<p>类似的，成功和成长其实是完全不同的两种心态。成功其实是一个伪概念，它只是强调一种结果，而且是静态的，是很多人终其一生都没办法达到的一种状态，因为它根本就没有一个可以衡量的标准。真正有价值的概念是成长，它是动态的，只和以前的自己比较，可以使人活在当下，关注微小的进步。</p>\n<p>我们可以向自己提问</p>\n<blockquote>\n<ul>\n<li>如何变得更幸福？</li>\n</ul>\n</blockquote>\n<h2 id=\"必须要有行动\"><a href=\"#必须要有行动\" class=\"headerlink\" title=\"必须要有行动\"></a>必须要有行动</h2><p>网络上有一句话被反复传播过很多遍</p>\n<blockquote>\n<p>听过很多道理 却依然过不好这一生。</p>\n</blockquote>\n<p>根本的原因是什么？没有行动。</p>\n<p>知识吸收了，认知提高了，但这还远远不够，你必须有所作为，把你认为有用的方法论践行一遍，当你想要感谢曾经给你提供某个方法论的人时，不要说这个方法论有多棒，有多好，请说出你做出了什么改变，你收获了什么。这才是别人真正想要听到的感谢词。</p>\n"},{"_content":"# 《哈佛幸福课》学习笔记（2）：为什么要学习积极心理学？\n\n## 问题缔造现实\n\n我都会经常向自己提出一些问题，比如说\n\n> - 我的弱点是什么？\n> - 我需要改善什么？\n\n没错，这类问题非常重要，是成长过程中不可或缺的问题。但是，问题在于如果它们是唯一的问题，我们只是关注在自己不足这一方面，就会导致一个非常糟糕的结果，那就是对自己的有点**视而不见**。\n\n> 我们只看到我们所追求的东西，但对于很多不关注的事情视而不见，即使它们确确实实存在着。\n\n慢慢地就会变成一个消极主义者，没错，我们可能会问，为什么我那么努力，不断地升级自己的操作系统，到最后可能却变成了一个悲观而消极的人？这是因为我全部注意力都放在自身的不足上面，每天都围绕着想着我的操作系统有问题，我要升级，我必须升级。**我忽略了另外一部分现实，那就是其实你的操作系统里面，已经很多优秀的零件每天都在支撑着你，保证你的正常运行，而且让你变得越来越稳定，但我把这些当作一件理所当然的事\u0010**，只关注着要修哪个零件，要换掉哪个零件。\n\n比如说很多时候，我们会对越亲近的人越挑剔，这是因为我们提出的主要问题是\n\n> 他/他对我为什么不像以前那么好了？\n\n如果我们只关注这个问题，就相当于我们只关注他人的缺点，完全忽略他人的优点。\n\n> 问题缔造现实，你关注什么，你就会得到什么，对于你不关注的，对你而言它们并不存在。\n\n如果一个人主要关注缺点，而不去欣赏他的长处，试问一下，他会有很高的自信吗？他会有活得快乐吗？所以，平时我们也应该关注积极的问题，比如说\n\n> - 我的长处是什么？\n> - 今天是不是努力了，有那些做得不错的事情？\n> - 今天和以前相比，是不是进步了？\n\n## 疾病模型和健康模型\n\n疾病模型的特点\n\n- 关注缺点。\n- 只想摆脱缺点。\n- 逃避痛苦\n- 想要逃离不幸福\n- 缺乏创造力\n\n健康模型的特点\n\n- 关注优点\n- 锻炼能力\n- 寻找快乐\n- 追求幸福\n- 富有创造力\n\n就拿生病来说，疾病模型的思维模式是这样的\n\n> 我不舒服，那就去治病，只要把病治好了，我就舒服了。\n\n而健康模型的则是这样想的\n\n> 我不舒服，那我要注重健康，增强免疫力。\n\n也就是说，健康模型倡导的是**增长自身能力，改善人际关系，追求有价值的人生**。\n\n那么，健康模型到底有什么好处呢？\n\n第一个是\n\n> 健康模型可以带来一个强大的**心理免疫系统**\n\n其实每个人都有一个心理免疫系统，当它被破坏时，我们就会生病，比如情绪低落或者失控，所以平时要注意增强免疫系统，那么，假如我们拥有一个强大的心理免疫系统，是不是就意味着我们不会生病呢？不是的，强大的心理免疫系统是**当我们生病时，可以越快地恢复过来**。\n\n还有一个好处是\n\n> 健康模型可以使“**心理引擎**”更强更大\n\n当一辆车要爬上坡时，如果引擎比较小，供力不足，那它可能上不去，而且引擎可能会报废，如果有一个强大的引擎，那它可以很顺利地爬上去。","source":"_drafts/2016-08-06-harvard-happiness-course-why-do-we-learn-positive-psychology.md","raw":"# 《哈佛幸福课》学习笔记（2）：为什么要学习积极心理学？\n\n## 问题缔造现实\n\n我都会经常向自己提出一些问题，比如说\n\n> - 我的弱点是什么？\n> - 我需要改善什么？\n\n没错，这类问题非常重要，是成长过程中不可或缺的问题。但是，问题在于如果它们是唯一的问题，我们只是关注在自己不足这一方面，就会导致一个非常糟糕的结果，那就是对自己的有点**视而不见**。\n\n> 我们只看到我们所追求的东西，但对于很多不关注的事情视而不见，即使它们确确实实存在着。\n\n慢慢地就会变成一个消极主义者，没错，我们可能会问，为什么我那么努力，不断地升级自己的操作系统，到最后可能却变成了一个悲观而消极的人？这是因为我全部注意力都放在自身的不足上面，每天都围绕着想着我的操作系统有问题，我要升级，我必须升级。**我忽略了另外一部分现实，那就是其实你的操作系统里面，已经很多优秀的零件每天都在支撑着你，保证你的正常运行，而且让你变得越来越稳定，但我把这些当作一件理所当然的事\u0010**，只关注着要修哪个零件，要换掉哪个零件。\n\n比如说很多时候，我们会对越亲近的人越挑剔，这是因为我们提出的主要问题是\n\n> 他/他对我为什么不像以前那么好了？\n\n如果我们只关注这个问题，就相当于我们只关注他人的缺点，完全忽略他人的优点。\n\n> 问题缔造现实，你关注什么，你就会得到什么，对于你不关注的，对你而言它们并不存在。\n\n如果一个人主要关注缺点，而不去欣赏他的长处，试问一下，他会有很高的自信吗？他会有活得快乐吗？所以，平时我们也应该关注积极的问题，比如说\n\n> - 我的长处是什么？\n> - 今天是不是努力了，有那些做得不错的事情？\n> - 今天和以前相比，是不是进步了？\n\n## 疾病模型和健康模型\n\n疾病模型的特点\n\n- 关注缺点。\n- 只想摆脱缺点。\n- 逃避痛苦\n- 想要逃离不幸福\n- 缺乏创造力\n\n健康模型的特点\n\n- 关注优点\n- 锻炼能力\n- 寻找快乐\n- 追求幸福\n- 富有创造力\n\n就拿生病来说，疾病模型的思维模式是这样的\n\n> 我不舒服，那就去治病，只要把病治好了，我就舒服了。\n\n而健康模型的则是这样想的\n\n> 我不舒服，那我要注重健康，增强免疫力。\n\n也就是说，健康模型倡导的是**增长自身能力，改善人际关系，追求有价值的人生**。\n\n那么，健康模型到底有什么好处呢？\n\n第一个是\n\n> 健康模型可以带来一个强大的**心理免疫系统**\n\n其实每个人都有一个心理免疫系统，当它被破坏时，我们就会生病，比如情绪低落或者失控，所以平时要注意增强免疫系统，那么，假如我们拥有一个强大的心理免疫系统，是不是就意味着我们不会生病呢？不是的，强大的心理免疫系统是**当我们生病时，可以越快地恢复过来**。\n\n还有一个好处是\n\n> 健康模型可以使“**心理引擎**”更强更大\n\n当一辆车要爬上坡时，如果引擎比较小，供力不足，那它可能上不去，而且引擎可能会报废，如果有一个强大的引擎，那它可以很顺利地爬上去。","slug":"2016-08-06-harvard-happiness-course-why-do-we-learn-positive-psychology","published":0,"date":"2016-08-06T04:39:08.000Z","updated":"2016-08-09T13:13:47.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr810007y3onrtblag39","content":"<h1 id=\"《哈佛幸福课》学习笔记（2）：为什么要学习积极心理学？\"><a href=\"#《哈佛幸福课》学习笔记（2）：为什么要学习积极心理学？\" class=\"headerlink\" title=\"《哈佛幸福课》学习笔记（2）：为什么要学习积极心理学？\"></a>《哈佛幸福课》学习笔记（2）：为什么要学习积极心理学？</h1><h2 id=\"问题缔造现实\"><a href=\"#问题缔造现实\" class=\"headerlink\" title=\"问题缔造现实\"></a>问题缔造现实</h2><p>我都会经常向自己提出一些问题，比如说</p>\n<blockquote>\n<ul>\n<li>我的弱点是什么？</li>\n<li>我需要改善什么？</li>\n</ul>\n</blockquote>\n<p>没错，这类问题非常重要，是成长过程中不可或缺的问题。但是，问题在于如果它们是唯一的问题，我们只是关注在自己不足这一方面，就会导致一个非常糟糕的结果，那就是对自己的有点<strong>视而不见</strong>。</p>\n<blockquote>\n<p>我们只看到我们所追求的东西，但对于很多不关注的事情视而不见，即使它们确确实实存在着。</p>\n</blockquote>\n<p>慢慢地就会变成一个消极主义者，没错，我们可能会问，为什么我那么努力，不断地升级自己的操作系统，到最后可能却变成了一个悲观而消极的人？这是因为我全部注意力都放在自身的不足上面，每天都围绕着想着我的操作系统有问题，我要升级，我必须升级。<strong>我忽略了另外一部分现实，那就是其实你的操作系统里面，已经很多优秀的零件每天都在支撑着你，保证你的正常运行，而且让你变得越来越稳定，但我把这些当作一件理所当然的事\u0010</strong>，只关注着要修哪个零件，要换掉哪个零件。</p>\n<p>比如说很多时候，我们会对越亲近的人越挑剔，这是因为我们提出的主要问题是</p>\n<blockquote>\n<p>他/他对我为什么不像以前那么好了？</p>\n</blockquote>\n<p>如果我们只关注这个问题，就相当于我们只关注他人的缺点，完全忽略他人的优点。</p>\n<blockquote>\n<p>问题缔造现实，你关注什么，你就会得到什么，对于你不关注的，对你而言它们并不存在。</p>\n</blockquote>\n<p>如果一个人主要关注缺点，而不去欣赏他的长处，试问一下，他会有很高的自信吗？他会有活得快乐吗？所以，平时我们也应该关注积极的问题，比如说</p>\n<blockquote>\n<ul>\n<li>我的长处是什么？</li>\n<li>今天是不是努力了，有那些做得不错的事情？</li>\n<li>今天和以前相比，是不是进步了？</li>\n</ul>\n</blockquote>\n<h2 id=\"疾病模型和健康模型\"><a href=\"#疾病模型和健康模型\" class=\"headerlink\" title=\"疾病模型和健康模型\"></a>疾病模型和健康模型</h2><p>疾病模型的特点</p>\n<ul>\n<li>关注缺点。</li>\n<li>只想摆脱缺点。</li>\n<li>逃避痛苦</li>\n<li>想要逃离不幸福</li>\n<li>缺乏创造力</li>\n</ul>\n<p>健康模型的特点</p>\n<ul>\n<li>关注优点</li>\n<li>锻炼能力</li>\n<li>寻找快乐</li>\n<li>追求幸福</li>\n<li>富有创造力</li>\n</ul>\n<p>就拿生病来说，疾病模型的思维模式是这样的</p>\n<blockquote>\n<p>我不舒服，那就去治病，只要把病治好了，我就舒服了。</p>\n</blockquote>\n<p>而健康模型的则是这样想的</p>\n<blockquote>\n<p>我不舒服，那我要注重健康，增强免疫力。</p>\n</blockquote>\n<p>也就是说，健康模型倡导的是<strong>增长自身能力，改善人际关系，追求有价值的人生</strong>。</p>\n<p>那么，健康模型到底有什么好处呢？</p>\n<p>第一个是</p>\n<blockquote>\n<p>健康模型可以带来一个强大的<strong>心理免疫系统</strong></p>\n</blockquote>\n<p>其实每个人都有一个心理免疫系统，当它被破坏时，我们就会生病，比如情绪低落或者失控，所以平时要注意增强免疫系统，那么，假如我们拥有一个强大的心理免疫系统，是不是就意味着我们不会生病呢？不是的，强大的心理免疫系统是<strong>当我们生病时，可以越快地恢复过来</strong>。</p>\n<p>还有一个好处是</p>\n<blockquote>\n<p>健康模型可以使“<strong>心理引擎</strong>”更强更大</p>\n</blockquote>\n<p>当一辆车要爬上坡时，如果引擎比较小，供力不足，那它可能上不去，而且引擎可能会报废，如果有一个强大的引擎，那它可以很顺利地爬上去。</p>\n","excerpt":"","more":"<h1 id=\"《哈佛幸福课》学习笔记（2）：为什么要学习积极心理学？\"><a href=\"#《哈佛幸福课》学习笔记（2）：为什么要学习积极心理学？\" class=\"headerlink\" title=\"《哈佛幸福课》学习笔记（2）：为什么要学习积极心理学？\"></a>《哈佛幸福课》学习笔记（2）：为什么要学习积极心理学？</h1><h2 id=\"问题缔造现实\"><a href=\"#问题缔造现实\" class=\"headerlink\" title=\"问题缔造现实\"></a>问题缔造现实</h2><p>我都会经常向自己提出一些问题，比如说</p>\n<blockquote>\n<ul>\n<li>我的弱点是什么？</li>\n<li>我需要改善什么？</li>\n</ul>\n</blockquote>\n<p>没错，这类问题非常重要，是成长过程中不可或缺的问题。但是，问题在于如果它们是唯一的问题，我们只是关注在自己不足这一方面，就会导致一个非常糟糕的结果，那就是对自己的有点<strong>视而不见</strong>。</p>\n<blockquote>\n<p>我们只看到我们所追求的东西，但对于很多不关注的事情视而不见，即使它们确确实实存在着。</p>\n</blockquote>\n<p>慢慢地就会变成一个消极主义者，没错，我们可能会问，为什么我那么努力，不断地升级自己的操作系统，到最后可能却变成了一个悲观而消极的人？这是因为我全部注意力都放在自身的不足上面，每天都围绕着想着我的操作系统有问题，我要升级，我必须升级。<strong>我忽略了另外一部分现实，那就是其实你的操作系统里面，已经很多优秀的零件每天都在支撑着你，保证你的正常运行，而且让你变得越来越稳定，但我把这些当作一件理所当然的事\u0010</strong>，只关注着要修哪个零件，要换掉哪个零件。</p>\n<p>比如说很多时候，我们会对越亲近的人越挑剔，这是因为我们提出的主要问题是</p>\n<blockquote>\n<p>他/他对我为什么不像以前那么好了？</p>\n</blockquote>\n<p>如果我们只关注这个问题，就相当于我们只关注他人的缺点，完全忽略他人的优点。</p>\n<blockquote>\n<p>问题缔造现实，你关注什么，你就会得到什么，对于你不关注的，对你而言它们并不存在。</p>\n</blockquote>\n<p>如果一个人主要关注缺点，而不去欣赏他的长处，试问一下，他会有很高的自信吗？他会有活得快乐吗？所以，平时我们也应该关注积极的问题，比如说</p>\n<blockquote>\n<ul>\n<li>我的长处是什么？</li>\n<li>今天是不是努力了，有那些做得不错的事情？</li>\n<li>今天和以前相比，是不是进步了？</li>\n</ul>\n</blockquote>\n<h2 id=\"疾病模型和健康模型\"><a href=\"#疾病模型和健康模型\" class=\"headerlink\" title=\"疾病模型和健康模型\"></a>疾病模型和健康模型</h2><p>疾病模型的特点</p>\n<ul>\n<li>关注缺点。</li>\n<li>只想摆脱缺点。</li>\n<li>逃避痛苦</li>\n<li>想要逃离不幸福</li>\n<li>缺乏创造力</li>\n</ul>\n<p>健康模型的特点</p>\n<ul>\n<li>关注优点</li>\n<li>锻炼能力</li>\n<li>寻找快乐</li>\n<li>追求幸福</li>\n<li>富有创造力</li>\n</ul>\n<p>就拿生病来说，疾病模型的思维模式是这样的</p>\n<blockquote>\n<p>我不舒服，那就去治病，只要把病治好了，我就舒服了。</p>\n</blockquote>\n<p>而健康模型的则是这样想的</p>\n<blockquote>\n<p>我不舒服，那我要注重健康，增强免疫力。</p>\n</blockquote>\n<p>也就是说，健康模型倡导的是<strong>增长自身能力，改善人际关系，追求有价值的人生</strong>。</p>\n<p>那么，健康模型到底有什么好处呢？</p>\n<p>第一个是</p>\n<blockquote>\n<p>健康模型可以带来一个强大的<strong>心理免疫系统</strong></p>\n</blockquote>\n<p>其实每个人都有一个心理免疫系统，当它被破坏时，我们就会生病，比如情绪低落或者失控，所以平时要注意增强免疫系统，那么，假如我们拥有一个强大的心理免疫系统，是不是就意味着我们不会生病呢？不是的，强大的心理免疫系统是<strong>当我们生病时，可以越快地恢复过来</strong>。</p>\n<p>还有一个好处是</p>\n<blockquote>\n<p>健康模型可以使“<strong>心理引擎</strong>”更强更大</p>\n</blockquote>\n<p>当一辆车要爬上坡时，如果引擎比较小，供力不足，那它可能上不去，而且引擎可能会报废，如果有一个强大的引擎，那它可以很顺利地爬上去。</p>\n"},{"_content":"# 第二次写作课\n\n## 一切源于定义\n\n**锻炼思考能力，从打磨自己所使用的概念开始**\n\n概念\n\n- 内涵\n- 外延\n\n## 什么是分享？\n\n版权\n\n清楚思考\n\n1. 我有一个好东西，是属于我的好东西，right。\n2. 你有...，\n3. 你有一个好东西，被我拿了过来，分给大家，慨他人只开（我你调换，不得罪人）\n\n\n\n1. 你自己没有好东西\n2. 你潜意识知道会被夸奖\n\n没有恶意，只不过是因为概念不清楚\n\n想的越来越清楚，不糊涂，这样成为好人的概率更高，我的生活也会变得更好。\n\n交钱上课\n\n1. 不做完整版笔记，提炼要点。\n2. 拿出去不叫分享。\n3. 我的东西可以发出去。\n4. 若是收费的，感激作者的就行，不要kan他人只开。\n\n## 其实我比别人多活了1/2\n\n115法定节假日，不休息，1.46，“多活了”将近10年，有效工作时间很难超过6小时，弹吉他，看电影。\n\n## 重新定义我们所使用的语言元素（重新学中文）\n\n名词，动词，形容词，副词\n\n练习：\n\n1. 拿出自己写过的文章。实物名称，抽象名词，不同颜色。（抽象名词会很少。）\n2. 别人的文章，名词前后的形容词圈出来。（感受他对周遭世界的感知，打开另外一个眼睛）\n\n\n\n递进，相对\n\n\n\n这是个极为简单却又常常被忽视的原因\n\n感知，感知，抽象名词\n\n\n\n写信\n\n> 突然间，我好想走进了另外一个世界。\n\n## 重新定义写作的目标\n\n**写作的目标是沟通**，写作不是表达\n\n1. 你所表达的东西处理好了吗\n2. 表达准确了吗？\n3. 对方能理解吗？\n4. 对方能接受吗？\n5. 对方接受了能当回事吗？\n6. 对方误解了，你怎么办？\n7. 有做好对方反驳你的心理准备吗？\n\n\n需要做大量的功课，**80%是看不见的功课 + 20%的最终表达**，很难获得的技能，因为绝大多数人根本没有机会。\n\n给新人最重要的机会。总是有一定比例的人会进步的。\n\n没有反馈是最大的障碍。这世界的条件就是稀缺的。\n\n> **绝对不删任何留言**，我需要了解真实的世界。\n\n最重要原则：想尽一切办法获得所有真实的反馈\n\n## 重新定义有效沟通\n\n写作 -沟通 - 有效沟通的本质（你能让对方明白他之前不知道的东西）\n\n沟通 - 反馈\n\n工具：3个原则，顺序（文章的结构）\n\n顺序，倒叙，插叙，\n\nwhy\n\n事情常常不是常常我的理解的发生的。\n\n其实是为了照顾读者的阅读习惯，理解读者，而不是自说自话\n\n### 建议\n\n- 多读心理学\n- 多读经济学方面的通俗读物，“他们认为这是划算的”，但其实不是\n- 公众人物化解危机\n- 真实反馈背后的心理，背后的价值观\n\n## 修辞\n\n让对方感受到原本感受不到的东西\n\n> 类比和排比\n\n排比：重复令人圣刻影响\n\n功夫在杭外\n\n失败和多余\n\n\n\n练习：坚持，分析其他人的文章（感知），不停地审视自己的定义（养成习惯，改变行为）\n\n\n\n## 选题\n\n你熟悉而且别人可能不知道的\n\n\n\n## 开发的环境\n\n简书，知乎，微博","source":"_drafts/2016-08-30-writing-lesson-2.md","raw":"# 第二次写作课\n\n## 一切源于定义\n\n**锻炼思考能力，从打磨自己所使用的概念开始**\n\n概念\n\n- 内涵\n- 外延\n\n## 什么是分享？\n\n版权\n\n清楚思考\n\n1. 我有一个好东西，是属于我的好东西，right。\n2. 你有...，\n3. 你有一个好东西，被我拿了过来，分给大家，慨他人只开（我你调换，不得罪人）\n\n\n\n1. 你自己没有好东西\n2. 你潜意识知道会被夸奖\n\n没有恶意，只不过是因为概念不清楚\n\n想的越来越清楚，不糊涂，这样成为好人的概率更高，我的生活也会变得更好。\n\n交钱上课\n\n1. 不做完整版笔记，提炼要点。\n2. 拿出去不叫分享。\n3. 我的东西可以发出去。\n4. 若是收费的，感激作者的就行，不要kan他人只开。\n\n## 其实我比别人多活了1/2\n\n115法定节假日，不休息，1.46，“多活了”将近10年，有效工作时间很难超过6小时，弹吉他，看电影。\n\n## 重新定义我们所使用的语言元素（重新学中文）\n\n名词，动词，形容词，副词\n\n练习：\n\n1. 拿出自己写过的文章。实物名称，抽象名词，不同颜色。（抽象名词会很少。）\n2. 别人的文章，名词前后的形容词圈出来。（感受他对周遭世界的感知，打开另外一个眼睛）\n\n\n\n递进，相对\n\n\n\n这是个极为简单却又常常被忽视的原因\n\n感知，感知，抽象名词\n\n\n\n写信\n\n> 突然间，我好想走进了另外一个世界。\n\n## 重新定义写作的目标\n\n**写作的目标是沟通**，写作不是表达\n\n1. 你所表达的东西处理好了吗\n2. 表达准确了吗？\n3. 对方能理解吗？\n4. 对方能接受吗？\n5. 对方接受了能当回事吗？\n6. 对方误解了，你怎么办？\n7. 有做好对方反驳你的心理准备吗？\n\n\n需要做大量的功课，**80%是看不见的功课 + 20%的最终表达**，很难获得的技能，因为绝大多数人根本没有机会。\n\n给新人最重要的机会。总是有一定比例的人会进步的。\n\n没有反馈是最大的障碍。这世界的条件就是稀缺的。\n\n> **绝对不删任何留言**，我需要了解真实的世界。\n\n最重要原则：想尽一切办法获得所有真实的反馈\n\n## 重新定义有效沟通\n\n写作 -沟通 - 有效沟通的本质（你能让对方明白他之前不知道的东西）\n\n沟通 - 反馈\n\n工具：3个原则，顺序（文章的结构）\n\n顺序，倒叙，插叙，\n\nwhy\n\n事情常常不是常常我的理解的发生的。\n\n其实是为了照顾读者的阅读习惯，理解读者，而不是自说自话\n\n### 建议\n\n- 多读心理学\n- 多读经济学方面的通俗读物，“他们认为这是划算的”，但其实不是\n- 公众人物化解危机\n- 真实反馈背后的心理，背后的价值观\n\n## 修辞\n\n让对方感受到原本感受不到的东西\n\n> 类比和排比\n\n排比：重复令人圣刻影响\n\n功夫在杭外\n\n失败和多余\n\n\n\n练习：坚持，分析其他人的文章（感知），不停地审视自己的定义（养成习惯，改变行为）\n\n\n\n## 选题\n\n你熟悉而且别人可能不知道的\n\n\n\n## 开发的环境\n\n简书，知乎，微博","slug":"2016-08-30-writing-lesson-2","published":0,"date":"2016-08-30T13:37:51.000Z","updated":"2017-01-03T14:25:32.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr860009y3onvu3dfopl","content":"<h1 id=\"第二次写作课\"><a href=\"#第二次写作课\" class=\"headerlink\" title=\"第二次写作课\"></a>第二次写作课</h1><h2 id=\"一切源于定义\"><a href=\"#一切源于定义\" class=\"headerlink\" title=\"一切源于定义\"></a>一切源于定义</h2><p><strong>锻炼思考能力，从打磨自己所使用的概念开始</strong></p>\n<p>概念</p>\n<ul>\n<li>内涵</li>\n<li>外延</li>\n</ul>\n<h2 id=\"什么是分享？\"><a href=\"#什么是分享？\" class=\"headerlink\" title=\"什么是分享？\"></a>什么是分享？</h2><p>版权</p>\n<p>清楚思考</p>\n<ol>\n<li>我有一个好东西，是属于我的好东西，right。</li>\n<li>你有…，</li>\n<li>你有一个好东西，被我拿了过来，分给大家，慨他人只开（我你调换，不得罪人）</li>\n</ol>\n<ol>\n<li>你自己没有好东西</li>\n<li>你潜意识知道会被夸奖</li>\n</ol>\n<p>没有恶意，只不过是因为概念不清楚</p>\n<p>想的越来越清楚，不糊涂，这样成为好人的概率更高，我的生活也会变得更好。</p>\n<p>交钱上课</p>\n<ol>\n<li>不做完整版笔记，提炼要点。</li>\n<li>拿出去不叫分享。</li>\n<li>我的东西可以发出去。</li>\n<li>若是收费的，感激作者的就行，不要kan他人只开。</li>\n</ol>\n<h2 id=\"其实我比别人多活了1-2\"><a href=\"#其实我比别人多活了1-2\" class=\"headerlink\" title=\"其实我比别人多活了1/2\"></a>其实我比别人多活了1/2</h2><p>115法定节假日，不休息，1.46，“多活了”将近10年，有效工作时间很难超过6小时，弹吉他，看电影。</p>\n<h2 id=\"重新定义我们所使用的语言元素（重新学中文）\"><a href=\"#重新定义我们所使用的语言元素（重新学中文）\" class=\"headerlink\" title=\"重新定义我们所使用的语言元素（重新学中文）\"></a>重新定义我们所使用的语言元素（重新学中文）</h2><p>名词，动词，形容词，副词</p>\n<p>练习：</p>\n<ol>\n<li>拿出自己写过的文章。实物名称，抽象名词，不同颜色。（抽象名词会很少。）</li>\n<li>别人的文章，名词前后的形容词圈出来。（感受他对周遭世界的感知，打开另外一个眼睛）</li>\n</ol>\n<p>递进，相对</p>\n<p>这是个极为简单却又常常被忽视的原因</p>\n<p>感知，感知，抽象名词</p>\n<p>写信</p>\n<blockquote>\n<p>突然间，我好想走进了另外一个世界。</p>\n</blockquote>\n<h2 id=\"重新定义写作的目标\"><a href=\"#重新定义写作的目标\" class=\"headerlink\" title=\"重新定义写作的目标\"></a>重新定义写作的目标</h2><p><strong>写作的目标是沟通</strong>，写作不是表达</p>\n<ol>\n<li>你所表达的东西处理好了吗</li>\n<li>表达准确了吗？</li>\n<li>对方能理解吗？</li>\n<li>对方能接受吗？</li>\n<li>对方接受了能当回事吗？</li>\n<li>对方误解了，你怎么办？</li>\n<li>有做好对方反驳你的心理准备吗？</li>\n</ol>\n<p>需要做大量的功课，<strong>80%是看不见的功课 + 20%的最终表达</strong>，很难获得的技能，因为绝大多数人根本没有机会。</p>\n<p>给新人最重要的机会。总是有一定比例的人会进步的。</p>\n<p>没有反馈是最大的障碍。这世界的条件就是稀缺的。</p>\n<blockquote>\n<p><strong>绝对不删任何留言</strong>，我需要了解真实的世界。</p>\n</blockquote>\n<p>最重要原则：想尽一切办法获得所有真实的反馈</p>\n<h2 id=\"重新定义有效沟通\"><a href=\"#重新定义有效沟通\" class=\"headerlink\" title=\"重新定义有效沟通\"></a>重新定义有效沟通</h2><p>写作 -沟通 - 有效沟通的本质（你能让对方明白他之前不知道的东西）</p>\n<p>沟通 - 反馈</p>\n<p>工具：3个原则，顺序（文章的结构）</p>\n<p>顺序，倒叙，插叙，</p>\n<p>why</p>\n<p>事情常常不是常常我的理解的发生的。</p>\n<p>其实是为了照顾读者的阅读习惯，理解读者，而不是自说自话</p>\n<h3 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h3><ul>\n<li>多读心理学</li>\n<li>多读经济学方面的通俗读物，“他们认为这是划算的”，但其实不是</li>\n<li>公众人物化解危机</li>\n<li>真实反馈背后的心理，背后的价值观</li>\n</ul>\n<h2 id=\"修辞\"><a href=\"#修辞\" class=\"headerlink\" title=\"修辞\"></a>修辞</h2><p>让对方感受到原本感受不到的东西</p>\n<blockquote>\n<p>类比和排比</p>\n</blockquote>\n<p>排比：重复令人圣刻影响</p>\n<p>功夫在杭外</p>\n<p>失败和多余</p>\n<p>练习：坚持，分析其他人的文章（感知），不停地审视自己的定义（养成习惯，改变行为）</p>\n<h2 id=\"选题\"><a href=\"#选题\" class=\"headerlink\" title=\"选题\"></a>选题</h2><p>你熟悉而且别人可能不知道的</p>\n<h2 id=\"开发的环境\"><a href=\"#开发的环境\" class=\"headerlink\" title=\"开发的环境\"></a>开发的环境</h2><p>简书，知乎，微博</p>\n","excerpt":"","more":"<h1 id=\"第二次写作课\"><a href=\"#第二次写作课\" class=\"headerlink\" title=\"第二次写作课\"></a>第二次写作课</h1><h2 id=\"一切源于定义\"><a href=\"#一切源于定义\" class=\"headerlink\" title=\"一切源于定义\"></a>一切源于定义</h2><p><strong>锻炼思考能力，从打磨自己所使用的概念开始</strong></p>\n<p>概念</p>\n<ul>\n<li>内涵</li>\n<li>外延</li>\n</ul>\n<h2 id=\"什么是分享？\"><a href=\"#什么是分享？\" class=\"headerlink\" title=\"什么是分享？\"></a>什么是分享？</h2><p>版权</p>\n<p>清楚思考</p>\n<ol>\n<li>我有一个好东西，是属于我的好东西，right。</li>\n<li>你有…，</li>\n<li>你有一个好东西，被我拿了过来，分给大家，慨他人只开（我你调换，不得罪人）</li>\n</ol>\n<ol>\n<li>你自己没有好东西</li>\n<li>你潜意识知道会被夸奖</li>\n</ol>\n<p>没有恶意，只不过是因为概念不清楚</p>\n<p>想的越来越清楚，不糊涂，这样成为好人的概率更高，我的生活也会变得更好。</p>\n<p>交钱上课</p>\n<ol>\n<li>不做完整版笔记，提炼要点。</li>\n<li>拿出去不叫分享。</li>\n<li>我的东西可以发出去。</li>\n<li>若是收费的，感激作者的就行，不要kan他人只开。</li>\n</ol>\n<h2 id=\"其实我比别人多活了1-2\"><a href=\"#其实我比别人多活了1-2\" class=\"headerlink\" title=\"其实我比别人多活了1/2\"></a>其实我比别人多活了1/2</h2><p>115法定节假日，不休息，1.46，“多活了”将近10年，有效工作时间很难超过6小时，弹吉他，看电影。</p>\n<h2 id=\"重新定义我们所使用的语言元素（重新学中文）\"><a href=\"#重新定义我们所使用的语言元素（重新学中文）\" class=\"headerlink\" title=\"重新定义我们所使用的语言元素（重新学中文）\"></a>重新定义我们所使用的语言元素（重新学中文）</h2><p>名词，动词，形容词，副词</p>\n<p>练习：</p>\n<ol>\n<li>拿出自己写过的文章。实物名称，抽象名词，不同颜色。（抽象名词会很少。）</li>\n<li>别人的文章，名词前后的形容词圈出来。（感受他对周遭世界的感知，打开另外一个眼睛）</li>\n</ol>\n<p>递进，相对</p>\n<p>这是个极为简单却又常常被忽视的原因</p>\n<p>感知，感知，抽象名词</p>\n<p>写信</p>\n<blockquote>\n<p>突然间，我好想走进了另外一个世界。</p>\n</blockquote>\n<h2 id=\"重新定义写作的目标\"><a href=\"#重新定义写作的目标\" class=\"headerlink\" title=\"重新定义写作的目标\"></a>重新定义写作的目标</h2><p><strong>写作的目标是沟通</strong>，写作不是表达</p>\n<ol>\n<li>你所表达的东西处理好了吗</li>\n<li>表达准确了吗？</li>\n<li>对方能理解吗？</li>\n<li>对方能接受吗？</li>\n<li>对方接受了能当回事吗？</li>\n<li>对方误解了，你怎么办？</li>\n<li>有做好对方反驳你的心理准备吗？</li>\n</ol>\n<p>需要做大量的功课，<strong>80%是看不见的功课 + 20%的最终表达</strong>，很难获得的技能，因为绝大多数人根本没有机会。</p>\n<p>给新人最重要的机会。总是有一定比例的人会进步的。</p>\n<p>没有反馈是最大的障碍。这世界的条件就是稀缺的。</p>\n<blockquote>\n<p><strong>绝对不删任何留言</strong>，我需要了解真实的世界。</p>\n</blockquote>\n<p>最重要原则：想尽一切办法获得所有真实的反馈</p>\n<h2 id=\"重新定义有效沟通\"><a href=\"#重新定义有效沟通\" class=\"headerlink\" title=\"重新定义有效沟通\"></a>重新定义有效沟通</h2><p>写作 -沟通 - 有效沟通的本质（你能让对方明白他之前不知道的东西）</p>\n<p>沟通 - 反馈</p>\n<p>工具：3个原则，顺序（文章的结构）</p>\n<p>顺序，倒叙，插叙，</p>\n<p>why</p>\n<p>事情常常不是常常我的理解的发生的。</p>\n<p>其实是为了照顾读者的阅读习惯，理解读者，而不是自说自话</p>\n<h3 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h3><ul>\n<li>多读心理学</li>\n<li>多读经济学方面的通俗读物，“他们认为这是划算的”，但其实不是</li>\n<li>公众人物化解危机</li>\n<li>真实反馈背后的心理，背后的价值观</li>\n</ul>\n<h2 id=\"修辞\"><a href=\"#修辞\" class=\"headerlink\" title=\"修辞\"></a>修辞</h2><p>让对方感受到原本感受不到的东西</p>\n<blockquote>\n<p>类比和排比</p>\n</blockquote>\n<p>排比：重复令人圣刻影响</p>\n<p>功夫在杭外</p>\n<p>失败和多余</p>\n<p>练习：坚持，分析其他人的文章（感知），不停地审视自己的定义（养成习惯，改变行为）</p>\n<h2 id=\"选题\"><a href=\"#选题\" class=\"headerlink\" title=\"选题\"></a>选题</h2><p>你熟悉而且别人可能不知道的</p>\n<h2 id=\"开发的环境\"><a href=\"#开发的环境\" class=\"headerlink\" title=\"开发的环境\"></a>开发的环境</h2><p>简书，知乎，微博</p>\n"},{"_content":"害怕成为井底之蛙\n\n每个人都是井底之蛙，：\n\n- 时间\n- 空间\n\n![](http://o3b126ie1.qnssl.com/message/8e20b92c-5f08-4aa1-80ce-71b7c2e60a6c)\n\n![](http://o3b126ie1.qnssl.com/message/abed322c-181b-4995-a513-143553ef9830)\n\n\n\n\f![](http://o3b126ie1.qnssl.com/message/5f180e15-d8d9-4a0f-9737-c8c774414f16)\n\n![](http://o3b126ie1.qnssl.com/message/100c9d49-1231-4ec8-90a3-9c424548bd85)\n\n信息过载怎么办？真实的世界就是过载的！\n\n![](http://o3b126ie1.qnssl.com/message/660be464-6f50-4090-be09-0c24012ca362)\n\n- 统计与概率\n- 历史方法论（剑桥中国史）\n- 逻辑学\n\n> 不会就是现代文盲\n\n建立完整知识体系，在一定程度上突破知识的局限。\n\n![](http://o3b126ie1.qnssl.com/message/e37a841f-10cd-49ea-b025-6b0b558fc631)\n\n卡片\n\n- 正反面有不同的用处\n- 正反面有不同的用处\n- 正反面有不同的用处\n\n标签分类，注明出处\n\n正面是例子，可能用到的地方\n\n![](http://o3b126ie1.qnssl.com/message/44b35320-d94f-4207-b08e-5bbca3c2fd10)\n\n> 这个例子还能用到什么地方?\n\n收集\n\n- 类比\n- 理论（二八理论，木桶理论，黄金分割理论0.618）\n- 思考方式和论证方式（复杂二分法）\n\n![](http://o3b126ie1.qnssl.com/message/7d2174fc-a02a-490b-98f0-b3b33bbd11d3)\n\n![](http://o3b126ie1.qnssl.com/message/b521bcd0-bfe4-4d01-a22c-c2e08c064807)\n\n![](http://o3b126ie1.qnssl.com/message/e1c1b08b-a2c6-49c0-b0ce-f6a11c1ed026)\n\n作者如何论证，思考方式，素材，参观一个新的兵器库。\n\n从并不喜欢的人身上学习到很多东西。\n\n搜索，搜索，搜索\n\n付费、付费、付费\n\n整理、整理、整理\n\n收集素材比攒钱过瘾多了\n\n把你读过的好书重新翻出来\n\n看看哪一些素材被你错过了\n\n信息爆炸，但只是知识爆炸\n\n概率论与数理统计\n\nbeyond feelings\n","source":"_drafts/2016-09-15-writing-lesson-3.md","raw":"害怕成为井底之蛙\n\n每个人都是井底之蛙，：\n\n- 时间\n- 空间\n\n![](http://o3b126ie1.qnssl.com/message/8e20b92c-5f08-4aa1-80ce-71b7c2e60a6c)\n\n![](http://o3b126ie1.qnssl.com/message/abed322c-181b-4995-a513-143553ef9830)\n\n\n\n\f![](http://o3b126ie1.qnssl.com/message/5f180e15-d8d9-4a0f-9737-c8c774414f16)\n\n![](http://o3b126ie1.qnssl.com/message/100c9d49-1231-4ec8-90a3-9c424548bd85)\n\n信息过载怎么办？真实的世界就是过载的！\n\n![](http://o3b126ie1.qnssl.com/message/660be464-6f50-4090-be09-0c24012ca362)\n\n- 统计与概率\n- 历史方法论（剑桥中国史）\n- 逻辑学\n\n> 不会就是现代文盲\n\n建立完整知识体系，在一定程度上突破知识的局限。\n\n![](http://o3b126ie1.qnssl.com/message/e37a841f-10cd-49ea-b025-6b0b558fc631)\n\n卡片\n\n- 正反面有不同的用处\n- 正反面有不同的用处\n- 正反面有不同的用处\n\n标签分类，注明出处\n\n正面是例子，可能用到的地方\n\n![](http://o3b126ie1.qnssl.com/message/44b35320-d94f-4207-b08e-5bbca3c2fd10)\n\n> 这个例子还能用到什么地方?\n\n收集\n\n- 类比\n- 理论（二八理论，木桶理论，黄金分割理论0.618）\n- 思考方式和论证方式（复杂二分法）\n\n![](http://o3b126ie1.qnssl.com/message/7d2174fc-a02a-490b-98f0-b3b33bbd11d3)\n\n![](http://o3b126ie1.qnssl.com/message/b521bcd0-bfe4-4d01-a22c-c2e08c064807)\n\n![](http://o3b126ie1.qnssl.com/message/e1c1b08b-a2c6-49c0-b0ce-f6a11c1ed026)\n\n作者如何论证，思考方式，素材，参观一个新的兵器库。\n\n从并不喜欢的人身上学习到很多东西。\n\n搜索，搜索，搜索\n\n付费、付费、付费\n\n整理、整理、整理\n\n收集素材比攒钱过瘾多了\n\n把你读过的好书重新翻出来\n\n看看哪一些素材被你错过了\n\n信息爆炸，但只是知识爆炸\n\n概率论与数理统计\n\nbeyond feelings\n","slug":"2016-09-15-writing-lesson-3","published":0,"date":"2016-09-15T14:32:25.000Z","updated":"2016-09-15T14:32:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr8e000cy3onp26c8wtg","content":"<p>害怕成为井底之蛙</p>\n<p>每个人都是井底之蛙，：</p>\n<ul>\n<li>时间</li>\n<li>空间</li>\n</ul>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/8e20b92c-5f08-4aa1-80ce-71b7c2e60a6c\" alt=\"\"></p>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/abed322c-181b-4995-a513-143553ef9830\" alt=\"\"></p>\n<p>\f<img src=\"http://o3b126ie1.qnssl.com/message/5f180e15-d8d9-4a0f-9737-c8c774414f16\" alt=\"\"></p>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/100c9d49-1231-4ec8-90a3-9c424548bd85\" alt=\"\"></p>\n<p>信息过载怎么办？真实的世界就是过载的！</p>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/660be464-6f50-4090-be09-0c24012ca362\" alt=\"\"></p>\n<ul>\n<li>统计与概率</li>\n<li>历史方法论（剑桥中国史）</li>\n<li>逻辑学</li>\n</ul>\n<blockquote>\n<p>不会就是现代文盲</p>\n</blockquote>\n<p>建立完整知识体系，在一定程度上突破知识的局限。</p>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/e37a841f-10cd-49ea-b025-6b0b558fc631\" alt=\"\"></p>\n<p>卡片</p>\n<ul>\n<li>正反面有不同的用处</li>\n<li>正反面有不同的用处</li>\n<li>正反面有不同的用处</li>\n</ul>\n<p>标签分类，注明出处</p>\n<p>正面是例子，可能用到的地方</p>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/44b35320-d94f-4207-b08e-5bbca3c2fd10\" alt=\"\"></p>\n<blockquote>\n<p>这个例子还能用到什么地方?</p>\n</blockquote>\n<p>收集</p>\n<ul>\n<li>类比</li>\n<li>理论（二八理论，木桶理论，黄金分割理论0.618）</li>\n<li>思考方式和论证方式（复杂二分法）</li>\n</ul>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/7d2174fc-a02a-490b-98f0-b3b33bbd11d3\" alt=\"\"></p>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/b521bcd0-bfe4-4d01-a22c-c2e08c064807\" alt=\"\"></p>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/e1c1b08b-a2c6-49c0-b0ce-f6a11c1ed026\" alt=\"\"></p>\n<p>作者如何论证，思考方式，素材，参观一个新的兵器库。</p>\n<p>从并不喜欢的人身上学习到很多东西。</p>\n<p>搜索，搜索，搜索</p>\n<p>付费、付费、付费</p>\n<p>整理、整理、整理</p>\n<p>收集素材比攒钱过瘾多了</p>\n<p>把你读过的好书重新翻出来</p>\n<p>看看哪一些素材被你错过了</p>\n<p>信息爆炸，但只是知识爆炸</p>\n<p>概率论与数理统计</p>\n<p>beyond feelings</p>\n","excerpt":"","more":"<p>害怕成为井底之蛙</p>\n<p>每个人都是井底之蛙，：</p>\n<ul>\n<li>时间</li>\n<li>空间</li>\n</ul>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/8e20b92c-5f08-4aa1-80ce-71b7c2e60a6c\" alt=\"\"></p>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/abed322c-181b-4995-a513-143553ef9830\" alt=\"\"></p>\n<p>\f<img src=\"http://o3b126ie1.qnssl.com/message/5f180e15-d8d9-4a0f-9737-c8c774414f16\" alt=\"\"></p>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/100c9d49-1231-4ec8-90a3-9c424548bd85\" alt=\"\"></p>\n<p>信息过载怎么办？真实的世界就是过载的！</p>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/660be464-6f50-4090-be09-0c24012ca362\" alt=\"\"></p>\n<ul>\n<li>统计与概率</li>\n<li>历史方法论（剑桥中国史）</li>\n<li>逻辑学</li>\n</ul>\n<blockquote>\n<p>不会就是现代文盲</p>\n</blockquote>\n<p>建立完整知识体系，在一定程度上突破知识的局限。</p>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/e37a841f-10cd-49ea-b025-6b0b558fc631\" alt=\"\"></p>\n<p>卡片</p>\n<ul>\n<li>正反面有不同的用处</li>\n<li>正反面有不同的用处</li>\n<li>正反面有不同的用处</li>\n</ul>\n<p>标签分类，注明出处</p>\n<p>正面是例子，可能用到的地方</p>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/44b35320-d94f-4207-b08e-5bbca3c2fd10\" alt=\"\"></p>\n<blockquote>\n<p>这个例子还能用到什么地方?</p>\n</blockquote>\n<p>收集</p>\n<ul>\n<li>类比</li>\n<li>理论（二八理论，木桶理论，黄金分割理论0.618）</li>\n<li>思考方式和论证方式（复杂二分法）</li>\n</ul>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/7d2174fc-a02a-490b-98f0-b3b33bbd11d3\" alt=\"\"></p>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/b521bcd0-bfe4-4d01-a22c-c2e08c064807\" alt=\"\"></p>\n<p><img src=\"http://o3b126ie1.qnssl.com/message/e1c1b08b-a2c6-49c0-b0ce-f6a11c1ed026\" alt=\"\"></p>\n<p>作者如何论证，思考方式，素材，参观一个新的兵器库。</p>\n<p>从并不喜欢的人身上学习到很多东西。</p>\n<p>搜索，搜索，搜索</p>\n<p>付费、付费、付费</p>\n<p>整理、整理、整理</p>\n<p>收集素材比攒钱过瘾多了</p>\n<p>把你读过的好书重新翻出来</p>\n<p>看看哪一些素材被你错过了</p>\n<p>信息爆炸，但只是知识爆炸</p>\n<p>概率论与数理统计</p>\n<p>beyond feelings</p>\n"},{"title":"【总结】2017/01/03","_content":"\n## Objective\n\n- 重新整理个人知识系统\n- 听全栈营第一课直播\n\n## Reflective\n\n- 重新整理的个人知识系统，感觉很清爽。\n- 听完全栈营的直播，感觉很兴奋。\n- 重听李笑来的写作课，感觉很震惊。\n\n## Interpretive\n\n### 重新整理个人知识系统\n\n平时我都是用印象笔记整理资料信息的，在印象笔记中，我创建了很多的目录以及很多的标签，因为里面收集的东西实在是太多太杂了，因为我觉得反正有搜索功能，需要的时候搜一下就行了，还是很方便的。\n\n昨天晚上在阳志平的公众号《心智工具箱》里面看到一篇推送文章《构建优雅的知识创造系统》，里面提高一种按照域名整理个人知识的管理方法，并且在标题处加上日期，还有比较反常识的一点：**不要分多级目录，只需要一层就够了**，于是，我打算尝试一下这种管理方法，这是我整理之后的目录\n\n![](http://oggx6lf7f.bkt.clouddn.com/mxvzv.png)\n\n\n\n每层目录下面不再新建目录，因为一旦创建二级目录，那将来就会有越来越多的目录，一发不可收拾，一旦目录结构变得复杂，拖延症就犯了，所以，多级目录不可取。\n\n你可能会说不分子目录，文件不好检索呀？其实不会，只要把一级目录建好，比如博客文章放一个目录，图片放一个目录，ppt放一个目录，然后规范所有的命名，让文件名成为其唯一的标识，在配合Spotlight全文检索，查找文件是很快的。\n\n![](http://oggx6lf7f.bkt.clouddn.com/lnmu6.png)\n\n最后，用百度网盘后者github同步内容，done！\n\n### 全阵营直播\n\n今天晚上的直播，可操作性最强，也是最重要的一个概念就是：**提取练习**。\n\n举个例子：以前我们读书背课文的时候，一开始先不断地通读课文，然后再合上课本，检验一下自己能不能背出来，当不看课文的时候，我们就得从脑子里面把之前记住的内容重新提取出来，这个过程就是提取练习。\n\n提取练习最大的好处就是**记得牢**。我和很多人一样，准备复习旧知识的姿势是这样子的：翻开笔记，从头到尾看一遍，然后觉得很熟悉，感觉都记住了。这种方式我经常使用，但事实上效果很差，为什么呢？因为这里面没有提取练习呀。单单只是把笔记过一遍，根本不足以检测出自己是否记住了这些知识、是否真正掌握这些知识。\n\n正确的姿势是这样子的：复习之前，先不看笔记，找一张纸，尽可能地把要复习的知识从脑子里面提取出来，写下来，然后再打开笔记对比其中的出入，这样一来你就能清楚的发现那些知识记住了、哪些知识忘记了、哪些记住了但说不出来、哪些是真正地掌握了。这种提取练习的效率才是最高的。\n\n知道了提取练习的好处，就可以很好地理解这张图的意思\n\n![](http://oggx6lf7f.bkt.clouddn.com/jn07a.png)\n\n我们可以发现，金字塔上面的被动学习都是很少进行提取练习，甚至根本没有提取练习这个动作，所以最终的结果就是导致低效。而金字塔下的主动学习本质上都是在进行提取练习。小组讨论、实作演练、教授知识都是提取练习，因为他们都是脱稿之后，在大脑的记忆中搜索对应的知识，进而把知识记得更加牢固。\n\n其实，很多的方法论都是基于提取练习的，比如说：\n\n- 教是最好的学。\n- 费曼技巧。\n\n那么，为什么我们没有发现自己可能一直在使用低效率的方法呢？其实是在没有提取练习的情况下，我们不知道那些被我们遗忘的、或者说我们压根没有记住的知识，就好像它们“不存在一样”，所以就很容易犯一个错误：自欺欺人。听完一个讲座会觉得：“恩恩，很有道理，讲得太好了”。等到睡一觉醒来，基本上忘得差不多了，只记得一点点碎片，但心里还是会觉得：“我都懂了”，但是，从学校毕业之后，就很少有考试这种自我测试的机会，所以，我们就会面临一个残酷的事实：“不知道自己不知道”。\n\n由此得到：\n\n1. 学完一个知识点，可以和同伴进行小组讨论。\n2. 学完一个知识点，一定要配合实战训练。\n3. 遇到有人不懂，那就主动去教他们。\n4. 写文章，把学到的东西想明白，写下来，公开发表。\n\n### 笑来老师的写作课，又让我震惊了\n\n其实之前已经听过所有的写作课，今天晚上打算复习一遍，其中有一段话使我震惊，甚至羞愧。\n\n> 任何进步最大的障碍其实是一个看不见的东西，叫做**没有反馈。**没有反馈的是很可怕的。很多人一辈子吃的亏在于，他们希望在一个相对完美的世界里生存，他们希望有足够的条件能够进步，他们希望拥有足够的机会可以把握，殊不知这世界就是不完美的、这世界就是不公平的、这世界就是机会稀缺的、这世界就是条件总也不够完善的。于是，那些习惯在不完善的世界里跌跌撞撞前进的人，最终是那些能够真正走过一个又一个里程碑的人。\n\n我震惊，是因为我意识到反馈的重要性，举个例子，这阵子我在考驾照，教练坐在旁边手把手叫我，当我做错时立马给我反馈，所以我进步很快，很顺利地就把驾照搞定了。不过，这种反馈是花钱买来的，也是一种被动的反馈。而我真正需要做的是主动的寻求反馈，其实我意识到，大多数时候，我几乎没有获得反馈，有也只是少的可怜。\n\n由此得到：\n\n> 可以是沟通，可以是分享，也可以是公开写作，本质就是：**想尽一切办法主动地去获得所有真实的反馈**。\n\n## Decisional\n\n明天开始练习《招聘网站》。","source":"_drafts/2017-01-03-coding-diary.md","raw":"---\ntitle: 【总结】2017/01/03\ncategories: 总结\n---\n\n## Objective\n\n- 重新整理个人知识系统\n- 听全栈营第一课直播\n\n## Reflective\n\n- 重新整理的个人知识系统，感觉很清爽。\n- 听完全栈营的直播，感觉很兴奋。\n- 重听李笑来的写作课，感觉很震惊。\n\n## Interpretive\n\n### 重新整理个人知识系统\n\n平时我都是用印象笔记整理资料信息的，在印象笔记中，我创建了很多的目录以及很多的标签，因为里面收集的东西实在是太多太杂了，因为我觉得反正有搜索功能，需要的时候搜一下就行了，还是很方便的。\n\n昨天晚上在阳志平的公众号《心智工具箱》里面看到一篇推送文章《构建优雅的知识创造系统》，里面提高一种按照域名整理个人知识的管理方法，并且在标题处加上日期，还有比较反常识的一点：**不要分多级目录，只需要一层就够了**，于是，我打算尝试一下这种管理方法，这是我整理之后的目录\n\n![](http://oggx6lf7f.bkt.clouddn.com/mxvzv.png)\n\n\n\n每层目录下面不再新建目录，因为一旦创建二级目录，那将来就会有越来越多的目录，一发不可收拾，一旦目录结构变得复杂，拖延症就犯了，所以，多级目录不可取。\n\n你可能会说不分子目录，文件不好检索呀？其实不会，只要把一级目录建好，比如博客文章放一个目录，图片放一个目录，ppt放一个目录，然后规范所有的命名，让文件名成为其唯一的标识，在配合Spotlight全文检索，查找文件是很快的。\n\n![](http://oggx6lf7f.bkt.clouddn.com/lnmu6.png)\n\n最后，用百度网盘后者github同步内容，done！\n\n### 全阵营直播\n\n今天晚上的直播，可操作性最强，也是最重要的一个概念就是：**提取练习**。\n\n举个例子：以前我们读书背课文的时候，一开始先不断地通读课文，然后再合上课本，检验一下自己能不能背出来，当不看课文的时候，我们就得从脑子里面把之前记住的内容重新提取出来，这个过程就是提取练习。\n\n提取练习最大的好处就是**记得牢**。我和很多人一样，准备复习旧知识的姿势是这样子的：翻开笔记，从头到尾看一遍，然后觉得很熟悉，感觉都记住了。这种方式我经常使用，但事实上效果很差，为什么呢？因为这里面没有提取练习呀。单单只是把笔记过一遍，根本不足以检测出自己是否记住了这些知识、是否真正掌握这些知识。\n\n正确的姿势是这样子的：复习之前，先不看笔记，找一张纸，尽可能地把要复习的知识从脑子里面提取出来，写下来，然后再打开笔记对比其中的出入，这样一来你就能清楚的发现那些知识记住了、哪些知识忘记了、哪些记住了但说不出来、哪些是真正地掌握了。这种提取练习的效率才是最高的。\n\n知道了提取练习的好处，就可以很好地理解这张图的意思\n\n![](http://oggx6lf7f.bkt.clouddn.com/jn07a.png)\n\n我们可以发现，金字塔上面的被动学习都是很少进行提取练习，甚至根本没有提取练习这个动作，所以最终的结果就是导致低效。而金字塔下的主动学习本质上都是在进行提取练习。小组讨论、实作演练、教授知识都是提取练习，因为他们都是脱稿之后，在大脑的记忆中搜索对应的知识，进而把知识记得更加牢固。\n\n其实，很多的方法论都是基于提取练习的，比如说：\n\n- 教是最好的学。\n- 费曼技巧。\n\n那么，为什么我们没有发现自己可能一直在使用低效率的方法呢？其实是在没有提取练习的情况下，我们不知道那些被我们遗忘的、或者说我们压根没有记住的知识，就好像它们“不存在一样”，所以就很容易犯一个错误：自欺欺人。听完一个讲座会觉得：“恩恩，很有道理，讲得太好了”。等到睡一觉醒来，基本上忘得差不多了，只记得一点点碎片，但心里还是会觉得：“我都懂了”，但是，从学校毕业之后，就很少有考试这种自我测试的机会，所以，我们就会面临一个残酷的事实：“不知道自己不知道”。\n\n由此得到：\n\n1. 学完一个知识点，可以和同伴进行小组讨论。\n2. 学完一个知识点，一定要配合实战训练。\n3. 遇到有人不懂，那就主动去教他们。\n4. 写文章，把学到的东西想明白，写下来，公开发表。\n\n### 笑来老师的写作课，又让我震惊了\n\n其实之前已经听过所有的写作课，今天晚上打算复习一遍，其中有一段话使我震惊，甚至羞愧。\n\n> 任何进步最大的障碍其实是一个看不见的东西，叫做**没有反馈。**没有反馈的是很可怕的。很多人一辈子吃的亏在于，他们希望在一个相对完美的世界里生存，他们希望有足够的条件能够进步，他们希望拥有足够的机会可以把握，殊不知这世界就是不完美的、这世界就是不公平的、这世界就是机会稀缺的、这世界就是条件总也不够完善的。于是，那些习惯在不完善的世界里跌跌撞撞前进的人，最终是那些能够真正走过一个又一个里程碑的人。\n\n我震惊，是因为我意识到反馈的重要性，举个例子，这阵子我在考驾照，教练坐在旁边手把手叫我，当我做错时立马给我反馈，所以我进步很快，很顺利地就把驾照搞定了。不过，这种反馈是花钱买来的，也是一种被动的反馈。而我真正需要做的是主动的寻求反馈，其实我意识到，大多数时候，我几乎没有获得反馈，有也只是少的可怜。\n\n由此得到：\n\n> 可以是沟通，可以是分享，也可以是公开写作，本质就是：**想尽一切办法主动地去获得所有真实的反馈**。\n\n## Decisional\n\n明天开始练习《招聘网站》。","slug":"2017-01-03-coding-diary","published":0,"date":"2017-01-03T15:09:14.000Z","updated":"2017-01-03T16:20:42.000Z","_id":"cixhpxr8h000ey3onr1t8kxia","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>重新整理个人知识系统</li>\n<li>听全栈营第一课直播</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><ul>\n<li>重新整理的个人知识系统，感觉很清爽。</li>\n<li>听完全栈营的直播，感觉很兴奋。</li>\n<li>重听李笑来的写作课，感觉很震惊。</li>\n</ul>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"重新整理个人知识系统\"><a href=\"#重新整理个人知识系统\" class=\"headerlink\" title=\"重新整理个人知识系统\"></a>重新整理个人知识系统</h3><p>平时我都是用印象笔记整理资料信息的，在印象笔记中，我创建了很多的目录以及很多的标签，因为里面收集的东西实在是太多太杂了，因为我觉得反正有搜索功能，需要的时候搜一下就行了，还是很方便的。</p>\n<p>昨天晚上在阳志平的公众号《心智工具箱》里面看到一篇推送文章《构建优雅的知识创造系统》，里面提高一种按照域名整理个人知识的管理方法，并且在标题处加上日期，还有比较反常识的一点：<strong>不要分多级目录，只需要一层就够了</strong>，于是，我打算尝试一下这种管理方法，这是我整理之后的目录</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/mxvzv.png\" alt=\"\"></p>\n<p>每层目录下面不再新建目录，因为一旦创建二级目录，那将来就会有越来越多的目录，一发不可收拾，一旦目录结构变得复杂，拖延症就犯了，所以，多级目录不可取。</p>\n<p>你可能会说不分子目录，文件不好检索呀？其实不会，只要把一级目录建好，比如博客文章放一个目录，图片放一个目录，ppt放一个目录，然后规范所有的命名，让文件名成为其唯一的标识，在配合Spotlight全文检索，查找文件是很快的。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/lnmu6.png\" alt=\"\"></p>\n<p>最后，用百度网盘后者github同步内容，done！</p>\n<h3 id=\"全阵营直播\"><a href=\"#全阵营直播\" class=\"headerlink\" title=\"全阵营直播\"></a>全阵营直播</h3><p>今天晚上的直播，可操作性最强，也是最重要的一个概念就是：<strong>提取练习</strong>。</p>\n<p>举个例子：以前我们读书背课文的时候，一开始先不断地通读课文，然后再合上课本，检验一下自己能不能背出来，当不看课文的时候，我们就得从脑子里面把之前记住的内容重新提取出来，这个过程就是提取练习。</p>\n<p>提取练习最大的好处就是<strong>记得牢</strong>。我和很多人一样，准备复习旧知识的姿势是这样子的：翻开笔记，从头到尾看一遍，然后觉得很熟悉，感觉都记住了。这种方式我经常使用，但事实上效果很差，为什么呢？因为这里面没有提取练习呀。单单只是把笔记过一遍，根本不足以检测出自己是否记住了这些知识、是否真正掌握这些知识。</p>\n<p>正确的姿势是这样子的：复习之前，先不看笔记，找一张纸，尽可能地把要复习的知识从脑子里面提取出来，写下来，然后再打开笔记对比其中的出入，这样一来你就能清楚的发现那些知识记住了、哪些知识忘记了、哪些记住了但说不出来、哪些是真正地掌握了。这种提取练习的效率才是最高的。</p>\n<p>知道了提取练习的好处，就可以很好地理解这张图的意思</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/jn07a.png\" alt=\"\"></p>\n<p>我们可以发现，金字塔上面的被动学习都是很少进行提取练习，甚至根本没有提取练习这个动作，所以最终的结果就是导致低效。而金字塔下的主动学习本质上都是在进行提取练习。小组讨论、实作演练、教授知识都是提取练习，因为他们都是脱稿之后，在大脑的记忆中搜索对应的知识，进而把知识记得更加牢固。</p>\n<p>其实，很多的方法论都是基于提取练习的，比如说：</p>\n<ul>\n<li>教是最好的学。</li>\n<li>费曼技巧。</li>\n</ul>\n<p>那么，为什么我们没有发现自己可能一直在使用低效率的方法呢？其实是在没有提取练习的情况下，我们不知道那些被我们遗忘的、或者说我们压根没有记住的知识，就好像它们“不存在一样”，所以就很容易犯一个错误：自欺欺人。听完一个讲座会觉得：“恩恩，很有道理，讲得太好了”。等到睡一觉醒来，基本上忘得差不多了，只记得一点点碎片，但心里还是会觉得：“我都懂了”，但是，从学校毕业之后，就很少有考试这种自我测试的机会，所以，我们就会面临一个残酷的事实：“不知道自己不知道”。</p>\n<p>由此得到：</p>\n<ol>\n<li>学完一个知识点，可以和同伴进行小组讨论。</li>\n<li>学完一个知识点，一定要配合实战训练。</li>\n<li>遇到有人不懂，那就主动去教他们。</li>\n<li>写文章，把学到的东西想明白，写下来，公开发表。</li>\n</ol>\n<h3 id=\"笑来老师的写作课，又让我震惊了\"><a href=\"#笑来老师的写作课，又让我震惊了\" class=\"headerlink\" title=\"笑来老师的写作课，又让我震惊了\"></a>笑来老师的写作课，又让我震惊了</h3><p>其实之前已经听过所有的写作课，今天晚上打算复习一遍，其中有一段话使我震惊，甚至羞愧。</p>\n<blockquote>\n<p>任何进步最大的障碍其实是一个看不见的东西，叫做<strong>没有反馈。</strong>没有反馈的是很可怕的。很多人一辈子吃的亏在于，他们希望在一个相对完美的世界里生存，他们希望有足够的条件能够进步，他们希望拥有足够的机会可以把握，殊不知这世界就是不完美的、这世界就是不公平的、这世界就是机会稀缺的、这世界就是条件总也不够完善的。于是，那些习惯在不完善的世界里跌跌撞撞前进的人，最终是那些能够真正走过一个又一个里程碑的人。</p>\n</blockquote>\n<p>我震惊，是因为我意识到反馈的重要性，举个例子，这阵子我在考驾照，教练坐在旁边手把手叫我，当我做错时立马给我反馈，所以我进步很快，很顺利地就把驾照搞定了。不过，这种反馈是花钱买来的，也是一种被动的反馈。而我真正需要做的是主动的寻求反馈，其实我意识到，大多数时候，我几乎没有获得反馈，有也只是少的可怜。</p>\n<p>由此得到：</p>\n<blockquote>\n<p>可以是沟通，可以是分享，也可以是公开写作，本质就是：<strong>想尽一切办法主动地去获得所有真实的反馈</strong>。</p>\n</blockquote>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天开始练习《招聘网站》。</p>\n","excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><ul>\n<li>重新整理个人知识系统</li>\n<li>听全栈营第一课直播</li>\n</ul>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><ul>\n<li>重新整理的个人知识系统，感觉很清爽。</li>\n<li>听完全栈营的直播，感觉很兴奋。</li>\n<li>重听李笑来的写作课，感觉很震惊。</li>\n</ul>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"重新整理个人知识系统\"><a href=\"#重新整理个人知识系统\" class=\"headerlink\" title=\"重新整理个人知识系统\"></a>重新整理个人知识系统</h3><p>平时我都是用印象笔记整理资料信息的，在印象笔记中，我创建了很多的目录以及很多的标签，因为里面收集的东西实在是太多太杂了，因为我觉得反正有搜索功能，需要的时候搜一下就行了，还是很方便的。</p>\n<p>昨天晚上在阳志平的公众号《心智工具箱》里面看到一篇推送文章《构建优雅的知识创造系统》，里面提高一种按照域名整理个人知识的管理方法，并且在标题处加上日期，还有比较反常识的一点：<strong>不要分多级目录，只需要一层就够了</strong>，于是，我打算尝试一下这种管理方法，这是我整理之后的目录</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/mxvzv.png\" alt=\"\"></p>\n<p>每层目录下面不再新建目录，因为一旦创建二级目录，那将来就会有越来越多的目录，一发不可收拾，一旦目录结构变得复杂，拖延症就犯了，所以，多级目录不可取。</p>\n<p>你可能会说不分子目录，文件不好检索呀？其实不会，只要把一级目录建好，比如博客文章放一个目录，图片放一个目录，ppt放一个目录，然后规范所有的命名，让文件名成为其唯一的标识，在配合Spotlight全文检索，查找文件是很快的。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/lnmu6.png\" alt=\"\"></p>\n<p>最后，用百度网盘后者github同步内容，done！</p>\n<h3 id=\"全阵营直播\"><a href=\"#全阵营直播\" class=\"headerlink\" title=\"全阵营直播\"></a>全阵营直播</h3><p>今天晚上的直播，可操作性最强，也是最重要的一个概念就是：<strong>提取练习</strong>。</p>\n<p>举个例子：以前我们读书背课文的时候，一开始先不断地通读课文，然后再合上课本，检验一下自己能不能背出来，当不看课文的时候，我们就得从脑子里面把之前记住的内容重新提取出来，这个过程就是提取练习。</p>\n<p>提取练习最大的好处就是<strong>记得牢</strong>。我和很多人一样，准备复习旧知识的姿势是这样子的：翻开笔记，从头到尾看一遍，然后觉得很熟悉，感觉都记住了。这种方式我经常使用，但事实上效果很差，为什么呢？因为这里面没有提取练习呀。单单只是把笔记过一遍，根本不足以检测出自己是否记住了这些知识、是否真正掌握这些知识。</p>\n<p>正确的姿势是这样子的：复习之前，先不看笔记，找一张纸，尽可能地把要复习的知识从脑子里面提取出来，写下来，然后再打开笔记对比其中的出入，这样一来你就能清楚的发现那些知识记住了、哪些知识忘记了、哪些记住了但说不出来、哪些是真正地掌握了。这种提取练习的效率才是最高的。</p>\n<p>知道了提取练习的好处，就可以很好地理解这张图的意思</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/jn07a.png\" alt=\"\"></p>\n<p>我们可以发现，金字塔上面的被动学习都是很少进行提取练习，甚至根本没有提取练习这个动作，所以最终的结果就是导致低效。而金字塔下的主动学习本质上都是在进行提取练习。小组讨论、实作演练、教授知识都是提取练习，因为他们都是脱稿之后，在大脑的记忆中搜索对应的知识，进而把知识记得更加牢固。</p>\n<p>其实，很多的方法论都是基于提取练习的，比如说：</p>\n<ul>\n<li>教是最好的学。</li>\n<li>费曼技巧。</li>\n</ul>\n<p>那么，为什么我们没有发现自己可能一直在使用低效率的方法呢？其实是在没有提取练习的情况下，我们不知道那些被我们遗忘的、或者说我们压根没有记住的知识，就好像它们“不存在一样”，所以就很容易犯一个错误：自欺欺人。听完一个讲座会觉得：“恩恩，很有道理，讲得太好了”。等到睡一觉醒来，基本上忘得差不多了，只记得一点点碎片，但心里还是会觉得：“我都懂了”，但是，从学校毕业之后，就很少有考试这种自我测试的机会，所以，我们就会面临一个残酷的事实：“不知道自己不知道”。</p>\n<p>由此得到：</p>\n<ol>\n<li>学完一个知识点，可以和同伴进行小组讨论。</li>\n<li>学完一个知识点，一定要配合实战训练。</li>\n<li>遇到有人不懂，那就主动去教他们。</li>\n<li>写文章，把学到的东西想明白，写下来，公开发表。</li>\n</ol>\n<h3 id=\"笑来老师的写作课，又让我震惊了\"><a href=\"#笑来老师的写作课，又让我震惊了\" class=\"headerlink\" title=\"笑来老师的写作课，又让我震惊了\"></a>笑来老师的写作课，又让我震惊了</h3><p>其实之前已经听过所有的写作课，今天晚上打算复习一遍，其中有一段话使我震惊，甚至羞愧。</p>\n<blockquote>\n<p>任何进步最大的障碍其实是一个看不见的东西，叫做<strong>没有反馈。</strong>没有反馈的是很可怕的。很多人一辈子吃的亏在于，他们希望在一个相对完美的世界里生存，他们希望有足够的条件能够进步，他们希望拥有足够的机会可以把握，殊不知这世界就是不完美的、这世界就是不公平的、这世界就是机会稀缺的、这世界就是条件总也不够完善的。于是，那些习惯在不完善的世界里跌跌撞撞前进的人，最终是那些能够真正走过一个又一个里程碑的人。</p>\n</blockquote>\n<p>我震惊，是因为我意识到反馈的重要性，举个例子，这阵子我在考驾照，教练坐在旁边手把手叫我，当我做错时立马给我反馈，所以我进步很快，很顺利地就把驾照搞定了。不过，这种反馈是花钱买来的，也是一种被动的反馈。而我真正需要做的是主动的寻求反馈，其实我意识到，大多数时候，我几乎没有获得反馈，有也只是少的可怜。</p>\n<p>由此得到：</p>\n<blockquote>\n<p>可以是沟通，可以是分享，也可以是公开写作，本质就是：<strong>想尽一切办法主动地去获得所有真实的反馈</strong>。</p>\n</blockquote>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天开始练习《招聘网站》。</p>\n"},{"title":"Mac效率神器Alfred基本使用教程","_content":"\n![alfred](http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiARM8OAANCrlkfPIs956.png)\n\n[Alfred](https://www.alfredapp.com/)是一个用来提高效率的软件，可以快速启动软件、使用快捷方式搜索Mac上的文件和互联网上的各种资源，让你摆脱繁琐的重复工作，提高工作效率。   \n\nAlfred有着Spotlight很类似的功能，这是基本的功能，也是免费的，但之所以能被称为Mac神器的原因是它有着强大的Workflows功能，而这个则是收费的。本文主要介绍以上提到的两个功能。\n\n## 基本功能\n\n### 启动\n\n安装完Alfred之后，首先设置启动快捷键，点击顶部状态栏的小帽子，打开Preferences。\n\n![set shortcut](http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiAHzELAAGphnegZ_M906.png)\n\n根据我自己的习惯，我设置成 ⌥ + Space，然后就可以通过这个快捷键打开Alfred。\n\n### 快速打开App\n\n打开Alfred，输入App名称，比如“微信”\n\n![lunch app](http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtiAfRXyAAB2mhKqI5I059.png)\n\n然后回车，就可以打开微信。无论你想启动什么软件，只需要输入名称，而不需要去应用程序或者是Dock里面找。\n\n### 网页搜索\n\n打开Alfred，直接输入要搜索的内容，比如“新生大学”\n\n![search](http://file.do.yy.com/group3/M03/CD/61/tz0GSFdvvtiAEUo9AADwDwCw9qk657.png)\n\n可以看到有3个搜索选项，分别是Google，Amazon和Wikipedia，选择一个，按⏎（回车键），就能自动打开浏览器，并且显示搜索结果页面。\n\n### 查找文件\n\n打开Alfred，按一下空格键，输入文件名，比如“相片”（我的桌面有一张png图片，名称是相片）\n\n![find files](http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAVcQWAAB_TWdxSeU479.png)\n\n如果要打开图片，按⏎（回车键），如果要打开图片所在的目录，按⌘⏎（回车键）\n\n以上就是Alfred比较常用的基本功能，下面介绍一下强大的Workflows功能。\n\n## Workflows\n\nWorkflows实际上就是Alfred的插件，可以实现各种各样的功能。这个网站收集了很全的Workflows，[Alfred 2 Workflow List](http://alfredworkflow.com/)，可以到上面下载任何你所需要的Workflows。\n\n下载了之后，直接打开Workflows文件，然后点击import即可，安装完之后，可以打开Alfred查看所有的Workflows\n\n![workflows](http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAD9e6AAEeCVknPlQ818.png)\n\n基本上所有的Workflows用法都很类似，下面介绍几个我比较常用的Workflows，让大家了解具体的用法。\n\n### Baidu Weather（天气预报）\n\n![baidu weather](http://file.do.yy.com/group3/M00/CD/61/tz0GSFdvvtmAEBsNAAIKoiz1Vu0641.png)\n\n点击查看Baidu Weather这个Workflows，可以看到使用的命令是“tq”，所以，打开Alfred，输入“tq”\n\n<img class=\"img\" src=\"http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtmAP5KVAADyFlJTf7E838.png\">\n\n它会根据当前 IP 定位并查询当地天气。\n\n### Youdao Translate（有道词典）\n\n输入“yd”，然后敲空格，再输入要查询的单词，比如“calendar”\n\n![youdao translate](http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqADdSvAAGM3VXyNss824.png)\n\n### Express（快递）\n\n![express](http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqATuIvAAEfdNzNX70371.png)\n\n### TerminalFinder\n\n在当前路径下打开命令行\n\n![terminalFinder](http://file.do.yy.com/group3/M01/CD/61/tz0GSFdvvtqAICQUAABq9os5KqI488.png)\n\n简单快捷。\n\n## 总结\n\n以上简单地介绍Alfred的基本功能和Workflows，了解完之后，再花点时间下载需要的Workflows，就可以用起来了，实际上这就是Alfred的最少必要知识，已经能够减少大部分的鼠标操作和重复性操作。Alfred还有很多其他功能，有需要的可以参考官方文档，另外，有能力的还可以自己写Workflows。\n","source":"_posts/2016-06-27-alfred.md","raw":"---\ntitle: Mac效率神器Alfred基本使用教程\ncategories: 工具\n---\n\n![alfred](http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiARM8OAANCrlkfPIs956.png)\n\n[Alfred](https://www.alfredapp.com/)是一个用来提高效率的软件，可以快速启动软件、使用快捷方式搜索Mac上的文件和互联网上的各种资源，让你摆脱繁琐的重复工作，提高工作效率。   \n\nAlfred有着Spotlight很类似的功能，这是基本的功能，也是免费的，但之所以能被称为Mac神器的原因是它有着强大的Workflows功能，而这个则是收费的。本文主要介绍以上提到的两个功能。\n\n## 基本功能\n\n### 启动\n\n安装完Alfred之后，首先设置启动快捷键，点击顶部状态栏的小帽子，打开Preferences。\n\n![set shortcut](http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiAHzELAAGphnegZ_M906.png)\n\n根据我自己的习惯，我设置成 ⌥ + Space，然后就可以通过这个快捷键打开Alfred。\n\n### 快速打开App\n\n打开Alfred，输入App名称，比如“微信”\n\n![lunch app](http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtiAfRXyAAB2mhKqI5I059.png)\n\n然后回车，就可以打开微信。无论你想启动什么软件，只需要输入名称，而不需要去应用程序或者是Dock里面找。\n\n### 网页搜索\n\n打开Alfred，直接输入要搜索的内容，比如“新生大学”\n\n![search](http://file.do.yy.com/group3/M03/CD/61/tz0GSFdvvtiAEUo9AADwDwCw9qk657.png)\n\n可以看到有3个搜索选项，分别是Google，Amazon和Wikipedia，选择一个，按⏎（回车键），就能自动打开浏览器，并且显示搜索结果页面。\n\n### 查找文件\n\n打开Alfred，按一下空格键，输入文件名，比如“相片”（我的桌面有一张png图片，名称是相片）\n\n![find files](http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAVcQWAAB_TWdxSeU479.png)\n\n如果要打开图片，按⏎（回车键），如果要打开图片所在的目录，按⌘⏎（回车键）\n\n以上就是Alfred比较常用的基本功能，下面介绍一下强大的Workflows功能。\n\n## Workflows\n\nWorkflows实际上就是Alfred的插件，可以实现各种各样的功能。这个网站收集了很全的Workflows，[Alfred 2 Workflow List](http://alfredworkflow.com/)，可以到上面下载任何你所需要的Workflows。\n\n下载了之后，直接打开Workflows文件，然后点击import即可，安装完之后，可以打开Alfred查看所有的Workflows\n\n![workflows](http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAD9e6AAEeCVknPlQ818.png)\n\n基本上所有的Workflows用法都很类似，下面介绍几个我比较常用的Workflows，让大家了解具体的用法。\n\n### Baidu Weather（天气预报）\n\n![baidu weather](http://file.do.yy.com/group3/M00/CD/61/tz0GSFdvvtmAEBsNAAIKoiz1Vu0641.png)\n\n点击查看Baidu Weather这个Workflows，可以看到使用的命令是“tq”，所以，打开Alfred，输入“tq”\n\n<img class=\"img\" src=\"http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtmAP5KVAADyFlJTf7E838.png\">\n\n它会根据当前 IP 定位并查询当地天气。\n\n### Youdao Translate（有道词典）\n\n输入“yd”，然后敲空格，再输入要查询的单词，比如“calendar”\n\n![youdao translate](http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqADdSvAAGM3VXyNss824.png)\n\n### Express（快递）\n\n![express](http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqATuIvAAEfdNzNX70371.png)\n\n### TerminalFinder\n\n在当前路径下打开命令行\n\n![terminalFinder](http://file.do.yy.com/group3/M01/CD/61/tz0GSFdvvtqAICQUAABq9os5KqI488.png)\n\n简单快捷。\n\n## 总结\n\n以上简单地介绍Alfred的基本功能和Workflows，了解完之后，再花点时间下载需要的Workflows，就可以用起来了，实际上这就是Alfred的最少必要知识，已经能够减少大部分的鼠标操作和重复性操作。Alfred还有很多其他功能，有需要的可以参考官方文档，另外，有能力的还可以自己写Workflows。\n","slug":"2016-06-27-alfred","published":1,"date":"2016-06-27T08:39:47.000Z","updated":"2016-12-21T02:48:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr8n000iy3on4901kco6","content":"<p><img src=\"http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiARM8OAANCrlkfPIs956.png\" alt=\"alfred\"></p>\n<p><a href=\"https://www.alfredapp.com/\" target=\"_blank\" rel=\"external\">Alfred</a>是一个用来提高效率的软件，可以快速启动软件、使用快捷方式搜索Mac上的文件和互联网上的各种资源，让你摆脱繁琐的重复工作，提高工作效率。   </p>\n<p>Alfred有着Spotlight很类似的功能，这是基本的功能，也是免费的，但之所以能被称为Mac神器的原因是它有着强大的Workflows功能，而这个则是收费的。本文主要介绍以上提到的两个功能。</p>\n<h2 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>安装完Alfred之后，首先设置启动快捷键，点击顶部状态栏的小帽子，打开Preferences。</p>\n<p><img src=\"http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiAHzELAAGphnegZ_M906.png\" alt=\"set shortcut\"></p>\n<p>根据我自己的习惯，我设置成 ⌥ + Space，然后就可以通过这个快捷键打开Alfred。</p>\n<h3 id=\"快速打开App\"><a href=\"#快速打开App\" class=\"headerlink\" title=\"快速打开App\"></a>快速打开App</h3><p>打开Alfred，输入App名称，比如“微信”</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtiAfRXyAAB2mhKqI5I059.png\" alt=\"lunch app\"></p>\n<p>然后回车，就可以打开微信。无论你想启动什么软件，只需要输入名称，而不需要去应用程序或者是Dock里面找。</p>\n<h3 id=\"网页搜索\"><a href=\"#网页搜索\" class=\"headerlink\" title=\"网页搜索\"></a>网页搜索</h3><p>打开Alfred，直接输入要搜索的内容，比如“新生大学”</p>\n<p><img src=\"http://file.do.yy.com/group3/M03/CD/61/tz0GSFdvvtiAEUo9AADwDwCw9qk657.png\" alt=\"search\"></p>\n<p>可以看到有3个搜索选项，分别是Google，Amazon和Wikipedia，选择一个，按⏎（回车键），就能自动打开浏览器，并且显示搜索结果页面。</p>\n<h3 id=\"查找文件\"><a href=\"#查找文件\" class=\"headerlink\" title=\"查找文件\"></a>查找文件</h3><p>打开Alfred，按一下空格键，输入文件名，比如“相片”（我的桌面有一张png图片，名称是相片）</p>\n<p><img src=\"http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAVcQWAAB_TWdxSeU479.png\" alt=\"find files\"></p>\n<p>如果要打开图片，按⏎（回车键），如果要打开图片所在的目录，按⌘⏎（回车键）</p>\n<p>以上就是Alfred比较常用的基本功能，下面介绍一下强大的Workflows功能。</p>\n<h2 id=\"Workflows\"><a href=\"#Workflows\" class=\"headerlink\" title=\"Workflows\"></a>Workflows</h2><p>Workflows实际上就是Alfred的插件，可以实现各种各样的功能。这个网站收集了很全的Workflows，<a href=\"http://alfredworkflow.com/\" target=\"_blank\" rel=\"external\">Alfred 2 Workflow List</a>，可以到上面下载任何你所需要的Workflows。</p>\n<p>下载了之后，直接打开Workflows文件，然后点击import即可，安装完之后，可以打开Alfred查看所有的Workflows</p>\n<p><img src=\"http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAD9e6AAEeCVknPlQ818.png\" alt=\"workflows\"></p>\n<p>基本上所有的Workflows用法都很类似，下面介绍几个我比较常用的Workflows，让大家了解具体的用法。</p>\n<h3 id=\"Baidu-Weather（天气预报）\"><a href=\"#Baidu-Weather（天气预报）\" class=\"headerlink\" title=\"Baidu Weather（天气预报）\"></a>Baidu Weather（天气预报）</h3><p><img src=\"http://file.do.yy.com/group3/M00/CD/61/tz0GSFdvvtmAEBsNAAIKoiz1Vu0641.png\" alt=\"baidu weather\"></p>\n<p>点击查看Baidu Weather这个Workflows，可以看到使用的命令是“tq”，所以，打开Alfred，输入“tq”</p>\n<p><img class=\"img\" src=\"http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtmAP5KVAADyFlJTf7E838.png\"></p>\n<p>它会根据当前 IP 定位并查询当地天气。</p>\n<h3 id=\"Youdao-Translate（有道词典）\"><a href=\"#Youdao-Translate（有道词典）\" class=\"headerlink\" title=\"Youdao Translate（有道词典）\"></a>Youdao Translate（有道词典）</h3><p>输入“yd”，然后敲空格，再输入要查询的单词，比如“calendar”</p>\n<p><img src=\"http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqADdSvAAGM3VXyNss824.png\" alt=\"youdao translate\"></p>\n<h3 id=\"Express（快递）\"><a href=\"#Express（快递）\" class=\"headerlink\" title=\"Express（快递）\"></a>Express（快递）</h3><p><img src=\"http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqATuIvAAEfdNzNX70371.png\" alt=\"express\"></p>\n<h3 id=\"TerminalFinder\"><a href=\"#TerminalFinder\" class=\"headerlink\" title=\"TerminalFinder\"></a>TerminalFinder</h3><p>在当前路径下打开命令行</p>\n<p><img src=\"http://file.do.yy.com/group3/M01/CD/61/tz0GSFdvvtqAICQUAABq9os5KqI488.png\" alt=\"terminalFinder\"></p>\n<p>简单快捷。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上简单地介绍Alfred的基本功能和Workflows，了解完之后，再花点时间下载需要的Workflows，就可以用起来了，实际上这就是Alfred的最少必要知识，已经能够减少大部分的鼠标操作和重复性操作。Alfred还有很多其他功能，有需要的可以参考官方文档，另外，有能力的还可以自己写Workflows。</p>\n","excerpt":"","more":"<p><img src=\"http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiARM8OAANCrlkfPIs956.png\" alt=\"alfred\"></p>\n<p><a href=\"https://www.alfredapp.com/\">Alfred</a>是一个用来提高效率的软件，可以快速启动软件、使用快捷方式搜索Mac上的文件和互联网上的各种资源，让你摆脱繁琐的重复工作，提高工作效率。   </p>\n<p>Alfred有着Spotlight很类似的功能，这是基本的功能，也是免费的，但之所以能被称为Mac神器的原因是它有着强大的Workflows功能，而这个则是收费的。本文主要介绍以上提到的两个功能。</p>\n<h2 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>安装完Alfred之后，首先设置启动快捷键，点击顶部状态栏的小帽子，打开Preferences。</p>\n<p><img src=\"http://file.do.yy.com/group3/M00/CD/5E/tz0MYFdvvtiAHzELAAGphnegZ_M906.png\" alt=\"set shortcut\"></p>\n<p>根据我自己的习惯，我设置成 ⌥ + Space，然后就可以通过这个快捷键打开Alfred。</p>\n<h3 id=\"快速打开App\"><a href=\"#快速打开App\" class=\"headerlink\" title=\"快速打开App\"></a>快速打开App</h3><p>打开Alfred，输入App名称，比如“微信”</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtiAfRXyAAB2mhKqI5I059.png\" alt=\"lunch app\"></p>\n<p>然后回车，就可以打开微信。无论你想启动什么软件，只需要输入名称，而不需要去应用程序或者是Dock里面找。</p>\n<h3 id=\"网页搜索\"><a href=\"#网页搜索\" class=\"headerlink\" title=\"网页搜索\"></a>网页搜索</h3><p>打开Alfred，直接输入要搜索的内容，比如“新生大学”</p>\n<p><img src=\"http://file.do.yy.com/group3/M03/CD/61/tz0GSFdvvtiAEUo9AADwDwCw9qk657.png\" alt=\"search\"></p>\n<p>可以看到有3个搜索选项，分别是Google，Amazon和Wikipedia，选择一个，按⏎（回车键），就能自动打开浏览器，并且显示搜索结果页面。</p>\n<h3 id=\"查找文件\"><a href=\"#查找文件\" class=\"headerlink\" title=\"查找文件\"></a>查找文件</h3><p>打开Alfred，按一下空格键，输入文件名，比如“相片”（我的桌面有一张png图片，名称是相片）</p>\n<p><img src=\"http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAVcQWAAB_TWdxSeU479.png\" alt=\"find files\"></p>\n<p>如果要打开图片，按⏎（回车键），如果要打开图片所在的目录，按⌘⏎（回车键）</p>\n<p>以上就是Alfred比较常用的基本功能，下面介绍一下强大的Workflows功能。</p>\n<h2 id=\"Workflows\"><a href=\"#Workflows\" class=\"headerlink\" title=\"Workflows\"></a>Workflows</h2><p>Workflows实际上就是Alfred的插件，可以实现各种各样的功能。这个网站收集了很全的Workflows，<a href=\"http://alfredworkflow.com/\">Alfred 2 Workflow List</a>，可以到上面下载任何你所需要的Workflows。</p>\n<p>下载了之后，直接打开Workflows文件，然后点击import即可，安装完之后，可以打开Alfred查看所有的Workflows</p>\n<p><img src=\"http://file.do.yy.com/group3/M01/CD/5F/tz0MYFdvvtmAD9e6AAEeCVknPlQ818.png\" alt=\"workflows\"></p>\n<p>基本上所有的Workflows用法都很类似，下面介绍几个我比较常用的Workflows，让大家了解具体的用法。</p>\n<h3 id=\"Baidu-Weather（天气预报）\"><a href=\"#Baidu-Weather（天气预报）\" class=\"headerlink\" title=\"Baidu Weather（天气预报）\"></a>Baidu Weather（天气预报）</h3><p><img src=\"http://file.do.yy.com/group3/M00/CD/61/tz0GSFdvvtmAEBsNAAIKoiz1Vu0641.png\" alt=\"baidu weather\"></p>\n<p>点击查看Baidu Weather这个Workflows，可以看到使用的命令是“tq”，所以，打开Alfred，输入“tq”</p>\n<p><img class=\"img\" src=\"http://file.do.yy.com/group3/M04/CD/61/tz0GSFdvvtmAP5KVAADyFlJTf7E838.png\"></p>\n<p>它会根据当前 IP 定位并查询当地天气。</p>\n<h3 id=\"Youdao-Translate（有道词典）\"><a href=\"#Youdao-Translate（有道词典）\" class=\"headerlink\" title=\"Youdao Translate（有道词典）\"></a>Youdao Translate（有道词典）</h3><p>输入“yd”，然后敲空格，再输入要查询的单词，比如“calendar”</p>\n<p><img src=\"http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqADdSvAAGM3VXyNss824.png\" alt=\"youdao translate\"></p>\n<h3 id=\"Express（快递）\"><a href=\"#Express（快递）\" class=\"headerlink\" title=\"Express（快递）\"></a>Express（快递）</h3><p><img src=\"http://file.do.yy.com/group3/M02/CD/5F/tz0MYFdvvtqATuIvAAEfdNzNX70371.png\" alt=\"express\"></p>\n<h3 id=\"TerminalFinder\"><a href=\"#TerminalFinder\" class=\"headerlink\" title=\"TerminalFinder\"></a>TerminalFinder</h3><p>在当前路径下打开命令行</p>\n<p><img src=\"http://file.do.yy.com/group3/M01/CD/61/tz0GSFdvvtqAICQUAABq9os5KqI488.png\" alt=\"terminalFinder\"></p>\n<p>简单快捷。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上简单地介绍Alfred的基本功能和Workflows，了解完之后，再花点时间下载需要的Workflows，就可以用起来了，实际上这就是Alfred的最少必要知识，已经能够减少大部分的鼠标操作和重复性操作。Alfred还有很多其他功能，有需要的可以参考官方文档，另外，有能力的还可以自己写Workflows。</p>\n"},{"title":"The Cheatsheets for Mocha","_content":"\n### Getting Started\n\n    $ npm install -g mocha\n    $ mocha // 默认test目录下的测试脚本\n\n\n### Usage\n\n    --recursive                             include sub directories\n    --reporters                             display available reporters\n    -w, --watch                             watch files for changes\n    -b, --bail                              bail after first test failure\n    --compilers <ext>:<module>,...          use the given module(s) to compile files\n    -r, --require <name>                    require the given module\n\n### ES6测试\n\n运行测试之前，需要先用Babel转码。\n\n\t$ npm install babel-core babel-preset-es2015 --save-dev\n\n让Babel对Iterator、Generator、Promise、Map、Set等全局对象转码\n\n\t$ npm install babel-polyfill --save\n\n在项目目录下新建一个.babelrc配置文件\n\n\t{\n\t\t\"presets\": [ \"es2015\" ]\n\t}\n\n\n运行mocha命令，加上`--compilers`\n\n\t$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register\n","source":"_posts/2016-06-30-mocha-babel.md","raw":"---\ntitle: The Cheatsheets for Mocha\ncategories: Javascript\ntags: [Mocha, Cheatsheets]\n---\n\n### Getting Started\n\n    $ npm install -g mocha\n    $ mocha // 默认test目录下的测试脚本\n\n\n### Usage\n\n    --recursive                             include sub directories\n    --reporters                             display available reporters\n    -w, --watch                             watch files for changes\n    -b, --bail                              bail after first test failure\n    --compilers <ext>:<module>,...          use the given module(s) to compile files\n    -r, --require <name>                    require the given module\n\n### ES6测试\n\n运行测试之前，需要先用Babel转码。\n\n\t$ npm install babel-core babel-preset-es2015 --save-dev\n\n让Babel对Iterator、Generator、Promise、Map、Set等全局对象转码\n\n\t$ npm install babel-polyfill --save\n\n在项目目录下新建一个.babelrc配置文件\n\n\t{\n\t\t\"presets\": [ \"es2015\" ]\n\t}\n\n\n运行mocha命令，加上`--compilers`\n\n\t$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register\n","slug":"2016-06-30-mocha-babel","published":1,"date":"2016-06-30T11:11:38.000Z","updated":"2016-08-07T08:58:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr8p000jy3onsxwjwyab","content":"<h3 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h3><pre><code>$ npm install -g mocha\n$ mocha // 默认test目录下的测试脚本\n</code></pre><h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><pre><code>--recursive                             include sub directories\n--reporters                             display available reporters\n-w, --watch                             watch files for changes\n-b, --bail                              bail after first test failure\n--compilers &lt;ext&gt;:&lt;module&gt;,...          use the given module(s) to compile files\n-r, --require &lt;name&gt;                    require the given module\n</code></pre><h3 id=\"ES6测试\"><a href=\"#ES6测试\" class=\"headerlink\" title=\"ES6测试\"></a>ES6测试</h3><p>运行测试之前，需要先用Babel转码。</p>\n<pre><code>$ npm install babel-core babel-preset-es2015 --save-dev\n</code></pre><p>让Babel对Iterator、Generator、Promise、Map、Set等全局对象转码</p>\n<pre><code>$ npm install babel-polyfill --save\n</code></pre><p>在项目目录下新建一个.babelrc配置文件</p>\n<pre><code>{\n    &quot;presets&quot;: [ &quot;es2015&quot; ]\n}\n</code></pre><p>运行mocha命令，加上<code>--compilers</code></p>\n<pre><code>$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register\n</code></pre>","excerpt":"","more":"<h3 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h3><pre><code>$ npm install -g mocha\n$ mocha // 默认test目录下的测试脚本\n</code></pre><h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><pre><code>--recursive                             include sub directories\n--reporters                             display available reporters\n-w, --watch                             watch files for changes\n-b, --bail                              bail after first test failure\n--compilers &lt;ext&gt;:&lt;module&gt;,...          use the given module(s) to compile files\n-r, --require &lt;name&gt;                    require the given module\n</code></pre><h3 id=\"ES6测试\"><a href=\"#ES6测试\" class=\"headerlink\" title=\"ES6测试\"></a>ES6测试</h3><p>运行测试之前，需要先用Babel转码。</p>\n<pre><code>$ npm install babel-core babel-preset-es2015 --save-dev\n</code></pre><p>让Babel对Iterator、Generator、Promise、Map、Set等全局对象转码</p>\n<pre><code>$ npm install babel-polyfill --save\n</code></pre><p>在项目目录下新建一个.babelrc配置文件</p>\n<pre><code>{\n    &quot;presets&quot;: [ &quot;es2015&quot; ]\n}\n</code></pre><p>运行mocha命令，加上<code>--compilers</code></p>\n<pre><code>$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register\n</code></pre>"},{"title":"Vuex使用总结","_content":"\n## Vuex是什么?\n> Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构。它借鉴了 Flux 和 Redux 的设计思想，但简化了概念，并且采用了一种为能更好发挥 Vue.js 数据响应机制而专门设计的实现。\n\n## 什么情况下使用Vuex？\n当你的应用规模比较小的时候，你并不需要使用Vuex，因为在按照Vuex规定的格式来规划文件以及书写规范还是需要花一些时间和精力。对于中型以上规模的SPA，有很多很多的组件，彼此之间相互通信，这时候，Vuex就可以发挥很大的作用。\n\n## 没有使用Vuex的情况下，组件之间是如何通信的?\n这种情况会有两种情景：\n\n> 父子组件之间的通信\n> 同级子组件之间的通信\n\n第一种的解决方法是使用Props传参数，将父组件的数据传递给子组件，反过来，子组件也可以改变传入的参数，进而改变父组件的数据。\n\n第二中解决方法就比较繁琐了，数据的流向是，子组件 -> 父组件 -> 另外一个子组件。可以想象，当应用规模变大时，组件之间数据的传递会越来越复杂，如果在某个环节出了bug，可能需要花费很大的精力才能定位。而且，这也会导致子组件之间紧密耦合，导致这些组件没法被复用。\n\n也就是说，如果你的应用很多都是父子组件之间的通信，那么往往比较简单，暂时可以不考虑加入Vuex，但如果是很多同级子组件之间的通信，那就非常需要考虑加入Vuex来让你有条不紊地处理错综复杂的通信。\n\n## 一个简单的例子\nVuex官方文档给出了一份很详细的[入门教程](http://vuex.vuejs.org/zh-cn/tutorial.html)，其中的例子 -- 计数器的流程图是这样的：\n\n![](http://file.do.yy.com/group3/M04/CD/93/tz0GSFeOMj2AC5iPAACKAQnp38Q432.png)\n\n这就是Vuex的执行流程，用户操作产生一个action，然后dispatch到Mutation函数，Mutation函数根据这个dispatch的描述信息去执行对应的操作，同时，这个dispatch也可以传递一些额外的参数。最终通过Mutation函数对Store进行修改，**也只能通过这种方式修改Store**，保证了单一控制源。然后可以通过Getter函数去读取Store里面的数据。\n\n我们在开发时的步骤就是：\n> 1. 在store里里面声明所需要的数据\n> 2. 在Mutation里面注册一个函数，也就是一个描述语\n> 3. 在actions里面注册一个action，并dispatch对应的事件\n> 4. 将action绑定到页面的组件上\n> 5. 完毕！\n\n另外，使用vuejs开发时，有一个不可或缺的工具，[vue-devtools](https://github.com/vuejs/vue-devtools)，可以在工具栏中实时地观察vm的数据，可以**查看所有dispatch的记录**，这样一来，你对于应用的所有状态了如指掌。\n\n![](http://file.do.yy.com/group3/M00/CD/93/tz0GSFeOMj2AeoyQAACDwiTCd8c311.png)\n\n## 总结\n> 1. 整个应用的数据流是单向的\n> 2. actions 除了分发 mutations 应当尽量避免其他副作用。\n> 3. mutation 必须是同步函数，将全部的异步操作都放在actions中。所有类似数据获取的异步操作细节都应封装在 actions 里面。\n","source":"_posts/2016-07-19-vuex.md","raw":"---\ntitle: Vuex使用总结\ncategories: Javascript\ntags: [vue, vuex]\n---\n\n## Vuex是什么?\n> Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构。它借鉴了 Flux 和 Redux 的设计思想，但简化了概念，并且采用了一种为能更好发挥 Vue.js 数据响应机制而专门设计的实现。\n\n## 什么情况下使用Vuex？\n当你的应用规模比较小的时候，你并不需要使用Vuex，因为在按照Vuex规定的格式来规划文件以及书写规范还是需要花一些时间和精力。对于中型以上规模的SPA，有很多很多的组件，彼此之间相互通信，这时候，Vuex就可以发挥很大的作用。\n\n## 没有使用Vuex的情况下，组件之间是如何通信的?\n这种情况会有两种情景：\n\n> 父子组件之间的通信\n> 同级子组件之间的通信\n\n第一种的解决方法是使用Props传参数，将父组件的数据传递给子组件，反过来，子组件也可以改变传入的参数，进而改变父组件的数据。\n\n第二中解决方法就比较繁琐了，数据的流向是，子组件 -> 父组件 -> 另外一个子组件。可以想象，当应用规模变大时，组件之间数据的传递会越来越复杂，如果在某个环节出了bug，可能需要花费很大的精力才能定位。而且，这也会导致子组件之间紧密耦合，导致这些组件没法被复用。\n\n也就是说，如果你的应用很多都是父子组件之间的通信，那么往往比较简单，暂时可以不考虑加入Vuex，但如果是很多同级子组件之间的通信，那就非常需要考虑加入Vuex来让你有条不紊地处理错综复杂的通信。\n\n## 一个简单的例子\nVuex官方文档给出了一份很详细的[入门教程](http://vuex.vuejs.org/zh-cn/tutorial.html)，其中的例子 -- 计数器的流程图是这样的：\n\n![](http://file.do.yy.com/group3/M04/CD/93/tz0GSFeOMj2AC5iPAACKAQnp38Q432.png)\n\n这就是Vuex的执行流程，用户操作产生一个action，然后dispatch到Mutation函数，Mutation函数根据这个dispatch的描述信息去执行对应的操作，同时，这个dispatch也可以传递一些额外的参数。最终通过Mutation函数对Store进行修改，**也只能通过这种方式修改Store**，保证了单一控制源。然后可以通过Getter函数去读取Store里面的数据。\n\n我们在开发时的步骤就是：\n> 1. 在store里里面声明所需要的数据\n> 2. 在Mutation里面注册一个函数，也就是一个描述语\n> 3. 在actions里面注册一个action，并dispatch对应的事件\n> 4. 将action绑定到页面的组件上\n> 5. 完毕！\n\n另外，使用vuejs开发时，有一个不可或缺的工具，[vue-devtools](https://github.com/vuejs/vue-devtools)，可以在工具栏中实时地观察vm的数据，可以**查看所有dispatch的记录**，这样一来，你对于应用的所有状态了如指掌。\n\n![](http://file.do.yy.com/group3/M00/CD/93/tz0GSFeOMj2AeoyQAACDwiTCd8c311.png)\n\n## 总结\n> 1. 整个应用的数据流是单向的\n> 2. actions 除了分发 mutations 应当尽量避免其他副作用。\n> 3. mutation 必须是同步函数，将全部的异步操作都放在actions中。所有类似数据获取的异步操作细节都应封装在 actions 里面。\n","slug":"2016-07-19-vuex","published":1,"date":"2016-07-19T13:54:24.000Z","updated":"2016-08-07T08:57:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr8r000ly3on0qtu7qhn","content":"<h2 id=\"Vuex是什么\"><a href=\"#Vuex是什么\" class=\"headerlink\" title=\"Vuex是什么?\"></a>Vuex是什么?</h2><blockquote>\n<p>Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构。它借鉴了 Flux 和 Redux 的设计思想，但简化了概念，并且采用了一种为能更好发挥 Vue.js 数据响应机制而专门设计的实现。</p>\n</blockquote>\n<h2 id=\"什么情况下使用Vuex？\"><a href=\"#什么情况下使用Vuex？\" class=\"headerlink\" title=\"什么情况下使用Vuex？\"></a>什么情况下使用Vuex？</h2><p>当你的应用规模比较小的时候，你并不需要使用Vuex，因为在按照Vuex规定的格式来规划文件以及书写规范还是需要花一些时间和精力。对于中型以上规模的SPA，有很多很多的组件，彼此之间相互通信，这时候，Vuex就可以发挥很大的作用。</p>\n<h2 id=\"没有使用Vuex的情况下，组件之间是如何通信的\"><a href=\"#没有使用Vuex的情况下，组件之间是如何通信的\" class=\"headerlink\" title=\"没有使用Vuex的情况下，组件之间是如何通信的?\"></a>没有使用Vuex的情况下，组件之间是如何通信的?</h2><p>这种情况会有两种情景：</p>\n<blockquote>\n<p>父子组件之间的通信<br>同级子组件之间的通信</p>\n</blockquote>\n<p>第一种的解决方法是使用Props传参数，将父组件的数据传递给子组件，反过来，子组件也可以改变传入的参数，进而改变父组件的数据。</p>\n<p>第二中解决方法就比较繁琐了，数据的流向是，子组件 -&gt; 父组件 -&gt; 另外一个子组件。可以想象，当应用规模变大时，组件之间数据的传递会越来越复杂，如果在某个环节出了bug，可能需要花费很大的精力才能定位。而且，这也会导致子组件之间紧密耦合，导致这些组件没法被复用。</p>\n<p>也就是说，如果你的应用很多都是父子组件之间的通信，那么往往比较简单，暂时可以不考虑加入Vuex，但如果是很多同级子组件之间的通信，那就非常需要考虑加入Vuex来让你有条不紊地处理错综复杂的通信。</p>\n<h2 id=\"一个简单的例子\"><a href=\"#一个简单的例子\" class=\"headerlink\" title=\"一个简单的例子\"></a>一个简单的例子</h2><p>Vuex官方文档给出了一份很详细的<a href=\"http://vuex.vuejs.org/zh-cn/tutorial.html\" target=\"_blank\" rel=\"external\">入门教程</a>，其中的例子 – 计数器的流程图是这样的：</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/93/tz0GSFeOMj2AC5iPAACKAQnp38Q432.png\" alt=\"\"></p>\n<p>这就是Vuex的执行流程，用户操作产生一个action，然后dispatch到Mutation函数，Mutation函数根据这个dispatch的描述信息去执行对应的操作，同时，这个dispatch也可以传递一些额外的参数。最终通过Mutation函数对Store进行修改，<strong>也只能通过这种方式修改Store</strong>，保证了单一控制源。然后可以通过Getter函数去读取Store里面的数据。</p>\n<p>我们在开发时的步骤就是：</p>\n<blockquote>\n<ol>\n<li>在store里里面声明所需要的数据</li>\n<li>在Mutation里面注册一个函数，也就是一个描述语</li>\n<li>在actions里面注册一个action，并dispatch对应的事件</li>\n<li>将action绑定到页面的组件上</li>\n<li>完毕！</li>\n</ol>\n</blockquote>\n<p>另外，使用vuejs开发时，有一个不可或缺的工具，<a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"external\">vue-devtools</a>，可以在工具栏中实时地观察vm的数据，可以<strong>查看所有dispatch的记录</strong>，这样一来，你对于应用的所有状态了如指掌。</p>\n<p><img src=\"http://file.do.yy.com/group3/M00/CD/93/tz0GSFeOMj2AeoyQAACDwiTCd8c311.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<ol>\n<li>整个应用的数据流是单向的</li>\n<li>actions 除了分发 mutations 应当尽量避免其他副作用。</li>\n<li>mutation 必须是同步函数，将全部的异步操作都放在actions中。所有类似数据获取的异步操作细节都应封装在 actions 里面。</li>\n</ol>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Vuex是什么\"><a href=\"#Vuex是什么\" class=\"headerlink\" title=\"Vuex是什么?\"></a>Vuex是什么?</h2><blockquote>\n<p>Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构。它借鉴了 Flux 和 Redux 的设计思想，但简化了概念，并且采用了一种为能更好发挥 Vue.js 数据响应机制而专门设计的实现。</p>\n</blockquote>\n<h2 id=\"什么情况下使用Vuex？\"><a href=\"#什么情况下使用Vuex？\" class=\"headerlink\" title=\"什么情况下使用Vuex？\"></a>什么情况下使用Vuex？</h2><p>当你的应用规模比较小的时候，你并不需要使用Vuex，因为在按照Vuex规定的格式来规划文件以及书写规范还是需要花一些时间和精力。对于中型以上规模的SPA，有很多很多的组件，彼此之间相互通信，这时候，Vuex就可以发挥很大的作用。</p>\n<h2 id=\"没有使用Vuex的情况下，组件之间是如何通信的\"><a href=\"#没有使用Vuex的情况下，组件之间是如何通信的\" class=\"headerlink\" title=\"没有使用Vuex的情况下，组件之间是如何通信的?\"></a>没有使用Vuex的情况下，组件之间是如何通信的?</h2><p>这种情况会有两种情景：</p>\n<blockquote>\n<p>父子组件之间的通信<br>同级子组件之间的通信</p>\n</blockquote>\n<p>第一种的解决方法是使用Props传参数，将父组件的数据传递给子组件，反过来，子组件也可以改变传入的参数，进而改变父组件的数据。</p>\n<p>第二中解决方法就比较繁琐了，数据的流向是，子组件 -&gt; 父组件 -&gt; 另外一个子组件。可以想象，当应用规模变大时，组件之间数据的传递会越来越复杂，如果在某个环节出了bug，可能需要花费很大的精力才能定位。而且，这也会导致子组件之间紧密耦合，导致这些组件没法被复用。</p>\n<p>也就是说，如果你的应用很多都是父子组件之间的通信，那么往往比较简单，暂时可以不考虑加入Vuex，但如果是很多同级子组件之间的通信，那就非常需要考虑加入Vuex来让你有条不紊地处理错综复杂的通信。</p>\n<h2 id=\"一个简单的例子\"><a href=\"#一个简单的例子\" class=\"headerlink\" title=\"一个简单的例子\"></a>一个简单的例子</h2><p>Vuex官方文档给出了一份很详细的<a href=\"http://vuex.vuejs.org/zh-cn/tutorial.html\">入门教程</a>，其中的例子 – 计数器的流程图是这样的：</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/93/tz0GSFeOMj2AC5iPAACKAQnp38Q432.png\" alt=\"\"></p>\n<p>这就是Vuex的执行流程，用户操作产生一个action，然后dispatch到Mutation函数，Mutation函数根据这个dispatch的描述信息去执行对应的操作，同时，这个dispatch也可以传递一些额外的参数。最终通过Mutation函数对Store进行修改，<strong>也只能通过这种方式修改Store</strong>，保证了单一控制源。然后可以通过Getter函数去读取Store里面的数据。</p>\n<p>我们在开发时的步骤就是：</p>\n<blockquote>\n<ol>\n<li>在store里里面声明所需要的数据</li>\n<li>在Mutation里面注册一个函数，也就是一个描述语</li>\n<li>在actions里面注册一个action，并dispatch对应的事件</li>\n<li>将action绑定到页面的组件上</li>\n<li>完毕！</li>\n</ol>\n</blockquote>\n<p>另外，使用vuejs开发时，有一个不可或缺的工具，<a href=\"https://github.com/vuejs/vue-devtools\">vue-devtools</a>，可以在工具栏中实时地观察vm的数据，可以<strong>查看所有dispatch的记录</strong>，这样一来，你对于应用的所有状态了如指掌。</p>\n<p><img src=\"http://file.do.yy.com/group3/M00/CD/93/tz0GSFeOMj2AeoyQAACDwiTCd8c311.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<ol>\n<li>整个应用的数据流是单向的</li>\n<li>actions 除了分发 mutations 应当尽量避免其他副作用。</li>\n<li>mutation 必须是同步函数，将全部的异步操作都放在actions中。所有类似数据获取的异步操作细节都应封装在 actions 里面。</li>\n</ol>\n</blockquote>\n"},{"title":"使用vue-loader进行组件化开发","_content":"\n一般我们是按照文件类型来组织目录，也就是将html、css、js文件放在各自的文件夹中，然后根据路径在页面中引用对应的资源。这样做的弊端有\n\n> 1. 多人协作，容易造成冲突\n> 2. 不清楚哪里引用了这个文件，导致不敢随意移动和修改\n> 3. 寻找对应资源繁琐，需要逐个打开目录\n\n## 组件化开发是怎样的？\n将html，css，js整合到一份文件里面，成为一个独立的组件。页面就相当于一个容器，装填许多的组件。组件化开发的基本理念是这样的（图引[张云龙](https://www.zhihu.com/people/fouber)）\n\n![components1](http://file.do.yy.com/group3/M04/CD/91/tz0MYFePEVCAErg8AADQj2Vx_yE826.png)\n\n一个项目的开发可以这样组织（图引[张云龙](https://www.zhihu.com/people/fouber)）\n\n![components2](http://file.do.yy.com/group3/M04/CD/94/tz0GSFePEVCAQrBvAABOxVF9wgs511.png)\n\n[vue-loader](https://github.com/vuejs/vue-loader)就是来做这件事的，它是webpack的一个插件，可以实现组件化开发。我们只需要新建一个.vue文件，然后把html，css，js放到文件中，vue就会帮我们搞定一切。vue的组件文件的后缀名是.vue，它里面的写法是这样的：\n\n![](http://file.do.yy.com/group3/M04/CD/91/tz0MYFePEV2AeND1AAHbqgkHl5w930.png)\n\n最后，我们的任务就是开发一个个组件，然后将之放到页面中，并解决组件之间的通信。\n\n## vue-router\n[vue-router](http://router.vuejs.org/zh-cn/)是vue官方做的路由插件，可以根据路由显示不同的组件，也就是可以用来做SPA（单页应用），它的写法是这样的\n\n``` js\nrouter.map({\n  '/news/:page': {\n    component: NewsView\n  },\n  '/user/:id': {\n    component: UserView\n  },\n  '/item/:id': {\n    component: ItemView\n  }\n})\n```\n\n然后在页面中添加入口\n\n``` js\n<router-view></router-view>\n```\n\n可以添加一些transition动画，做比较酷炫的切换。\n\n``` js\n<router-view\n  transition\n  transition-mode=\"out-in\">\n</router-view>\n```\n\n可以在route方法中取得路由的参数\n\n``` js\nroute: {\n  data ({ to }) {\n    const page = to.params.page\n  }\n},\n```\n\n## 组件的规划\n组件可以分为两层，分别是views和components。views组件用来做路由的入口，相当于一个页面，而components则是颗粒化比较小的组件，放在views组件里面。\n\n## 组件之间的通信\n当页面逻辑比较简单时，只需要使用Props属性进行传参即可。对于中型规模以上，数据逻辑比较复杂的应用，可以考虑引入[Vuex](https://github.com/vuejs/vuex)集中管理状态。\n\n## 例子\n> 1. [vue-loader-example](https://github.com/vuejs/vue-loader-example)\n> 2. [vue-hackernews](https://github.com/vuejs/vue-hackernews)\n> 3. [vue-mobile](https://github.com/lihongxun945/vue-mobile)\n> 4. [vue-zhihu-daily](https://github.com/hilongjw/vue-zhihu-daily)\n\n\n## 参考资料\n> 1. [前端工程——基础篇](https://github.com/fouber/blog/issues/10)\n> 2. [告别刀耕火种:浅谈VisMooc的前端工程化](http://chenzhutian.org/blog/2016/%E6%B5%85%E8%B0%88VisMooc%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/)\n","source":"_posts/2016-07-20-vue-loader.md","raw":"---\ntitle: 使用vue-loader进行组件化开发\ncategories: Javascript\ntags: [vue, vue-loader, 组件化]\n---\n\n一般我们是按照文件类型来组织目录，也就是将html、css、js文件放在各自的文件夹中，然后根据路径在页面中引用对应的资源。这样做的弊端有\n\n> 1. 多人协作，容易造成冲突\n> 2. 不清楚哪里引用了这个文件，导致不敢随意移动和修改\n> 3. 寻找对应资源繁琐，需要逐个打开目录\n\n## 组件化开发是怎样的？\n将html，css，js整合到一份文件里面，成为一个独立的组件。页面就相当于一个容器，装填许多的组件。组件化开发的基本理念是这样的（图引[张云龙](https://www.zhihu.com/people/fouber)）\n\n![components1](http://file.do.yy.com/group3/M04/CD/91/tz0MYFePEVCAErg8AADQj2Vx_yE826.png)\n\n一个项目的开发可以这样组织（图引[张云龙](https://www.zhihu.com/people/fouber)）\n\n![components2](http://file.do.yy.com/group3/M04/CD/94/tz0GSFePEVCAQrBvAABOxVF9wgs511.png)\n\n[vue-loader](https://github.com/vuejs/vue-loader)就是来做这件事的，它是webpack的一个插件，可以实现组件化开发。我们只需要新建一个.vue文件，然后把html，css，js放到文件中，vue就会帮我们搞定一切。vue的组件文件的后缀名是.vue，它里面的写法是这样的：\n\n![](http://file.do.yy.com/group3/M04/CD/91/tz0MYFePEV2AeND1AAHbqgkHl5w930.png)\n\n最后，我们的任务就是开发一个个组件，然后将之放到页面中，并解决组件之间的通信。\n\n## vue-router\n[vue-router](http://router.vuejs.org/zh-cn/)是vue官方做的路由插件，可以根据路由显示不同的组件，也就是可以用来做SPA（单页应用），它的写法是这样的\n\n``` js\nrouter.map({\n  '/news/:page': {\n    component: NewsView\n  },\n  '/user/:id': {\n    component: UserView\n  },\n  '/item/:id': {\n    component: ItemView\n  }\n})\n```\n\n然后在页面中添加入口\n\n``` js\n<router-view></router-view>\n```\n\n可以添加一些transition动画，做比较酷炫的切换。\n\n``` js\n<router-view\n  transition\n  transition-mode=\"out-in\">\n</router-view>\n```\n\n可以在route方法中取得路由的参数\n\n``` js\nroute: {\n  data ({ to }) {\n    const page = to.params.page\n  }\n},\n```\n\n## 组件的规划\n组件可以分为两层，分别是views和components。views组件用来做路由的入口，相当于一个页面，而components则是颗粒化比较小的组件，放在views组件里面。\n\n## 组件之间的通信\n当页面逻辑比较简单时，只需要使用Props属性进行传参即可。对于中型规模以上，数据逻辑比较复杂的应用，可以考虑引入[Vuex](https://github.com/vuejs/vuex)集中管理状态。\n\n## 例子\n> 1. [vue-loader-example](https://github.com/vuejs/vue-loader-example)\n> 2. [vue-hackernews](https://github.com/vuejs/vue-hackernews)\n> 3. [vue-mobile](https://github.com/lihongxun945/vue-mobile)\n> 4. [vue-zhihu-daily](https://github.com/hilongjw/vue-zhihu-daily)\n\n\n## 参考资料\n> 1. [前端工程——基础篇](https://github.com/fouber/blog/issues/10)\n> 2. [告别刀耕火种:浅谈VisMooc的前端工程化](http://chenzhutian.org/blog/2016/%E6%B5%85%E8%B0%88VisMooc%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/)\n","slug":"2016-07-20-vue-loader","published":1,"date":"2016-07-20T05:44:50.000Z","updated":"2016-08-07T08:57:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr8t000ny3on7nhcmqx0","content":"<p>一般我们是按照文件类型来组织目录，也就是将html、css、js文件放在各自的文件夹中，然后根据路径在页面中引用对应的资源。这样做的弊端有</p>\n<blockquote>\n<ol>\n<li>多人协作，容易造成冲突</li>\n<li>不清楚哪里引用了这个文件，导致不敢随意移动和修改</li>\n<li>寻找对应资源繁琐，需要逐个打开目录</li>\n</ol>\n</blockquote>\n<h2 id=\"组件化开发是怎样的？\"><a href=\"#组件化开发是怎样的？\" class=\"headerlink\" title=\"组件化开发是怎样的？\"></a>组件化开发是怎样的？</h2><p>将html，css，js整合到一份文件里面，成为一个独立的组件。页面就相当于一个容器，装填许多的组件。组件化开发的基本理念是这样的（图引<a href=\"https://www.zhihu.com/people/fouber\" target=\"_blank\" rel=\"external\">张云龙</a>）</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/91/tz0MYFePEVCAErg8AADQj2Vx_yE826.png\" alt=\"components1\"></p>\n<p>一个项目的开发可以这样组织（图引<a href=\"https://www.zhihu.com/people/fouber\" target=\"_blank\" rel=\"external\">张云龙</a>）</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/94/tz0GSFePEVCAQrBvAABOxVF9wgs511.png\" alt=\"components2\"></p>\n<p><a href=\"https://github.com/vuejs/vue-loader\" target=\"_blank\" rel=\"external\">vue-loader</a>就是来做这件事的，它是webpack的一个插件，可以实现组件化开发。我们只需要新建一个.vue文件，然后把html，css，js放到文件中，vue就会帮我们搞定一切。vue的组件文件的后缀名是.vue，它里面的写法是这样的：</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/91/tz0MYFePEV2AeND1AAHbqgkHl5w930.png\" alt=\"\"></p>\n<p>最后，我们的任务就是开发一个个组件，然后将之放到页面中，并解决组件之间的通信。</p>\n<h2 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h2><p><a href=\"http://router.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"external\">vue-router</a>是vue官方做的路由插件，可以根据路由显示不同的组件，也就是可以用来做SPA（单页应用），它的写法是这样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.map(&#123;</span><br><span class=\"line\">  <span class=\"string\">'/news/:page'</span>: &#123;</span><br><span class=\"line\">    component: NewsView</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">'/user/:id'</span>: &#123;</span><br><span class=\"line\">    component: UserView</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">'/item/:id'</span>: &#123;</span><br><span class=\"line\">    component: ItemView</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>然后在页面中添加入口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>\n<p>可以添加一些transition动画，做比较酷炫的切换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view</span><br><span class=\"line\">  transition</span><br><span class=\"line\">  transition-mode=<span class=\"string\">\"out-in\"</span>&gt;</span><br><span class=\"line\">&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>\n<p>可以在route方法中取得路由的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route: &#123;</span><br><span class=\"line\">  data (&#123; to &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> page = to.params.page</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"组件的规划\"><a href=\"#组件的规划\" class=\"headerlink\" title=\"组件的规划\"></a>组件的规划</h2><p>组件可以分为两层，分别是views和components。views组件用来做路由的入口，相当于一个页面，而components则是颗粒化比较小的组件，放在views组件里面。</p>\n<h2 id=\"组件之间的通信\"><a href=\"#组件之间的通信\" class=\"headerlink\" title=\"组件之间的通信\"></a>组件之间的通信</h2><p>当页面逻辑比较简单时，只需要使用Props属性进行传参即可。对于中型规模以上，数据逻辑比较复杂的应用，可以考虑引入<a href=\"https://github.com/vuejs/vuex\" target=\"_blank\" rel=\"external\">Vuex</a>集中管理状态。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><blockquote>\n<ol>\n<li><a href=\"https://github.com/vuejs/vue-loader-example\" target=\"_blank\" rel=\"external\">vue-loader-example</a></li>\n<li><a href=\"https://github.com/vuejs/vue-hackernews\" target=\"_blank\" rel=\"external\">vue-hackernews</a></li>\n<li><a href=\"https://github.com/lihongxun945/vue-mobile\" target=\"_blank\" rel=\"external\">vue-mobile</a></li>\n<li><a href=\"https://github.com/hilongjw/vue-zhihu-daily\" target=\"_blank\" rel=\"external\">vue-zhihu-daily</a></li>\n</ol>\n</blockquote>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ol>\n<li><a href=\"https://github.com/fouber/blog/issues/10\" target=\"_blank\" rel=\"external\">前端工程——基础篇</a></li>\n<li><a href=\"http://chenzhutian.org/blog/2016/%E6%B5%85%E8%B0%88VisMooc%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/\" target=\"_blank\" rel=\"external\">告别刀耕火种:浅谈VisMooc的前端工程化</a></li>\n</ol>\n</blockquote>\n","excerpt":"","more":"<p>一般我们是按照文件类型来组织目录，也就是将html、css、js文件放在各自的文件夹中，然后根据路径在页面中引用对应的资源。这样做的弊端有</p>\n<blockquote>\n<ol>\n<li>多人协作，容易造成冲突</li>\n<li>不清楚哪里引用了这个文件，导致不敢随意移动和修改</li>\n<li>寻找对应资源繁琐，需要逐个打开目录</li>\n</ol>\n</blockquote>\n<h2 id=\"组件化开发是怎样的？\"><a href=\"#组件化开发是怎样的？\" class=\"headerlink\" title=\"组件化开发是怎样的？\"></a>组件化开发是怎样的？</h2><p>将html，css，js整合到一份文件里面，成为一个独立的组件。页面就相当于一个容器，装填许多的组件。组件化开发的基本理念是这样的（图引<a href=\"https://www.zhihu.com/people/fouber\">张云龙</a>）</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/91/tz0MYFePEVCAErg8AADQj2Vx_yE826.png\" alt=\"components1\"></p>\n<p>一个项目的开发可以这样组织（图引<a href=\"https://www.zhihu.com/people/fouber\">张云龙</a>）</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/94/tz0GSFePEVCAQrBvAABOxVF9wgs511.png\" alt=\"components2\"></p>\n<p><a href=\"https://github.com/vuejs/vue-loader\">vue-loader</a>就是来做这件事的，它是webpack的一个插件，可以实现组件化开发。我们只需要新建一个.vue文件，然后把html，css，js放到文件中，vue就会帮我们搞定一切。vue的组件文件的后缀名是.vue，它里面的写法是这样的：</p>\n<p><img src=\"http://file.do.yy.com/group3/M04/CD/91/tz0MYFePEV2AeND1AAHbqgkHl5w930.png\" alt=\"\"></p>\n<p>最后，我们的任务就是开发一个个组件，然后将之放到页面中，并解决组件之间的通信。</p>\n<h2 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h2><p><a href=\"http://router.vuejs.org/zh-cn/\">vue-router</a>是vue官方做的路由插件，可以根据路由显示不同的组件，也就是可以用来做SPA（单页应用），它的写法是这样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.map(&#123;</span><br><span class=\"line\">  <span class=\"string\">'/news/:page'</span>: &#123;</span><br><span class=\"line\">    component: NewsView</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">'/user/:id'</span>: &#123;</span><br><span class=\"line\">    component: UserView</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">'/item/:id'</span>: &#123;</span><br><span class=\"line\">    component: ItemView</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>然后在页面中添加入口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>\n<p>可以添加一些transition动画，做比较酷炫的切换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view</span><br><span class=\"line\">  transition</span><br><span class=\"line\">  transition-mode=<span class=\"string\">\"out-in\"</span>&gt;</span><br><span class=\"line\">&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>\n<p>可以在route方法中取得路由的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route: &#123;</span><br><span class=\"line\">  data (&#123; to &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> page = to.params.page</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"组件的规划\"><a href=\"#组件的规划\" class=\"headerlink\" title=\"组件的规划\"></a>组件的规划</h2><p>组件可以分为两层，分别是views和components。views组件用来做路由的入口，相当于一个页面，而components则是颗粒化比较小的组件，放在views组件里面。</p>\n<h2 id=\"组件之间的通信\"><a href=\"#组件之间的通信\" class=\"headerlink\" title=\"组件之间的通信\"></a>组件之间的通信</h2><p>当页面逻辑比较简单时，只需要使用Props属性进行传参即可。对于中型规模以上，数据逻辑比较复杂的应用，可以考虑引入<a href=\"https://github.com/vuejs/vuex\">Vuex</a>集中管理状态。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><blockquote>\n<ol>\n<li><a href=\"https://github.com/vuejs/vue-loader-example\">vue-loader-example</a></li>\n<li><a href=\"https://github.com/vuejs/vue-hackernews\">vue-hackernews</a></li>\n<li><a href=\"https://github.com/lihongxun945/vue-mobile\">vue-mobile</a></li>\n<li><a href=\"https://github.com/hilongjw/vue-zhihu-daily\">vue-zhihu-daily</a></li>\n</ol>\n</blockquote>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ol>\n<li><a href=\"https://github.com/fouber/blog/issues/10\">前端工程——基础篇</a></li>\n<li><a href=\"http://chenzhutian.org/blog/2016/%E6%B5%85%E8%B0%88VisMooc%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/\">告别刀耕火种:浅谈VisMooc的前端工程化</a></li>\n</ol>\n</blockquote>\n"},{"title":"Nginx学习笔记","_content":"\n安装\n\n```\nbrew install nginx\n```\n\n## 入门文档\n\n[文档](http://nginx.org/en/docs/beginners_guide.html)\n\n## Nginx是做什么的？基本流程是怎样的？\n\n首先，有一个很重要的概念，就是**主从模式**，指的是由一个主进程（master）控制几个子进程（worker），用图片表示如下\n\n主进程可以控制子程序的创建与退出（销毁），当一个主进程接收到一个url请求时，会读取nigix的配置（.conf结尾，比如niginx），然后会根据配置，会将url发放到对应的子进程，所以，主进程并不直接处理请求，只是起到一个控制的作用，最终还是子进程来处理，而nginx存在于主、子进程的中间，起到一个中间层的作用。\n\n## 基本命令\n\n### 启动\n\n```\nnginx\n```\n\n### 控制\n\n```\nnginx -s signal\n```\n\nsignal可以是\n\n- stop — 强制退出进程\n- quit — 等进程处理完手上的事情之后退出\n- reload — 重启\n- reopen — 重新打开log日志文件\n\n## 实例\n\n### 启动nginx\n\n安装好nginx之后，启动nginx，打开localhost:8080（默认），就可以看到nignx默认的欢迎界面，然后就可以打开nignx的配置文件\n\n```\n/usr/local/etc/nginx/nginx.conf\n```\n\n然后就可以修改配置，重启，看看效果，先配置一个最简单的\n\n```\nhttp {\n  server {\n\tlisten 8080;\n    location / {\n      root /Users/raimonfuns/www\n    }\n    location /images/ {\n      root /Users/raimonfuns/www\n    }\n  }\n}\n```\n\n当访问localhost:8080时，服务器返回/Users/raimonfuns/www/index.html\n\n当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png\n\nnginx也经常用来做代理，也就是\n\n> 根据不同的路由，访问不同的服务\n\n```\nhttp {\n  server {\n    listen 8080;\n    location / {\n      proxy_pass http://localhost:8080;\n    }\n    location /pages/ {\n      root /users/raimonfuns/Public/www/;\n    }\n  }\n}\n```\n\n当访问localhost:8080时，服务器返回http://localhost:8080/index.html（这就是代理）\n\n当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png（没有代理，访问原来的服务）\n\n## 负载均衡\n\n负载均衡通俗一点来讲就是平均工作量。就好比餐厅里面有很多厨师，当有一桌菜需要做时，服务员就会根据厨师们手上的事情来分配工作量，尽量平衡每个厨师的工作量，以免出现某个厨师累垮了，而另外一个厨师没事干。\n\n当主进程接受到一个请求时，nginx会根据子进程的繁忙程度来指定由哪个进程处理这个请求，平衡每个进程的工作量，从而提高稳定性，这就是负载均衡。\n","source":"_posts/2016-08-07-nginx.md","raw":"---\ntitle: Nginx学习笔记\ncategories: 服务端\ntags: Nginx\n---\n\n安装\n\n```\nbrew install nginx\n```\n\n## 入门文档\n\n[文档](http://nginx.org/en/docs/beginners_guide.html)\n\n## Nginx是做什么的？基本流程是怎样的？\n\n首先，有一个很重要的概念，就是**主从模式**，指的是由一个主进程（master）控制几个子进程（worker），用图片表示如下\n\n主进程可以控制子程序的创建与退出（销毁），当一个主进程接收到一个url请求时，会读取nigix的配置（.conf结尾，比如niginx），然后会根据配置，会将url发放到对应的子进程，所以，主进程并不直接处理请求，只是起到一个控制的作用，最终还是子进程来处理，而nginx存在于主、子进程的中间，起到一个中间层的作用。\n\n## 基本命令\n\n### 启动\n\n```\nnginx\n```\n\n### 控制\n\n```\nnginx -s signal\n```\n\nsignal可以是\n\n- stop — 强制退出进程\n- quit — 等进程处理完手上的事情之后退出\n- reload — 重启\n- reopen — 重新打开log日志文件\n\n## 实例\n\n### 启动nginx\n\n安装好nginx之后，启动nginx，打开localhost:8080（默认），就可以看到nignx默认的欢迎界面，然后就可以打开nignx的配置文件\n\n```\n/usr/local/etc/nginx/nginx.conf\n```\n\n然后就可以修改配置，重启，看看效果，先配置一个最简单的\n\n```\nhttp {\n  server {\n\tlisten 8080;\n    location / {\n      root /Users/raimonfuns/www\n    }\n    location /images/ {\n      root /Users/raimonfuns/www\n    }\n  }\n}\n```\n\n当访问localhost:8080时，服务器返回/Users/raimonfuns/www/index.html\n\n当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png\n\nnginx也经常用来做代理，也就是\n\n> 根据不同的路由，访问不同的服务\n\n```\nhttp {\n  server {\n    listen 8080;\n    location / {\n      proxy_pass http://localhost:8080;\n    }\n    location /pages/ {\n      root /users/raimonfuns/Public/www/;\n    }\n  }\n}\n```\n\n当访问localhost:8080时，服务器返回http://localhost:8080/index.html（这就是代理）\n\n当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png（没有代理，访问原来的服务）\n\n## 负载均衡\n\n负载均衡通俗一点来讲就是平均工作量。就好比餐厅里面有很多厨师，当有一桌菜需要做时，服务员就会根据厨师们手上的事情来分配工作量，尽量平衡每个厨师的工作量，以免出现某个厨师累垮了，而另外一个厨师没事干。\n\n当主进程接受到一个请求时，nginx会根据子进程的繁忙程度来指定由哪个进程处理这个请求，平衡每个进程的工作量，从而提高稳定性，这就是负载均衡。\n","slug":"2016-08-07-nginx","published":1,"date":"2016-08-07T08:47:20.000Z","updated":"2016-10-24T05:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr8x000oy3onlzfhbc0w","content":"<p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"入门文档\"><a href=\"#入门文档\" class=\"headerlink\" title=\"入门文档\"></a>入门文档</h2><p><a href=\"http://nginx.org/en/docs/beginners_guide.html\" target=\"_blank\" rel=\"external\">文档</a></p>\n<h2 id=\"Nginx是做什么的？基本流程是怎样的？\"><a href=\"#Nginx是做什么的？基本流程是怎样的？\" class=\"headerlink\" title=\"Nginx是做什么的？基本流程是怎样的？\"></a>Nginx是做什么的？基本流程是怎样的？</h2><p>首先，有一个很重要的概念，就是<strong>主从模式</strong>，指的是由一个主进程（master）控制几个子进程（worker），用图片表示如下</p>\n<p>主进程可以控制子程序的创建与退出（销毁），当一个主进程接收到一个url请求时，会读取nigix的配置（.conf结尾，比如niginx），然后会根据配置，会将url发放到对应的子进程，所以，主进程并不直接处理请求，只是起到一个控制的作用，最终还是子进程来处理，而nginx存在于主、子进程的中间，起到一个中间层的作用。</p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"控制\"><a href=\"#控制\" class=\"headerlink\" title=\"控制\"></a>控制</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s signal</span><br></pre></td></tr></table></figure>\n<p>signal可以是</p>\n<ul>\n<li>stop — 强制退出进程</li>\n<li>quit — 等进程处理完手上的事情之后退出</li>\n<li>reload — 重启</li>\n<li>reopen — 重新打开log日志文件</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h3><p>安装好nginx之后，启动nginx，打开localhost:8080（默认），就可以看到nignx默认的欢迎界面，然后就可以打开nignx的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>然后就可以修改配置，重启，看看效果，先配置一个最简单的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">\tlisten 8080;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      root /Users/raimonfuns/www</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /images/ &#123;</span><br><span class=\"line\">      root /Users/raimonfuns/www</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当访问localhost:8080时，服务器返回/Users/raimonfuns/www/index.html</p>\n<p>当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png</p>\n<p>nginx也经常用来做代理，也就是</p>\n<blockquote>\n<p>根据不同的路由，访问不同的服务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen 8080;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      proxy_pass http://localhost:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /pages/ &#123;</span><br><span class=\"line\">      root /users/raimonfuns/Public/www/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当访问localhost:8080时，服务器返回<a href=\"http://localhost:8080/index.html（这就是代理）\" target=\"_blank\" rel=\"external\">http://localhost:8080/index.html（这就是代理）</a></p>\n<p>当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png（没有代理，访问原来的服务）</p>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>负载均衡通俗一点来讲就是平均工作量。就好比餐厅里面有很多厨师，当有一桌菜需要做时，服务员就会根据厨师们手上的事情来分配工作量，尽量平衡每个厨师的工作量，以免出现某个厨师累垮了，而另外一个厨师没事干。</p>\n<p>当主进程接受到一个请求时，nginx会根据子进程的繁忙程度来指定由哪个进程处理这个请求，平衡每个进程的工作量，从而提高稳定性，这就是负载均衡。</p>\n","excerpt":"","more":"<p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"入门文档\"><a href=\"#入门文档\" class=\"headerlink\" title=\"入门文档\"></a>入门文档</h2><p><a href=\"http://nginx.org/en/docs/beginners_guide.html\">文档</a></p>\n<h2 id=\"Nginx是做什么的？基本流程是怎样的？\"><a href=\"#Nginx是做什么的？基本流程是怎样的？\" class=\"headerlink\" title=\"Nginx是做什么的？基本流程是怎样的？\"></a>Nginx是做什么的？基本流程是怎样的？</h2><p>首先，有一个很重要的概念，就是<strong>主从模式</strong>，指的是由一个主进程（master）控制几个子进程（worker），用图片表示如下</p>\n<p>主进程可以控制子程序的创建与退出（销毁），当一个主进程接收到一个url请求时，会读取nigix的配置（.conf结尾，比如niginx），然后会根据配置，会将url发放到对应的子进程，所以，主进程并不直接处理请求，只是起到一个控制的作用，最终还是子进程来处理，而nginx存在于主、子进程的中间，起到一个中间层的作用。</p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"控制\"><a href=\"#控制\" class=\"headerlink\" title=\"控制\"></a>控制</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s signal</span><br></pre></td></tr></table></figure>\n<p>signal可以是</p>\n<ul>\n<li>stop — 强制退出进程</li>\n<li>quit — 等进程处理完手上的事情之后退出</li>\n<li>reload — 重启</li>\n<li>reopen — 重新打开log日志文件</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h3><p>安装好nginx之后，启动nginx，打开localhost:8080（默认），就可以看到nignx默认的欢迎界面，然后就可以打开nignx的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>然后就可以修改配置，重启，看看效果，先配置一个最简单的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">\tlisten 8080;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      root /Users/raimonfuns/www</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /images/ &#123;</span><br><span class=\"line\">      root /Users/raimonfuns/www</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当访问localhost:8080时，服务器返回/Users/raimonfuns/www/index.html</p>\n<p>当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png</p>\n<p>nginx也经常用来做代理，也就是</p>\n<blockquote>\n<p>根据不同的路由，访问不同的服务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen 8080;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      proxy_pass http://localhost:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /pages/ &#123;</span><br><span class=\"line\">      root /users/raimonfuns/Public/www/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当访问localhost:8080时，服务器返回<a href=\"http://localhost:8080/index.html（这就是代理）\">http://localhost:8080/index.html（这就是代理）</a></p>\n<p>当访问localhost:8080/images/a.png时，服务器返回/Users/raimonfuns/www/images/a.png（没有代理，访问原来的服务）</p>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>负载均衡通俗一点来讲就是平均工作量。就好比餐厅里面有很多厨师，当有一桌菜需要做时，服务员就会根据厨师们手上的事情来分配工作量，尽量平衡每个厨师的工作量，以免出现某个厨师累垮了，而另外一个厨师没事干。</p>\n<p>当主进程接受到一个请求时，nginx会根据子进程的繁忙程度来指定由哪个进程处理这个请求，平衡每个进程的工作量，从而提高稳定性，这就是负载均衡。</p>\n"},{"title":"怎么提高开发效率呢？","_content":"\n在开发项目时，经常会掉进一些很耗时间的坑，一不留神，就到了下班时间，看一看自己完成的todo list，总是有几项没有完成，于是我就寻思，这样才能提高开发效率，在有限的时间里提高产出呢？后来我想出了一个办法\n\n- 对项目需求进行细分\n- 用番茄土豆软件，每个番茄对应一个小需求\n- 尽量在规定时间内完成需求\n- 如果时间到了还没完成，可以尽快做完，如有需要，可以再开一个番茄\n- 如果卡住了，没办法解决，先跳过，不要钻牛角尖\n- 当全部的番茄都完成时，再去完成、也就遗留的问题\n\n这样做的好处是什么？\n\n> 让自己清楚地知道应该做什么，并且在一定时间内保持较高的专注度，有规律地进行休息，还能避免被一个问题卡住而导致浪费大量的黄金时间\n","source":"_posts/2016-08-09-efficiency.md","raw":"---\ntitle: 怎么提高开发效率呢？\ncategories: 践行\n---\n\n在开发项目时，经常会掉进一些很耗时间的坑，一不留神，就到了下班时间，看一看自己完成的todo list，总是有几项没有完成，于是我就寻思，这样才能提高开发效率，在有限的时间里提高产出呢？后来我想出了一个办法\n\n- 对项目需求进行细分\n- 用番茄土豆软件，每个番茄对应一个小需求\n- 尽量在规定时间内完成需求\n- 如果时间到了还没完成，可以尽快做完，如有需要，可以再开一个番茄\n- 如果卡住了，没办法解决，先跳过，不要钻牛角尖\n- 当全部的番茄都完成时，再去完成、也就遗留的问题\n\n这样做的好处是什么？\n\n> 让自己清楚地知道应该做什么，并且在一定时间内保持较高的专注度，有规律地进行休息，还能避免被一个问题卡住而导致浪费大量的黄金时间\n","slug":"2016-08-09-efficiency","published":1,"date":"2016-08-09T14:17:40.000Z","updated":"2016-12-21T02:47:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr90000ry3oniqvxybp9","content":"<p>在开发项目时，经常会掉进一些很耗时间的坑，一不留神，就到了下班时间，看一看自己完成的todo list，总是有几项没有完成，于是我就寻思，这样才能提高开发效率，在有限的时间里提高产出呢？后来我想出了一个办法</p>\n<ul>\n<li>对项目需求进行细分</li>\n<li>用番茄土豆软件，每个番茄对应一个小需求</li>\n<li>尽量在规定时间内完成需求</li>\n<li>如果时间到了还没完成，可以尽快做完，如有需要，可以再开一个番茄</li>\n<li>如果卡住了，没办法解决，先跳过，不要钻牛角尖</li>\n<li>当全部的番茄都完成时，再去完成、也就遗留的问题</li>\n</ul>\n<p>这样做的好处是什么？</p>\n<blockquote>\n<p>让自己清楚地知道应该做什么，并且在一定时间内保持较高的专注度，有规律地进行休息，还能避免被一个问题卡住而导致浪费大量的黄金时间</p>\n</blockquote>\n","excerpt":"","more":"<p>在开发项目时，经常会掉进一些很耗时间的坑，一不留神，就到了下班时间，看一看自己完成的todo list，总是有几项没有完成，于是我就寻思，这样才能提高开发效率，在有限的时间里提高产出呢？后来我想出了一个办法</p>\n<ul>\n<li>对项目需求进行细分</li>\n<li>用番茄土豆软件，每个番茄对应一个小需求</li>\n<li>尽量在规定时间内完成需求</li>\n<li>如果时间到了还没完成，可以尽快做完，如有需要，可以再开一个番茄</li>\n<li>如果卡住了，没办法解决，先跳过，不要钻牛角尖</li>\n<li>当全部的番茄都完成时，再去完成、也就遗留的问题</li>\n</ul>\n<p>这样做的好处是什么？</p>\n<blockquote>\n<p>让自己清楚地知道应该做什么，并且在一定时间内保持较高的专注度，有规律地进行休息，还能避免被一个问题卡住而导致浪费大量的黄金时间</p>\n</blockquote>\n"},{"title":"Node学习笔记：Global对象","_content":"\n## REPL环境\n\n> 在Node.js中，为了使开发者方便测试JS代码，提供了一个叫做*REPL*（Read-Eval-Print-Loop）的可交互式运行环境。在该环境中，开发者可以输入任何JS代码，按下回车后，REPL环境中将显示表达式的运行结果。\n\n## 全局对象与全局变量\n\n### 全局对象\n\n- Global：Node的全局对象，类似于浏览器的window。\n- process：Node所处的当前进程。\n- console：Node内置的console模块。\n\n### 全局函数\n\n- setTimeout\n- clearTimeout\n- setInterval\n- clearInterval\n- require：用于加载模块。\n- Buffer：用于操作二进制数据。\n\n### 全局变量\n\n- __filename：当前运行的脚本文件名。\n- __dirname：当前脚本所在的目录。\n\n注意：这两个变量不能直接在REPL中访问，只能在js文件中访问。\n\n### module.exports和exports\n\n不同的模块之间怎么共享代码呢？使用Global？不可以，这样会污染全局变量，所以应该使用的是CommonJS规范的模块化功能。\n\n模块通过module.exports对外提供代码，一般情况下module.exports和exports引用的是同一个对象，但不改变它们的引用时，不会有任何问题。当引用被改变了，CommonJS导出的永远是module.exports指向的对象。\n","source":"_posts/2016-08-10-node_global.md","raw":"---\ntitle: Node学习笔记：Global对象\ncategories: node\ntags: [node]\n---\n\n## REPL环境\n\n> 在Node.js中，为了使开发者方便测试JS代码，提供了一个叫做*REPL*（Read-Eval-Print-Loop）的可交互式运行环境。在该环境中，开发者可以输入任何JS代码，按下回车后，REPL环境中将显示表达式的运行结果。\n\n## 全局对象与全局变量\n\n### 全局对象\n\n- Global：Node的全局对象，类似于浏览器的window。\n- process：Node所处的当前进程。\n- console：Node内置的console模块。\n\n### 全局函数\n\n- setTimeout\n- clearTimeout\n- setInterval\n- clearInterval\n- require：用于加载模块。\n- Buffer：用于操作二进制数据。\n\n### 全局变量\n\n- __filename：当前运行的脚本文件名。\n- __dirname：当前脚本所在的目录。\n\n注意：这两个变量不能直接在REPL中访问，只能在js文件中访问。\n\n### module.exports和exports\n\n不同的模块之间怎么共享代码呢？使用Global？不可以，这样会污染全局变量，所以应该使用的是CommonJS规范的模块化功能。\n\n模块通过module.exports对外提供代码，一般情况下module.exports和exports引用的是同一个对象，但不改变它们的引用时，不会有任何问题。当引用被改变了，CommonJS导出的永远是module.exports指向的对象。\n","slug":"2016-08-10-node_global","published":1,"date":"2016-08-10T13:03:15.000Z","updated":"2016-09-01T09:59:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr92000ty3on3dpzfsgm","content":"<h2 id=\"REPL环境\"><a href=\"#REPL环境\" class=\"headerlink\" title=\"REPL环境\"></a>REPL环境</h2><blockquote>\n<p>在Node.js中，为了使开发者方便测试JS代码，提供了一个叫做<em>REPL</em>（Read-Eval-Print-Loop）的可交互式运行环境。在该环境中，开发者可以输入任何JS代码，按下回车后，REPL环境中将显示表达式的运行结果。</p>\n</blockquote>\n<h2 id=\"全局对象与全局变量\"><a href=\"#全局对象与全局变量\" class=\"headerlink\" title=\"全局对象与全局变量\"></a>全局对象与全局变量</h2><h3 id=\"全局对象\"><a href=\"#全局对象\" class=\"headerlink\" title=\"全局对象\"></a>全局对象</h3><ul>\n<li>Global：Node的全局对象，类似于浏览器的window。</li>\n<li>process：Node所处的当前进程。</li>\n<li>console：Node内置的console模块。</li>\n</ul>\n<h3 id=\"全局函数\"><a href=\"#全局函数\" class=\"headerlink\" title=\"全局函数\"></a>全局函数</h3><ul>\n<li>setTimeout</li>\n<li>clearTimeout</li>\n<li>setInterval</li>\n<li>clearInterval</li>\n<li>require：用于加载模块。</li>\n<li>Buffer：用于操作二进制数据。</li>\n</ul>\n<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><ul>\n<li>__filename：当前运行的脚本文件名。</li>\n<li>__dirname：当前脚本所在的目录。</li>\n</ul>\n<p>注意：这两个变量不能直接在REPL中访问，只能在js文件中访问。</p>\n<h3 id=\"module-exports和exports\"><a href=\"#module-exports和exports\" class=\"headerlink\" title=\"module.exports和exports\"></a>module.exports和exports</h3><p>不同的模块之间怎么共享代码呢？使用Global？不可以，这样会污染全局变量，所以应该使用的是CommonJS规范的模块化功能。</p>\n<p>模块通过module.exports对外提供代码，一般情况下module.exports和exports引用的是同一个对象，但不改变它们的引用时，不会有任何问题。当引用被改变了，CommonJS导出的永远是module.exports指向的对象。</p>\n","excerpt":"","more":"<h2 id=\"REPL环境\"><a href=\"#REPL环境\" class=\"headerlink\" title=\"REPL环境\"></a>REPL环境</h2><blockquote>\n<p>在Node.js中，为了使开发者方便测试JS代码，提供了一个叫做<em>REPL</em>（Read-Eval-Print-Loop）的可交互式运行环境。在该环境中，开发者可以输入任何JS代码，按下回车后，REPL环境中将显示表达式的运行结果。</p>\n</blockquote>\n<h2 id=\"全局对象与全局变量\"><a href=\"#全局对象与全局变量\" class=\"headerlink\" title=\"全局对象与全局变量\"></a>全局对象与全局变量</h2><h3 id=\"全局对象\"><a href=\"#全局对象\" class=\"headerlink\" title=\"全局对象\"></a>全局对象</h3><ul>\n<li>Global：Node的全局对象，类似于浏览器的window。</li>\n<li>process：Node所处的当前进程。</li>\n<li>console：Node内置的console模块。</li>\n</ul>\n<h3 id=\"全局函数\"><a href=\"#全局函数\" class=\"headerlink\" title=\"全局函数\"></a>全局函数</h3><ul>\n<li>setTimeout</li>\n<li>clearTimeout</li>\n<li>setInterval</li>\n<li>clearInterval</li>\n<li>require：用于加载模块。</li>\n<li>Buffer：用于操作二进制数据。</li>\n</ul>\n<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><ul>\n<li>__filename：当前运行的脚本文件名。</li>\n<li>__dirname：当前脚本所在的目录。</li>\n</ul>\n<p>注意：这两个变量不能直接在REPL中访问，只能在js文件中访问。</p>\n<h3 id=\"module-exports和exports\"><a href=\"#module-exports和exports\" class=\"headerlink\" title=\"module.exports和exports\"></a>module.exports和exports</h3><p>不同的模块之间怎么共享代码呢？使用Global？不可以，这样会污染全局变量，所以应该使用的是CommonJS规范的模块化功能。</p>\n<p>模块通过module.exports对外提供代码，一般情况下module.exports和exports引用的是同一个对象，但不改变它们的引用时，不会有任何问题。当引用被改变了，CommonJS导出的永远是module.exports指向的对象。</p>\n"},{"title":"如何快速学习一门新技术？","_content":"学习要合理的分配注意力，把精力放在核心的问题上，而不是细枝末节。\n\n## 初学者容易掉入的死循环\n\n当学习一门新技术时，一旦有了 “为什么” 这个念头，学习者的大脑就会掉入一个无穷循环：\n\n> \"Why\" -> \"What\" -> \"Why\" -> \"What\" -> \"Why\" -> \"What\" -> \"Why\" -> \"What\"\n\n但问题是，当你目前还不懂这些知识时，你还无法解释清楚这些概念，所以你就摆脱不了这个循环，很容易被击溃。\n\n所以，初学东西时绝对不要用大脑**，而是 “用肌肉学习”，先模仿着做。初学阶段千万不要让“大脑”介入学习的过程，否则就会跳入What-Why的死循环中。\n\n> 程序世界深不可测，奇妙无比，想想一个小学生拿着一道高等数学题拼命解题是什么场景吧。\n\n所以要先**建立主干，再填枝叶**。\n\n## 快速学习的方法论\n\n- 上网找教程，跟着模仿，不要去修改，也不要问Why。\n- 做完第一遍教程之后，再做一遍，这次要把不懂的挑出来，但是先不要管这些问题。\n- 接着对“成果”做一些小修改，看看会有什么效果。\n- 把东西改得有效果了以后，再去查Why。\n- 全都弄懂了之后，融会贯通地再做一遍，或者做一个新的东西。\n\n## 梳理流程\n\n初学阶段最重要的是**梳理流程而不是总结规律**，初学者的知识量太少，总结规律就往往陷入What-Why的死循环。\n\n## 参考\n\n[新生大学: 如何在五天内快速 “学会” 一门技能](https://www.fooads.com/post/576b3bbe5faac6c967c12b11)\n\n[第二周周记](http://chenyunli6-blog.logdown.com/posts/776667-second-week-of-weekly)\n\n[我是怎样从零基础学习程序的](http://rebecca9201-blog.logdown.com/posts/776832-how-do-i-learn-from-a-zero-base-program)\n","source":"_posts/2016-08-11-learn-new-things.md","raw":"---\ntitle: 如何快速学习一门新技术？\ncategories: 践行\n---\n学习要合理的分配注意力，把精力放在核心的问题上，而不是细枝末节。\n\n## 初学者容易掉入的死循环\n\n当学习一门新技术时，一旦有了 “为什么” 这个念头，学习者的大脑就会掉入一个无穷循环：\n\n> \"Why\" -> \"What\" -> \"Why\" -> \"What\" -> \"Why\" -> \"What\" -> \"Why\" -> \"What\"\n\n但问题是，当你目前还不懂这些知识时，你还无法解释清楚这些概念，所以你就摆脱不了这个循环，很容易被击溃。\n\n所以，初学东西时绝对不要用大脑**，而是 “用肌肉学习”，先模仿着做。初学阶段千万不要让“大脑”介入学习的过程，否则就会跳入What-Why的死循环中。\n\n> 程序世界深不可测，奇妙无比，想想一个小学生拿着一道高等数学题拼命解题是什么场景吧。\n\n所以要先**建立主干，再填枝叶**。\n\n## 快速学习的方法论\n\n- 上网找教程，跟着模仿，不要去修改，也不要问Why。\n- 做完第一遍教程之后，再做一遍，这次要把不懂的挑出来，但是先不要管这些问题。\n- 接着对“成果”做一些小修改，看看会有什么效果。\n- 把东西改得有效果了以后，再去查Why。\n- 全都弄懂了之后，融会贯通地再做一遍，或者做一个新的东西。\n\n## 梳理流程\n\n初学阶段最重要的是**梳理流程而不是总结规律**，初学者的知识量太少，总结规律就往往陷入What-Why的死循环。\n\n## 参考\n\n[新生大学: 如何在五天内快速 “学会” 一门技能](https://www.fooads.com/post/576b3bbe5faac6c967c12b11)\n\n[第二周周记](http://chenyunli6-blog.logdown.com/posts/776667-second-week-of-weekly)\n\n[我是怎样从零基础学习程序的](http://rebecca9201-blog.logdown.com/posts/776832-how-do-i-learn-from-a-zero-base-program)\n","slug":"2016-08-11-learn-new-things","published":1,"date":"2016-08-11T05:36:56.000Z","updated":"2016-12-21T02:47:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr96000vy3onwxcmlg7k","content":"<p>学习要合理的分配注意力，把精力放在核心的问题上，而不是细枝末节。</p>\n<h2 id=\"初学者容易掉入的死循环\"><a href=\"#初学者容易掉入的死循环\" class=\"headerlink\" title=\"初学者容易掉入的死循环\"></a>初学者容易掉入的死循环</h2><p>当学习一门新技术时，一旦有了 “为什么” 这个念头，学习者的大脑就会掉入一个无穷循环：</p>\n<blockquote>\n<p>“Why” -&gt; “What” -&gt; “Why” -&gt; “What” -&gt; “Why” -&gt; “What” -&gt; “Why” -&gt; “What”</p>\n</blockquote>\n<p>但问题是，当你目前还不懂这些知识时，你还无法解释清楚这些概念，所以你就摆脱不了这个循环，很容易被击溃。</p>\n<p>所以，初学东西时绝对不要用大脑**，而是 “用肌肉学习”，先模仿着做。初学阶段千万不要让“大脑”介入学习的过程，否则就会跳入What-Why的死循环中。</p>\n<blockquote>\n<p>程序世界深不可测，奇妙无比，想想一个小学生拿着一道高等数学题拼命解题是什么场景吧。</p>\n</blockquote>\n<p>所以要先<strong>建立主干，再填枝叶</strong>。</p>\n<h2 id=\"快速学习的方法论\"><a href=\"#快速学习的方法论\" class=\"headerlink\" title=\"快速学习的方法论\"></a>快速学习的方法论</h2><ul>\n<li>上网找教程，跟着模仿，不要去修改，也不要问Why。</li>\n<li>做完第一遍教程之后，再做一遍，这次要把不懂的挑出来，但是先不要管这些问题。</li>\n<li>接着对“成果”做一些小修改，看看会有什么效果。</li>\n<li>把东西改得有效果了以后，再去查Why。</li>\n<li>全都弄懂了之后，融会贯通地再做一遍，或者做一个新的东西。</li>\n</ul>\n<h2 id=\"梳理流程\"><a href=\"#梳理流程\" class=\"headerlink\" title=\"梳理流程\"></a>梳理流程</h2><p>初学阶段最重要的是<strong>梳理流程而不是总结规律</strong>，初学者的知识量太少，总结规律就往往陷入What-Why的死循环。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.fooads.com/post/576b3bbe5faac6c967c12b11\" target=\"_blank\" rel=\"external\">新生大学: 如何在五天内快速 “学会” 一门技能</a></p>\n<p><a href=\"http://chenyunli6-blog.logdown.com/posts/776667-second-week-of-weekly\" target=\"_blank\" rel=\"external\">第二周周记</a></p>\n<p><a href=\"http://rebecca9201-blog.logdown.com/posts/776832-how-do-i-learn-from-a-zero-base-program\" target=\"_blank\" rel=\"external\">我是怎样从零基础学习程序的</a></p>\n","excerpt":"","more":"<p>学习要合理的分配注意力，把精力放在核心的问题上，而不是细枝末节。</p>\n<h2 id=\"初学者容易掉入的死循环\"><a href=\"#初学者容易掉入的死循环\" class=\"headerlink\" title=\"初学者容易掉入的死循环\"></a>初学者容易掉入的死循环</h2><p>当学习一门新技术时，一旦有了 “为什么” 这个念头，学习者的大脑就会掉入一个无穷循环：</p>\n<blockquote>\n<p>“Why” -&gt; “What” -&gt; “Why” -&gt; “What” -&gt; “Why” -&gt; “What” -&gt; “Why” -&gt; “What”</p>\n</blockquote>\n<p>但问题是，当你目前还不懂这些知识时，你还无法解释清楚这些概念，所以你就摆脱不了这个循环，很容易被击溃。</p>\n<p>所以，初学东西时绝对不要用大脑**，而是 “用肌肉学习”，先模仿着做。初学阶段千万不要让“大脑”介入学习的过程，否则就会跳入What-Why的死循环中。</p>\n<blockquote>\n<p>程序世界深不可测，奇妙无比，想想一个小学生拿着一道高等数学题拼命解题是什么场景吧。</p>\n</blockquote>\n<p>所以要先<strong>建立主干，再填枝叶</strong>。</p>\n<h2 id=\"快速学习的方法论\"><a href=\"#快速学习的方法论\" class=\"headerlink\" title=\"快速学习的方法论\"></a>快速学习的方法论</h2><ul>\n<li>上网找教程，跟着模仿，不要去修改，也不要问Why。</li>\n<li>做完第一遍教程之后，再做一遍，这次要把不懂的挑出来，但是先不要管这些问题。</li>\n<li>接着对“成果”做一些小修改，看看会有什么效果。</li>\n<li>把东西改得有效果了以后，再去查Why。</li>\n<li>全都弄懂了之后，融会贯通地再做一遍，或者做一个新的东西。</li>\n</ul>\n<h2 id=\"梳理流程\"><a href=\"#梳理流程\" class=\"headerlink\" title=\"梳理流程\"></a>梳理流程</h2><p>初学阶段最重要的是<strong>梳理流程而不是总结规律</strong>，初学者的知识量太少，总结规律就往往陷入What-Why的死循环。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.fooads.com/post/576b3bbe5faac6c967c12b11\">新生大学: 如何在五天内快速 “学会” 一门技能</a></p>\n<p><a href=\"http://chenyunli6-blog.logdown.com/posts/776667-second-week-of-weekly\">第二周周记</a></p>\n<p><a href=\"http://rebecca9201-blog.logdown.com/posts/776832-how-do-i-learn-from-a-zero-base-program\">我是怎样从零基础学习程序的</a></p>\n"},{"title":"使用Node开发微信总结","_content":"\n这几天在练习用node开发微信公众号和微信内嵌网页，基本上把主要的功能都过了一遍，也动手敲了几个demo，整套练习做完之后，有很多体会，下面总结一下心得。\n\n## 域名\n\n微信开发需要域名，映射到本地的ip和端口，一开始借助ngrok，缺点就是不太稳定，经常会挂掉。后来就换成QQ浏览器提供的微信开发工具来生成临时域名。\n\n## 认证\n\n微信接口认证也就是获取access_token，将token、timestamp、nonce三个参数进行字典排序，然后再进行sha1加密，最后与signatrue对比。这个过程需要非常细心，当时花了很长时间调试。\n\n另外，获取access_token是有次数限制的，每天2000次，所以要在服务端缓存，可以保存到数据库或者本地文件。\n\n## Koa\n\n服务端使用Koa框架来开发，Koa最核心的功能就是中间件，每个中间件传入use函数，就能按顺序执行\u0010\u0010\u0010\u0010。使用yield语法就可以实现类似“断点”式的开发。使用Koa，再加上Promise，可以写出来很优雅的代码。\n\n## 自动回复功能\n\n客户端、微信服务器和node服务器的通信流程：\n\n1. 客户端触发事件，微信服务器推送事件到node服务器；\n2. 微信服务器推送的事件是使用POST方法，格式为XML；\n3. node服务器返回XML格式的数据给微信服务器，最终再客户端完成响应。\n\n使用ejs模板需要对各种消息的模块（文字消息，图文消息，音频视频消息等等）进行封装。\n\n## 微信开发工具\n\n- 可以调试JS-SDK；\n- 有chrome控制台，非常好用；\n- 用移动调试，很酷。\n\n","source":"_posts/2016-08-22-wechat.md","raw":"---\ntitle: 使用Node开发微信总结\ncategories: node\ntags: [node]\n---\n\n这几天在练习用node开发微信公众号和微信内嵌网页，基本上把主要的功能都过了一遍，也动手敲了几个demo，整套练习做完之后，有很多体会，下面总结一下心得。\n\n## 域名\n\n微信开发需要域名，映射到本地的ip和端口，一开始借助ngrok，缺点就是不太稳定，经常会挂掉。后来就换成QQ浏览器提供的微信开发工具来生成临时域名。\n\n## 认证\n\n微信接口认证也就是获取access_token，将token、timestamp、nonce三个参数进行字典排序，然后再进行sha1加密，最后与signatrue对比。这个过程需要非常细心，当时花了很长时间调试。\n\n另外，获取access_token是有次数限制的，每天2000次，所以要在服务端缓存，可以保存到数据库或者本地文件。\n\n## Koa\n\n服务端使用Koa框架来开发，Koa最核心的功能就是中间件，每个中间件传入use函数，就能按顺序执行\u0010\u0010\u0010\u0010。使用yield语法就可以实现类似“断点”式的开发。使用Koa，再加上Promise，可以写出来很优雅的代码。\n\n## 自动回复功能\n\n客户端、微信服务器和node服务器的通信流程：\n\n1. 客户端触发事件，微信服务器推送事件到node服务器；\n2. 微信服务器推送的事件是使用POST方法，格式为XML；\n3. node服务器返回XML格式的数据给微信服务器，最终再客户端完成响应。\n\n使用ejs模板需要对各种消息的模块（文字消息，图文消息，音频视频消息等等）进行封装。\n\n## 微信开发工具\n\n- 可以调试JS-SDK；\n- 有chrome控制台，非常好用；\n- 用移动调试，很酷。\n\n","slug":"2016-08-22-wechat","published":1,"date":"2016-08-22T13:40:01.000Z","updated":"2016-09-01T09:59:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr9d000yy3oncs3t2e2s","content":"<p>这几天在练习用node开发微信公众号和微信内嵌网页，基本上把主要的功能都过了一遍，也动手敲了几个demo，整套练习做完之后，有很多体会，下面总结一下心得。</p>\n<h2 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h2><p>微信开发需要域名，映射到本地的ip和端口，一开始借助ngrok，缺点就是不太稳定，经常会挂掉。后来就换成QQ浏览器提供的微信开发工具来生成临时域名。</p>\n<h2 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h2><p>微信接口认证也就是获取access_token，将token、timestamp、nonce三个参数进行字典排序，然后再进行sha1加密，最后与signatrue对比。这个过程需要非常细心，当时花了很长时间调试。</p>\n<p>另外，获取access_token是有次数限制的，每天2000次，所以要在服务端缓存，可以保存到数据库或者本地文件。</p>\n<h2 id=\"Koa\"><a href=\"#Koa\" class=\"headerlink\" title=\"Koa\"></a>Koa</h2><p>服务端使用Koa框架来开发，Koa最核心的功能就是中间件，每个中间件传入use函数，就能按顺序执行\u0010\u0010\u0010\u0010。使用yield语法就可以实现类似“断点”式的开发。使用Koa，再加上Promise，可以写出来很优雅的代码。</p>\n<h2 id=\"自动回复功能\"><a href=\"#自动回复功能\" class=\"headerlink\" title=\"自动回复功能\"></a>自动回复功能</h2><p>客户端、微信服务器和node服务器的通信流程：</p>\n<ol>\n<li>客户端触发事件，微信服务器推送事件到node服务器；</li>\n<li>微信服务器推送的事件是使用POST方法，格式为XML；</li>\n<li>node服务器返回XML格式的数据给微信服务器，最终再客户端完成响应。</li>\n</ol>\n<p>使用ejs模板需要对各种消息的模块（文字消息，图文消息，音频视频消息等等）进行封装。</p>\n<h2 id=\"微信开发工具\"><a href=\"#微信开发工具\" class=\"headerlink\" title=\"微信开发工具\"></a>微信开发工具</h2><ul>\n<li>可以调试JS-SDK；</li>\n<li>有chrome控制台，非常好用；</li>\n<li>用移动调试，很酷。</li>\n</ul>\n","excerpt":"","more":"<p>这几天在练习用node开发微信公众号和微信内嵌网页，基本上把主要的功能都过了一遍，也动手敲了几个demo，整套练习做完之后，有很多体会，下面总结一下心得。</p>\n<h2 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h2><p>微信开发需要域名，映射到本地的ip和端口，一开始借助ngrok，缺点就是不太稳定，经常会挂掉。后来就换成QQ浏览器提供的微信开发工具来生成临时域名。</p>\n<h2 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h2><p>微信接口认证也就是获取access_token，将token、timestamp、nonce三个参数进行字典排序，然后再进行sha1加密，最后与signatrue对比。这个过程需要非常细心，当时花了很长时间调试。</p>\n<p>另外，获取access_token是有次数限制的，每天2000次，所以要在服务端缓存，可以保存到数据库或者本地文件。</p>\n<h2 id=\"Koa\"><a href=\"#Koa\" class=\"headerlink\" title=\"Koa\"></a>Koa</h2><p>服务端使用Koa框架来开发，Koa最核心的功能就是中间件，每个中间件传入use函数，就能按顺序执行\u0010\u0010\u0010\u0010。使用yield语法就可以实现类似“断点”式的开发。使用Koa，再加上Promise，可以写出来很优雅的代码。</p>\n<h2 id=\"自动回复功能\"><a href=\"#自动回复功能\" class=\"headerlink\" title=\"自动回复功能\"></a>自动回复功能</h2><p>客户端、微信服务器和node服务器的通信流程：</p>\n<ol>\n<li>客户端触发事件，微信服务器推送事件到node服务器；</li>\n<li>微信服务器推送的事件是使用POST方法，格式为XML；</li>\n<li>node服务器返回XML格式的数据给微信服务器，最终再客户端完成响应。</li>\n</ol>\n<p>使用ejs模板需要对各种消息的模块（文字消息，图文消息，音频视频消息等等）进行封装。</p>\n<h2 id=\"微信开发工具\"><a href=\"#微信开发工具\" class=\"headerlink\" title=\"微信开发工具\"></a>微信开发工具</h2><ul>\n<li>可以调试JS-SDK；</li>\n<li>有chrome控制台，非常好用；</li>\n<li>用移动调试，很酷。</li>\n</ul>\n"},{"title":"weinre移动调试工具","_content":"\nweinre可以在pc端远程调试移动设备浏览器中的web页面，能即时调试DOM元素、CSS和JS。\n\n官网地址: [weinre](https://people.apache.org/~pmuellr/weinre/docs/latest/)\n\n## 使用方法\n\n安装\n\n```\nsudo npm -g install weinre\n```\n\n\n\n启动服务\n\n```\nweinre --httpPort 8082 --boundHost -all-\n```\n\n\n\n打开服务首页\n\n```\nhttp://localhost:8082/\n```\n\n\n- pc端的调试页面地址 http://localhost:8082/client/#anonymous \n- js链接：http://localhost:8082/target/target-script-min.js#anonymous\n\n把js链接引入到被调试页面，在pc端打开调试页面，就可以开始调试了。\n\n## 最有用的几个功能\n\n- element：查看html元内容，动态修改css；\n- network：查看网络请求；\n- console：打印log，查看报错信息。","source":"_posts/2016-08-24-weinre.md","raw":"---\ntitle: weinre移动调试工具\ncategories: 工具\n---\n\nweinre可以在pc端远程调试移动设备浏览器中的web页面，能即时调试DOM元素、CSS和JS。\n\n官网地址: [weinre](https://people.apache.org/~pmuellr/weinre/docs/latest/)\n\n## 使用方法\n\n安装\n\n```\nsudo npm -g install weinre\n```\n\n\n\n启动服务\n\n```\nweinre --httpPort 8082 --boundHost -all-\n```\n\n\n\n打开服务首页\n\n```\nhttp://localhost:8082/\n```\n\n\n- pc端的调试页面地址 http://localhost:8082/client/#anonymous \n- js链接：http://localhost:8082/target/target-script-min.js#anonymous\n\n把js链接引入到被调试页面，在pc端打开调试页面，就可以开始调试了。\n\n## 最有用的几个功能\n\n- element：查看html元内容，动态修改css；\n- network：查看网络请求；\n- console：打印log，查看报错信息。","slug":"2016-08-24-weinre","published":1,"date":"2016-08-24T01:20:11.000Z","updated":"2016-12-21T02:48:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr9g0012y3onhqfpvdo2","content":"<p>weinre可以在pc端远程调试移动设备浏览器中的web页面，能即时调试DOM元素、CSS和JS。</p>\n<p>官网地址: <a href=\"https://people.apache.org/~pmuellr/weinre/docs/latest/\" target=\"_blank\" rel=\"external\">weinre</a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm -g install weinre</span><br></pre></td></tr></table></figure>\n<p>启动服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weinre --httpPort 8082 --boundHost -all-</span><br></pre></td></tr></table></figure>\n<p>打开服务首页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8082/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pc端的调试页面地址 <a href=\"http://localhost:8082/client/#anonymous\" target=\"_blank\" rel=\"external\">http://localhost:8082/client/#anonymous</a> </li>\n<li>js链接：<a href=\"http://localhost:8082/target/target-script-min.js#anonymous\" target=\"_blank\" rel=\"external\">http://localhost:8082/target/target-script-min.js#anonymous</a></li>\n</ul>\n<p>把js链接引入到被调试页面，在pc端打开调试页面，就可以开始调试了。</p>\n<h2 id=\"最有用的几个功能\"><a href=\"#最有用的几个功能\" class=\"headerlink\" title=\"最有用的几个功能\"></a>最有用的几个功能</h2><ul>\n<li>element：查看html元内容，动态修改css；</li>\n<li>network：查看网络请求；</li>\n<li>console：打印log，查看报错信息。</li>\n</ul>\n","excerpt":"","more":"<p>weinre可以在pc端远程调试移动设备浏览器中的web页面，能即时调试DOM元素、CSS和JS。</p>\n<p>官网地址: <a href=\"https://people.apache.org/~pmuellr/weinre/docs/latest/\">weinre</a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm -g install weinre</span><br></pre></td></tr></table></figure>\n<p>启动服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weinre --httpPort 8082 --boundHost -all-</span><br></pre></td></tr></table></figure>\n<p>打开服务首页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8082/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pc端的调试页面地址 <a href=\"http://localhost:8082/client/#anonymous\">http://localhost:8082/client/#anonymous</a> </li>\n<li>js链接：<a href=\"http://localhost:8082/target/target-script-min.js#anonymous\">http://localhost:8082/target/target-script-min.js#anonymous</a></li>\n</ul>\n<p>把js链接引入到被调试页面，在pc端打开调试页面，就可以开始调试了。</p>\n<h2 id=\"最有用的几个功能\"><a href=\"#最有用的几个功能\" class=\"headerlink\" title=\"最有用的几个功能\"></a>最有用的几个功能</h2><ul>\n<li>element：查看html元内容，动态修改css；</li>\n<li>network：查看网络请求；</li>\n<li>console：打印log，查看报错信息。</li>\n</ul>\n"},{"title":"supertest测试框架","_content":"\n用来测试nodejs http服务的框架，断言的语法基于superagent框架（在客户端和nodejs都能使用的http请求框架，语法优雅）\n\n## API\n\n> ### .expect(status[, fn])\n>\n> Assert response status code.\n>\n> ### .expect(status, body[, fn])\n>\n> Assert response status code and body.\n>\n> ### .expect(body[, fn])\n>\n> Assert response body text with a string, regular expression, or parsed body object.\n>\n> ### .expect(field, value[, fn])\n>\n> Assert header field value with a string or regular expression.\n>\n> ### .expect(function(res) {})\n>\n> Pass a custom assertion function. It'll be given the response object to check. If the check fails, throw an error.\n>\n> ### .end(fn)\n>\n> Perform the request and invoke fn(err, res).\n\n## 实例\n\n```javascript\ndescribe('GET', function(){\n  it('should work', function(done){\n    request\n      .get('/')\n\t  .expect('Content-Type', /json/)\n      .expect(200)\n      .expect({ name: 'TJ' }, done);\n  })\n})\n```\n\n","source":"_posts/2016-08-25-supertest.md","raw":"---\ntitle: supertest测试框架\ncategories: node\ntags: [测试]\n---\n\n用来测试nodejs http服务的框架，断言的语法基于superagent框架（在客户端和nodejs都能使用的http请求框架，语法优雅）\n\n## API\n\n> ### .expect(status[, fn])\n>\n> Assert response status code.\n>\n> ### .expect(status, body[, fn])\n>\n> Assert response status code and body.\n>\n> ### .expect(body[, fn])\n>\n> Assert response body text with a string, regular expression, or parsed body object.\n>\n> ### .expect(field, value[, fn])\n>\n> Assert header field value with a string or regular expression.\n>\n> ### .expect(function(res) {})\n>\n> Pass a custom assertion function. It'll be given the response object to check. If the check fails, throw an error.\n>\n> ### .end(fn)\n>\n> Perform the request and invoke fn(err, res).\n\n## 实例\n\n```javascript\ndescribe('GET', function(){\n  it('should work', function(done){\n    request\n      .get('/')\n\t  .expect('Content-Type', /json/)\n      .expect(200)\n      .expect({ name: 'TJ' }, done);\n  })\n})\n```\n\n","slug":"2016-08-25-supertest","published":1,"date":"2016-08-25T05:21:39.000Z","updated":"2016-09-01T10:00:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr9i0014y3on3ikbr80a","content":"<p>用来测试nodejs http服务的框架，断言的语法基于superagent框架（在客户端和nodejs都能使用的http请求框架，语法优雅）</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><blockquote>\n<h3 id=\"expect-status-fn\"><a href=\"#expect-status-fn\" class=\"headerlink\" title=\".expect(status[, fn])\"></a>.expect(status[, fn])</h3><p>Assert response status code.</p>\n<h3 id=\"expect-status-body-fn\"><a href=\"#expect-status-body-fn\" class=\"headerlink\" title=\".expect(status, body[, fn])\"></a>.expect(status, body[, fn])</h3><p>Assert response status code and body.</p>\n<h3 id=\"expect-body-fn\"><a href=\"#expect-body-fn\" class=\"headerlink\" title=\".expect(body[, fn])\"></a>.expect(body[, fn])</h3><p>Assert response body text with a string, regular expression, or parsed body object.</p>\n<h3 id=\"expect-field-value-fn\"><a href=\"#expect-field-value-fn\" class=\"headerlink\" title=\".expect(field, value[, fn])\"></a>.expect(field, value[, fn])</h3><p>Assert header field value with a string or regular expression.</p>\n<h3 id=\"expect-function-res\"><a href=\"#expect-function-res\" class=\"headerlink\" title=\".expect(function(res) {})\"></a>.expect(function(res) {})</h3><p>Pass a custom assertion function. It’ll be given the response object to check. If the check fails, throw an error.</p>\n<h3 id=\"end-fn\"><a href=\"#end-fn\" class=\"headerlink\" title=\".end(fn)\"></a>.end(fn)</h3><p>Perform the request and invoke fn(err, res).</p>\n</blockquote>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'GET'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should work'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>)</span>&#123;</span><br><span class=\"line\">    request</span><br><span class=\"line\">      .get(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">\t  .expect(<span class=\"string\">'Content-Type'</span>, <span class=\"regexp\">/json/</span>)</span><br><span class=\"line\">      .expect(<span class=\"number\">200</span>)</span><br><span class=\"line\">      .expect(&#123; name: <span class=\"string\">'TJ'</span> &#125;, done);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>用来测试nodejs http服务的框架，断言的语法基于superagent框架（在客户端和nodejs都能使用的http请求框架，语法优雅）</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><blockquote>\n<h3 id=\"expect-status-fn\"><a href=\"#expect-status-fn\" class=\"headerlink\" title=\".expect(status[, fn])\"></a>.expect(status[, fn])</h3><p>Assert response status code.</p>\n<h3 id=\"expect-status-body-fn\"><a href=\"#expect-status-body-fn\" class=\"headerlink\" title=\".expect(status, body[, fn])\"></a>.expect(status, body[, fn])</h3><p>Assert response status code and body.</p>\n<h3 id=\"expect-body-fn\"><a href=\"#expect-body-fn\" class=\"headerlink\" title=\".expect(body[, fn])\"></a>.expect(body[, fn])</h3><p>Assert response body text with a string, regular expression, or parsed body object.</p>\n<h3 id=\"expect-field-value-fn\"><a href=\"#expect-field-value-fn\" class=\"headerlink\" title=\".expect(field, value[, fn])\"></a>.expect(field, value[, fn])</h3><p>Assert header field value with a string or regular expression.</p>\n<h3 id=\"expect-function-res\"><a href=\"#expect-function-res\" class=\"headerlink\" title=\".expect(function(res) {})\"></a>.expect(function(res) {})</h3><p>Pass a custom assertion function. It’ll be given the response object to check. If the check fails, throw an error.</p>\n<h3 id=\"end-fn\"><a href=\"#end-fn\" class=\"headerlink\" title=\".end(fn)\"></a>.end(fn)</h3><p>Perform the request and invoke fn(err, res).</p>\n</blockquote>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'GET'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should work'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>)</span>&#123;</span><br><span class=\"line\">    request</span><br><span class=\"line\">      .get(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">\t  .expect(<span class=\"string\">'Content-Type'</span>, <span class=\"regexp\">/json/</span>)</span><br><span class=\"line\">      .expect(<span class=\"number\">200</span>)</span><br><span class=\"line\">      .expect(&#123; name: <span class=\"string\">'TJ'</span> &#125;, done);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"post数据处理","_content":"\n## req.body\n\nnodejs的req没有定义body，所以为undefined\n\n## 表单提交post请求\n\n两个重要的属性\n\n> Content-Type: application/x-www-form-urlencoded\n>\n> Form Data: name=raimonfuns&password=1234 （这是stream）\n\n## 接收数据流\n\n- stream.on('data')\n  - 将data添加到buffers\n- stream.on('end')\n  - buffer = Buffer.concat(buffers)\n  - buffer.toString('utf8')\n\n## querystring模块\n\n```javascript\n> qs.parse('name=raimonfuns&password=1234')\n{ name: 'raimonfuns', password: '1234' }\n```","source":"_posts/2016-09-16-login_register.md","raw":"---\ntitle: post数据处理\ncategories: node\n---\n\n## req.body\n\nnodejs的req没有定义body，所以为undefined\n\n## 表单提交post请求\n\n两个重要的属性\n\n> Content-Type: application/x-www-form-urlencoded\n>\n> Form Data: name=raimonfuns&password=1234 （这是stream）\n\n## 接收数据流\n\n- stream.on('data')\n  - 将data添加到buffers\n- stream.on('end')\n  - buffer = Buffer.concat(buffers)\n  - buffer.toString('utf8')\n\n## querystring模块\n\n```javascript\n> qs.parse('name=raimonfuns&password=1234')\n{ name: 'raimonfuns', password: '1234' }\n```","slug":"2016-09-16-login_register","published":1,"date":"2016-09-16T02:50:22.000Z","updated":"2016-09-16T03:03:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr9k0017y3onjya1nlsw","content":"<h2 id=\"req-body\"><a href=\"#req-body\" class=\"headerlink\" title=\"req.body\"></a>req.body</h2><p>nodejs的req没有定义body，所以为undefined</p>\n<h2 id=\"表单提交post请求\"><a href=\"#表单提交post请求\" class=\"headerlink\" title=\"表单提交post请求\"></a>表单提交post请求</h2><p>两个重要的属性</p>\n<blockquote>\n<p>Content-Type: application/x-www-form-urlencoded</p>\n<p>Form Data: name=raimonfuns&amp;password=1234 （这是stream）</p>\n</blockquote>\n<h2 id=\"接收数据流\"><a href=\"#接收数据流\" class=\"headerlink\" title=\"接收数据流\"></a>接收数据流</h2><ul>\n<li>stream.on(‘data’)<ul>\n<li>将data添加到buffers</li>\n</ul>\n</li>\n<li>stream.on(‘end’)<ul>\n<li>buffer = Buffer.concat(buffers)</li>\n<li>buffer.toString(‘utf8’)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"querystring模块\"><a href=\"#querystring模块\" class=\"headerlink\" title=\"querystring模块\"></a>querystring模块</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; qs.parse(<span class=\"string\">'name=raimonfuns&amp;password=1234'</span>)</span><br><span class=\"line\">&#123; name: <span class=\"string\">'raimonfuns'</span>, password: <span class=\"string\">'1234'</span> &#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"req-body\"><a href=\"#req-body\" class=\"headerlink\" title=\"req.body\"></a>req.body</h2><p>nodejs的req没有定义body，所以为undefined</p>\n<h2 id=\"表单提交post请求\"><a href=\"#表单提交post请求\" class=\"headerlink\" title=\"表单提交post请求\"></a>表单提交post请求</h2><p>两个重要的属性</p>\n<blockquote>\n<p>Content-Type: application/x-www-form-urlencoded</p>\n<p>Form Data: name=raimonfuns&amp;password=1234 （这是stream）</p>\n</blockquote>\n<h2 id=\"接收数据流\"><a href=\"#接收数据流\" class=\"headerlink\" title=\"接收数据流\"></a>接收数据流</h2><ul>\n<li>stream.on(‘data’)<ul>\n<li>将data添加到buffers</li>\n</ul>\n</li>\n<li>stream.on(‘end’)<ul>\n<li>buffer = Buffer.concat(buffers)</li>\n<li>buffer.toString(‘utf8’)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"querystring模块\"><a href=\"#querystring模块\" class=\"headerlink\" title=\"querystring模块\"></a>querystring模块</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; qs.parse(<span class=\"string\">'name=raimonfuns&amp;password=1234'</span>)</span><br><span class=\"line\">&#123; name: <span class=\"string\">'raimonfuns'</span>, password: <span class=\"string\">'1234'</span> &#125;</span><br></pre></td></tr></table></figure>"},{"title":"使用koa2 + vue开发所遇到的问题总结","_content":"## vuex中store的获取\n\n用的比较多的方式是这种：\n\n![](http://ww2.sinaimg.cn/large/65e4f1e6gw1f8yzgxbi0yj20cy03kq3k.jpg)\n\n后来遇到有一种情况：处理数据之后，需要重定向路由，所以需要拿到router，而如果要拿到router，那就要拿到store，那么，怎么拿到store呢？用这种方式：\n\n![](http://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzmf4hpuj20cz04gt9p.jpg)\n\n这种写法既可以拿到router，也可以拿到dispatch，之前没发现，做到这一步才知道。\n\n## mongodb的count()方法要加await\n\n![](http://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzp9keakj20dy03n0te.jpg)\n\n错误：漏掉了加await。\n\n结果：得不到返回结果。\n\n分析：花了很长时间才找出原因，**所有的mongo数据库操作都要加await**，因为是异步的。\n\n## vuex module必须是对象\n\n![](http://ww4.sinaimg.cn/large/65e4f1e6gw1f8yzt32q9bj209508v3z3.jpg)\n\n错误：直接把一个对象赋值给state。\n\n结果：赋值不生效，对方只提供一个空对象。\n\n分析：vuex module对外提供的必须是一个对象，所有的数据都放要在这个对象中。\n\n## vue-resource返回的data\n\n![](http://ww3.sinaimg.cn/large/65e4f1e6gw1f8z02yq1i4j20bg0470tg.jpg)\n\n错误：后端接口返回一个json数据，前端接口通过response.data获取。\n\n结果：获取到的是字符串，而不是json。\n\n分析：vue返回的response.data是一个字符串而不是json，可以通过response.json()获取到json数据。\n\n## 运行node-bunyan报错\n\n```\n[SyntaxError: Unexpected token ILLEGAL]\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n\n解决方法：\n\n```\nrm -rf node_modules/ && npm install --no-optional\n```\n\n[链接](https://github.com/trentm/node-bunyan/issues/216)\n\n## await next()\n\n![](http://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcfir0yej213602ydhu.jpg)\n\n错误：next()方法前面没加awai\u0010t\n\n结果：后面的middleware不能正常工作。\n\n分析：express 通过 yield next进入下一个middleware，而koa2的写法是 await next()\n\n## koa-compose()\n\n![](http://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcjqlccej20c00do76g.jpg)\n\nkoa-compose可以串行执行中间件，作用与co类似。\n\n## 用户名已存在\n\n![](http://ww2.sinaimg.cn/large/006y8lVajw1f8zp4xytnvj30cw08q0ty.jpg)\n\n错误：没有检测用户是否已经存在\n\n结果：mongodb执行new user()时报错\n\n分析：在mongodb创建数据之前，先检查数据是否已经存在。\n\n","source":"_posts/2016-10-20-koa2-vue-1.md","raw":"---\ntitle: 使用koa2 + vue开发所遇到的问题总结\ncategories: Javascript\ntags: [koa2, vue]\n---\n## vuex中store的获取\n\n用的比较多的方式是这种：\n\n![](http://ww2.sinaimg.cn/large/65e4f1e6gw1f8yzgxbi0yj20cy03kq3k.jpg)\n\n后来遇到有一种情况：处理数据之后，需要重定向路由，所以需要拿到router，而如果要拿到router，那就要拿到store，那么，怎么拿到store呢？用这种方式：\n\n![](http://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzmf4hpuj20cz04gt9p.jpg)\n\n这种写法既可以拿到router，也可以拿到dispatch，之前没发现，做到这一步才知道。\n\n## mongodb的count()方法要加await\n\n![](http://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzp9keakj20dy03n0te.jpg)\n\n错误：漏掉了加await。\n\n结果：得不到返回结果。\n\n分析：花了很长时间才找出原因，**所有的mongo数据库操作都要加await**，因为是异步的。\n\n## vuex module必须是对象\n\n![](http://ww4.sinaimg.cn/large/65e4f1e6gw1f8yzt32q9bj209508v3z3.jpg)\n\n错误：直接把一个对象赋值给state。\n\n结果：赋值不生效，对方只提供一个空对象。\n\n分析：vuex module对外提供的必须是一个对象，所有的数据都放要在这个对象中。\n\n## vue-resource返回的data\n\n![](http://ww3.sinaimg.cn/large/65e4f1e6gw1f8z02yq1i4j20bg0470tg.jpg)\n\n错误：后端接口返回一个json数据，前端接口通过response.data获取。\n\n结果：获取到的是字符串，而不是json。\n\n分析：vue返回的response.data是一个字符串而不是json，可以通过response.json()获取到json数据。\n\n## 运行node-bunyan报错\n\n```\n[SyntaxError: Unexpected token ILLEGAL]\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n\n解决方法：\n\n```\nrm -rf node_modules/ && npm install --no-optional\n```\n\n[链接](https://github.com/trentm/node-bunyan/issues/216)\n\n## await next()\n\n![](http://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcfir0yej213602ydhu.jpg)\n\n错误：next()方法前面没加awai\u0010t\n\n结果：后面的middleware不能正常工作。\n\n分析：express 通过 yield next进入下一个middleware，而koa2的写法是 await next()\n\n## koa-compose()\n\n![](http://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcjqlccej20c00do76g.jpg)\n\nkoa-compose可以串行执行中间件，作用与co类似。\n\n## 用户名已存在\n\n![](http://ww2.sinaimg.cn/large/006y8lVajw1f8zp4xytnvj30cw08q0ty.jpg)\n\n错误：没有检测用户是否已经存在\n\n结果：mongodb执行new user()时报错\n\n分析：在mongodb创建数据之前，先检查数据是否已经存在。\n\n","slug":"2016-10-20-koa2-vue-1","published":1,"date":"2016-10-20T12:30:14.000Z","updated":"2016-10-21T09:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr9m001ay3onnb295rmh","content":"<h2 id=\"vuex中store的获取\"><a href=\"#vuex中store的获取\" class=\"headerlink\" title=\"vuex中store的获取\"></a>vuex中store的获取</h2><p>用的比较多的方式是这种：</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/65e4f1e6gw1f8yzgxbi0yj20cy03kq3k.jpg\" alt=\"\"></p>\n<p>后来遇到有一种情况：处理数据之后，需要重定向路由，所以需要拿到router，而如果要拿到router，那就要拿到store，那么，怎么拿到store呢？用这种方式：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzmf4hpuj20cz04gt9p.jpg\" alt=\"\"></p>\n<p>这种写法既可以拿到router，也可以拿到dispatch，之前没发现，做到这一步才知道。</p>\n<h2 id=\"mongodb的count-方法要加await\"><a href=\"#mongodb的count-方法要加await\" class=\"headerlink\" title=\"mongodb的count()方法要加await\"></a>mongodb的count()方法要加await</h2><p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzp9keakj20dy03n0te.jpg\" alt=\"\"></p>\n<p>错误：漏掉了加await。</p>\n<p>结果：得不到返回结果。</p>\n<p>分析：花了很长时间才找出原因，<strong>所有的mongo数据库操作都要加await</strong>，因为是异步的。</p>\n<h2 id=\"vuex-module必须是对象\"><a href=\"#vuex-module必须是对象\" class=\"headerlink\" title=\"vuex module必须是对象\"></a>vuex module必须是对象</h2><p><img src=\"http://ww4.sinaimg.cn/large/65e4f1e6gw1f8yzt32q9bj209508v3z3.jpg\" alt=\"\"></p>\n<p>错误：直接把一个对象赋值给state。</p>\n<p>结果：赋值不生效，对方只提供一个空对象。</p>\n<p>分析：vuex module对外提供的必须是一个对象，所有的数据都放要在这个对象中。</p>\n<h2 id=\"vue-resource返回的data\"><a href=\"#vue-resource返回的data\" class=\"headerlink\" title=\"vue-resource返回的data\"></a>vue-resource返回的data</h2><p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f8z02yq1i4j20bg0470tg.jpg\" alt=\"\"></p>\n<p>错误：后端接口返回一个json数据，前端接口通过response.data获取。</p>\n<p>结果：获取到的是字符串，而不是json。</p>\n<p>分析：vue返回的response.data是一个字符串而不是json，可以通过response.json()获取到json数据。</p>\n<h2 id=\"运行node-bunyan报错\"><a href=\"#运行node-bunyan报错\" class=\"headerlink\" title=\"运行node-bunyan报错\"></a>运行node-bunyan报错</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SyntaxError: Unexpected token ILLEGAL]</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf node_modules/ &amp;&amp; npm install --no-optional</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/trentm/node-bunyan/issues/216\" target=\"_blank\" rel=\"external\">链接</a></p>\n<h2 id=\"await-next\"><a href=\"#await-next\" class=\"headerlink\" title=\"await next()\"></a>await next()</h2><p><img src=\"http://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcfir0yej213602ydhu.jpg\" alt=\"\"></p>\n<p>错误：next()方法前面没加awai\u0010t</p>\n<p>结果：后面的middleware不能正常工作。</p>\n<p>分析：express 通过 yield next进入下一个middleware，而koa2的写法是 await next()</p>\n<h2 id=\"koa-compose\"><a href=\"#koa-compose\" class=\"headerlink\" title=\"koa-compose()\"></a>koa-compose()</h2><p><img src=\"http://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcjqlccej20c00do76g.jpg\" alt=\"\"></p>\n<p>koa-compose可以串行执行中间件，作用与co类似。</p>\n<h2 id=\"用户名已存在\"><a href=\"#用户名已存在\" class=\"headerlink\" title=\"用户名已存在\"></a>用户名已存在</h2><p><img src=\"http://ww2.sinaimg.cn/large/006y8lVajw1f8zp4xytnvj30cw08q0ty.jpg\" alt=\"\"></p>\n<p>错误：没有检测用户是否已经存在</p>\n<p>结果：mongodb执行new user()时报错</p>\n<p>分析：在mongodb创建数据之前，先检查数据是否已经存在。</p>\n","excerpt":"","more":"<h2 id=\"vuex中store的获取\"><a href=\"#vuex中store的获取\" class=\"headerlink\" title=\"vuex中store的获取\"></a>vuex中store的获取</h2><p>用的比较多的方式是这种：</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/65e4f1e6gw1f8yzgxbi0yj20cy03kq3k.jpg\" alt=\"\"></p>\n<p>后来遇到有一种情况：处理数据之后，需要重定向路由，所以需要拿到router，而如果要拿到router，那就要拿到store，那么，怎么拿到store呢？用这种方式：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzmf4hpuj20cz04gt9p.jpg\" alt=\"\"></p>\n<p>这种写法既可以拿到router，也可以拿到dispatch，之前没发现，做到这一步才知道。</p>\n<h2 id=\"mongodb的count-方法要加await\"><a href=\"#mongodb的count-方法要加await\" class=\"headerlink\" title=\"mongodb的count()方法要加await\"></a>mongodb的count()方法要加await</h2><p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f8yzp9keakj20dy03n0te.jpg\" alt=\"\"></p>\n<p>错误：漏掉了加await。</p>\n<p>结果：得不到返回结果。</p>\n<p>分析：花了很长时间才找出原因，<strong>所有的mongo数据库操作都要加await</strong>，因为是异步的。</p>\n<h2 id=\"vuex-module必须是对象\"><a href=\"#vuex-module必须是对象\" class=\"headerlink\" title=\"vuex module必须是对象\"></a>vuex module必须是对象</h2><p><img src=\"http://ww4.sinaimg.cn/large/65e4f1e6gw1f8yzt32q9bj209508v3z3.jpg\" alt=\"\"></p>\n<p>错误：直接把一个对象赋值给state。</p>\n<p>结果：赋值不生效，对方只提供一个空对象。</p>\n<p>分析：vuex module对外提供的必须是一个对象，所有的数据都放要在这个对象中。</p>\n<h2 id=\"vue-resource返回的data\"><a href=\"#vue-resource返回的data\" class=\"headerlink\" title=\"vue-resource返回的data\"></a>vue-resource返回的data</h2><p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f8z02yq1i4j20bg0470tg.jpg\" alt=\"\"></p>\n<p>错误：后端接口返回一个json数据，前端接口通过response.data获取。</p>\n<p>结果：获取到的是字符串，而不是json。</p>\n<p>分析：vue返回的response.data是一个字符串而不是json，可以通过response.json()获取到json数据。</p>\n<h2 id=\"运行node-bunyan报错\"><a href=\"#运行node-bunyan报错\" class=\"headerlink\" title=\"运行node-bunyan报错\"></a>运行node-bunyan报错</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SyntaxError: Unexpected token ILLEGAL]</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf node_modules/ &amp;&amp; npm install --no-optional</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/trentm/node-bunyan/issues/216\">链接</a></p>\n<h2 id=\"await-next\"><a href=\"#await-next\" class=\"headerlink\" title=\"await next()\"></a>await next()</h2><p><img src=\"http://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcfir0yej213602ydhu.jpg\" alt=\"\"></p>\n<p>错误：next()方法前面没加awai\u0010t</p>\n<p>结果：后面的middleware不能正常工作。</p>\n<p>分析：express 通过 yield next进入下一个middleware，而koa2的写法是 await next()</p>\n<h2 id=\"koa-compose\"><a href=\"#koa-compose\" class=\"headerlink\" title=\"koa-compose()\"></a>koa-compose()</h2><p><img src=\"http://ww4.sinaimg.cn/large/65e4f1e6jw1f8xcjqlccej20c00do76g.jpg\" alt=\"\"></p>\n<p>koa-compose可以串行执行中间件，作用与co类似。</p>\n<h2 id=\"用户名已存在\"><a href=\"#用户名已存在\" class=\"headerlink\" title=\"用户名已存在\"></a>用户名已存在</h2><p><img src=\"http://ww2.sinaimg.cn/large/006y8lVajw1f8zp4xytnvj30cw08q0ty.jpg\" alt=\"\"></p>\n<p>错误：没有检测用户是否已经存在</p>\n<p>结果：mongodb执行new user()时报错</p>\n<p>分析：在mongodb创建数据之前，先检查数据是否已经存在。</p>\n"},{"title":"程序员的70条原则","_content":"\n在生活中，每个人都有一套自己的价值观，并形成一套处事原则，根据这套原则决定自己应该做什么，不应该做什么。可以说，所有的主动选择都是由价值观决定的。同理，在编程的世界里，程序员也需要一套原则，来规定自己应该做什么，不应该做什么。\n\n《程序员修炼之道 — 从小工到专家》一书给出了70条原则，可以作为每一个程序员的基本原则，我们可以根据这些原则来做正确的事情。\n\n1. 关心你的技艺\n   Care About Your Craft\n   如果你不在乎能否漂亮地开发出软件，你又为何要耗费生命去开发软件呢？\n\n2. 思考！你的工作\n   Think! About Your Work\n   关掉自动驾驶仪，接管操作。不断地批评和评估你的工作。\n\n3. 提供各种选择，不要找蹩脚的借口\n   Provide Options, Don't Make Lame Excuses\n   要提供各种选择，而不是找借口。不要说事情做不到；说明能够做什么。\n\n4. 不要容忍破窗户\n   Don‘t Live with Broken Windows\n   当你看到糟糕的设计、错误的决策和糟糕的代码，修正它们。\n\n5. 做变化的催化剂\n   Be a Catalyst for Change\n   你不能强迫人们改变。相反，要向他们展示未来可能会怎样，并帮助他们参与对未来的创造。\n\n6. 记住大图景\n   Remember the Big Picture\n   不要太过于专注细节，一致忘了查看你周围正在发生什么。\n\n7. 使质量成为需求问题\n   Make Quality a Requirements Issue\n   让你的用户参与确定真正的质量需求。\n\n8. 定期为你的知识资产投资\n   Invest Regularly in Your Knowledge Portfolio\n   让学习成为习惯。\n\n9. 批评地分析你读到的和听到的\n   Critically Analyze What You Read and Hear\n   不要被供应商、媒体炒作、或胶条左右。要按照你自己的看法和你的项目的情况去对信息进行分析。\n\n10. 你说什么和你怎么说同样重要\n   It's Both What You Say and the Way You Say It\n   如果你不能有效地向他人传达你的了不起想法，这些想法就毫无用处。\n\n11. 不要重复你自己\n   DRY - Don't Repeat Yourself\n   系统中的每一项知识都必须具有单一、无歧义、权威的表示。\n\n12. 让复用变得容易\n   Make It Easy to Reuse\n   如果复用很容易，人们就会去复用。创造一个支持复用的环境。\n\n13. 消除无关事物之间的影响\n   Eliminate Effects Between Unrelated Thins\n   设计自足、独立、并具有单一、良好定义的目的的组件。\n\n14. 不存在最终决策\n   There Are No Final Decisions\n   没有决策是浇铸在石头上的。相反，要把每项决策都视为是写在沙滩上的，并为变化做好计划。\n\n15. 用曳光弹找到目标\n   Use Tracer Bullets to Find the Target\n   用曳光弹能通过试验各种事物并检查它们离目标有多远来让你追踪目标。\n\n16. 为了学习而制作原型\n   Prototype to learn\n   原型制作是一种学习经验。其价值并不在于所产生的代码，而在于所学到的教经验教训。\n\n17. 靠近问题领域编程\n   Program Close to the Problem domain\n   用你的用户的语言进行设计和编码\n\n18. 估算，以避免发生意外\n   Estimate to Avoid Surprises\n   在着手之前先进行估算。你将提前发现潜在的问题。\n\n19. 通过代码对进度表进行迭代\n   Iterate the Schedule with the Code\n   用你在进行实现时获得的经验提炼项目的时间标度。\n\n20. 用纯文本保存知识\n   Keep Knowledge in Plain Text\n   纯文本不会过时。它能够帮助你有效利用你的工作，并简化调试和测试。\n\n21. 利用命令shell的力量\n   Use the Power of Command Shells\n   当图形用户界面无能为力时使用shell。\n\n22. 用好一种编辑器\n   Use a Single Editor Well\n   编辑器应该是你的手的延伸；确保你的编辑器是可配置、可拓展和可编程的。\n\n23. 总是使用源码控制\n   Always Use Source Code Control\n   源码控制是你的工作的时间机器 — 你能够回到过去。\n\n24. 要修正问题，而不是发出指责\n   Fix the Problem, Not the Blame\n   bug是你的过程还是别人的过程，并不是很重要 — 它仍然是你的问题，它仍然需要被修正。\n\n25. 不要恐慌\n   Don't Panic When Debuging\n   做一次深呼吸，思考什么可能是bug的原因。\n\n26. “Select”没有问题\n   “select” Isn't Broken\n   在OS或者是编译器、或者是第三方产品或库中很少发现bug。bug很可能在应用中。\n\n27. 不要假定，要证明\n   Don't Assume It — Prove It\n   在实际环境中 — 使用真正的数据和边界条件 — 证明你的假定。\n\n28. 学习一种文本操作语言\n   Learn a Text Manipilation Language\n   你用每天的很大一部分时间处理文本，为什么不让计算机替你完成部分工作呢？\n\n29. 编写能编写代码的代码\n   Write Code That Writes Code\n   代码生成器能提高你的生产率，并有助于避免重复。\n\n30. 你不可能写出完美的软件\n   You Can't Write Perfect Software\n   软件不可能完美。保护你的代码和用户，使它（他）们免于能够预见的错误。\n\n31. 通过合约进行设计\n   Design with Caontracts\n   使用合约建立文档，并检验代码所做的事情正好是它声明要做的。\n\n32. 早崩溃\n   Crash Early\n   死程序造成的危害通常比有问题的程序要小得多。\n\n33. 用断言避免不可能发生的事情\n   Use Assertions to Prevent the Impossible\n   断言验证你的各种假定。在一个不确定的世界里，用断言保护你的代码。\n\n34. 将异常用于异常的问题\n   Use Exceptions for Exceptional Problems\n   异常可能会遭受经典的意大利面条式的所有可能性和可维护性问题的折磨。将异常保给异常的事物。\n\n35. 要有始有终\n   Finish What You Start\n   只要可能，分配某资源的例程或对象也应该负责接触其分配。\n\n36. 是模块之间的耦合减至最少\n   Minimize Coupling Between Modules\n   通过编写“羞涩的”代码并应用得墨芯耳法则来避免耦合。\n\n37. 要配置，不要集成\n   Configure, Don't Integrate\n   要将应用的各种技术选择实现为可配置，而不是通过集成或工程方法实现。\n\n38. 将抽象放进代码，细节放进元数据\n   Put Abstractions in Code, Details in Metadata\n   为一本情况编程，将细节放在被编译的代码库之外。\n\n39. 分析工作流，以改善并发性\n   Analyze Workflow to Improve Concurrency\n   利用你的用户的工作流中的并发性。\n\n40. 用服务进行设计\n   Design Using Services\n   根据服务 — 独立的、在良好定义、一致的接口之后的并发对象 — 进行设计。\n\n41. 总是为并发进行设计\n   Always Design for Concurrency\n   容许并发，你将会设计出更整洁、具有更少假定的接口。\n\n42. 使试图与模型分离\n   Separate Views form Medels\n   要根据模型和视图设计你的应用，从而以低廉的代码获取灵活性。\n\n43. 用黑板协调工作流\n   Use BlackBoards to Coordinate Workflow\n   用黑板协调完全不同的事实和因素，同时又使各参与方保持独立和隔离。\n\n44. 不要靠巧合编程\n   Dont't Program by Coincidence\n   只依靠可靠的事物。注意偶发现的复杂性，不要把幸运的巧合与有目的的计划混为一谈。\n\n45. 估算你的算法的阶\n   Estimate the Order of Your Algorithms\n   在你编写代码之前，先大致估算事情需要多长时间。\n\n46. 测试你的估算\n   Test Your Estimates\n   对算法的数据分析并不会告诉你每一件事情。在你的代码的目标环境中测定它的速度。\n\n47. 早重构，常重构\n   Refactor Early, Refactor Often\n   就和你会在花园里除草、并重新布置一样，在需要时对代码进行重新、重做和重新架构。要铲除问题的根源。\n\n48. 为测试而设计\n   Design to Test\n   在你还没有编写代码时就开始思考问题。\n\n49. 测试你的软件，否则你的用户就得测试\n   Test Your Software, or Your Users Will\n   无情地测试。不要让你的用户为你查找bug。\n\n50. 不要使用你不理解的向导代码\n   Don't Use Wizard Code You Don't Understand\n   向导可以生成大量代码。在你把它们合并进你的项目之前，确保你理解全部的代码。\n\n51. 不要搜集需求 — 挖掘它们\n   Don't Gather Requirements — Dig for Them\n   需求很少存于表面上。它们深深地埋藏在层层假定、误解和政治手段的下面。\n\n52. 与用户一同工作，以像用户一样思考\n   Work with a User to Think Like a User\n   要了解系统实际上将如何被使用，这是最好的方法。\n\n53. 抽象比细节活得更长久\n   Abstractions Live Longer than Details\n   “投资”于抽象，而不是实现。抽象能在来自不同的实现和新技术的变化的“攻击”之下活下去。\n\n54. 使用项目词汇表\n   Use a Project Glossary\n   创建并维护项目中使用的专用术语和词汇的单一信息源。\n\n55. 不要在盒子外面思考 — 要找到盒子\n   Don't Think Outside the Box — Find the Box\n   在遇到不可能解决的问题时，要确定真正的约束。问问你自己：“它必须以这种方式完成吗？它真的必须完成吗？”\n\n56. 等你准备好再开始\n   Start When You're Ready\n   你的一生都在积累经验。不要忽视反复出现的疑虑。\n\n57. 对有些事情“做”胜于“描述”\n   Some Things Are Better Done than Described\n   不要掉进规范的螺旋 — 在某个时刻，你需要开始编码。\n\n58. 不要做形式方法的奴隶\n   Don't Be a Slave to Formal Methods\n   如果你没有把某些技术放进你的开发实践和能力的语境中，不要盲目地采用它。\n\n59. 昂贵的工具不一定能制作出更好的设计\n   Costly Tools Don't Produce Better Designs\n   小心供应商的炒作、行业教条、以及价格标签的诱惑。要根据工具的价值判断它们。\n\n60. 围绕功能组织团队\n   Organize Teams Around Functionality\n   不要把设计师与编码员分开，也不要把测试员与数据建模员分开。按照你构建代码的方式构建团队。\n\n61. 不要使用手工流程\n   Don't Use Manual Procedures\n   shell脚本或批文件会一次次地以同一顺序执行相同的指令。\n\n62. 早测试、常测试、自动测试\n   Test Early, Text Often, Text Automatically\n   与待在书架上的测试计划相比，每次构建时运行测试要有效得多。\n\n63. 要到通过全部测试，编码才算完成\n   Coding Ain't Done, Till All the Tests Run\n   就是这样。\n\n64. 通过“蓄意破坏”测试你的测试\n   Use Saboteurs to Test Your Testing\n   在单独的软件副本上故意引入bug，以检验测试能够抓住它们。\n\n65. 测试状态覆盖，而不是代码覆盖\n   Test State Coverage, Not Code Coverage\n   确定并测试重要的程序状态。只是测试代码行是不够的。\n\n66. 一个bug只抓一次\n   Find Bugs Once\n   一旦测试员找到一个bug，这应该是测试员最后一次找到它。此后自动测试应该对其进行检查。\n\n67. 英语就是一种编程语言\n   English is just a Programming Language\n   像你编写代码一样编写文档：遵守DRY原则、使用元数据、MVC、自动生成等等。\n\n68. 把文档建在里面，不要栓在外面\n   Build Documentation In. Don't Bolt It On\n   与代码分离的文档不太可能被修正和更新。\n\n69. 温和地超出用户的期待\n   Gently Exceed Your Users' Expectations\n   要理解你的用户的期望，然后给他们的东西要多那么一点。\n\n70. 在你的作品上签名\n   Sign Your Work\n   过去时代的手艺人为能在他们的作品上签名而自豪。你也应该如此。\n\n   ​\n\n   ​\n   ​\n   ​","source":"_posts/2016-10-22-coding-principle.md","raw":"---\ntitle: 程序员的70条原则\ncategories: 践行\n---\n\n在生活中，每个人都有一套自己的价值观，并形成一套处事原则，根据这套原则决定自己应该做什么，不应该做什么。可以说，所有的主动选择都是由价值观决定的。同理，在编程的世界里，程序员也需要一套原则，来规定自己应该做什么，不应该做什么。\n\n《程序员修炼之道 — 从小工到专家》一书给出了70条原则，可以作为每一个程序员的基本原则，我们可以根据这些原则来做正确的事情。\n\n1. 关心你的技艺\n   Care About Your Craft\n   如果你不在乎能否漂亮地开发出软件，你又为何要耗费生命去开发软件呢？\n\n2. 思考！你的工作\n   Think! About Your Work\n   关掉自动驾驶仪，接管操作。不断地批评和评估你的工作。\n\n3. 提供各种选择，不要找蹩脚的借口\n   Provide Options, Don't Make Lame Excuses\n   要提供各种选择，而不是找借口。不要说事情做不到；说明能够做什么。\n\n4. 不要容忍破窗户\n   Don‘t Live with Broken Windows\n   当你看到糟糕的设计、错误的决策和糟糕的代码，修正它们。\n\n5. 做变化的催化剂\n   Be a Catalyst for Change\n   你不能强迫人们改变。相反，要向他们展示未来可能会怎样，并帮助他们参与对未来的创造。\n\n6. 记住大图景\n   Remember the Big Picture\n   不要太过于专注细节，一致忘了查看你周围正在发生什么。\n\n7. 使质量成为需求问题\n   Make Quality a Requirements Issue\n   让你的用户参与确定真正的质量需求。\n\n8. 定期为你的知识资产投资\n   Invest Regularly in Your Knowledge Portfolio\n   让学习成为习惯。\n\n9. 批评地分析你读到的和听到的\n   Critically Analyze What You Read and Hear\n   不要被供应商、媒体炒作、或胶条左右。要按照你自己的看法和你的项目的情况去对信息进行分析。\n\n10. 你说什么和你怎么说同样重要\n   It's Both What You Say and the Way You Say It\n   如果你不能有效地向他人传达你的了不起想法，这些想法就毫无用处。\n\n11. 不要重复你自己\n   DRY - Don't Repeat Yourself\n   系统中的每一项知识都必须具有单一、无歧义、权威的表示。\n\n12. 让复用变得容易\n   Make It Easy to Reuse\n   如果复用很容易，人们就会去复用。创造一个支持复用的环境。\n\n13. 消除无关事物之间的影响\n   Eliminate Effects Between Unrelated Thins\n   设计自足、独立、并具有单一、良好定义的目的的组件。\n\n14. 不存在最终决策\n   There Are No Final Decisions\n   没有决策是浇铸在石头上的。相反，要把每项决策都视为是写在沙滩上的，并为变化做好计划。\n\n15. 用曳光弹找到目标\n   Use Tracer Bullets to Find the Target\n   用曳光弹能通过试验各种事物并检查它们离目标有多远来让你追踪目标。\n\n16. 为了学习而制作原型\n   Prototype to learn\n   原型制作是一种学习经验。其价值并不在于所产生的代码，而在于所学到的教经验教训。\n\n17. 靠近问题领域编程\n   Program Close to the Problem domain\n   用你的用户的语言进行设计和编码\n\n18. 估算，以避免发生意外\n   Estimate to Avoid Surprises\n   在着手之前先进行估算。你将提前发现潜在的问题。\n\n19. 通过代码对进度表进行迭代\n   Iterate the Schedule with the Code\n   用你在进行实现时获得的经验提炼项目的时间标度。\n\n20. 用纯文本保存知识\n   Keep Knowledge in Plain Text\n   纯文本不会过时。它能够帮助你有效利用你的工作，并简化调试和测试。\n\n21. 利用命令shell的力量\n   Use the Power of Command Shells\n   当图形用户界面无能为力时使用shell。\n\n22. 用好一种编辑器\n   Use a Single Editor Well\n   编辑器应该是你的手的延伸；确保你的编辑器是可配置、可拓展和可编程的。\n\n23. 总是使用源码控制\n   Always Use Source Code Control\n   源码控制是你的工作的时间机器 — 你能够回到过去。\n\n24. 要修正问题，而不是发出指责\n   Fix the Problem, Not the Blame\n   bug是你的过程还是别人的过程，并不是很重要 — 它仍然是你的问题，它仍然需要被修正。\n\n25. 不要恐慌\n   Don't Panic When Debuging\n   做一次深呼吸，思考什么可能是bug的原因。\n\n26. “Select”没有问题\n   “select” Isn't Broken\n   在OS或者是编译器、或者是第三方产品或库中很少发现bug。bug很可能在应用中。\n\n27. 不要假定，要证明\n   Don't Assume It — Prove It\n   在实际环境中 — 使用真正的数据和边界条件 — 证明你的假定。\n\n28. 学习一种文本操作语言\n   Learn a Text Manipilation Language\n   你用每天的很大一部分时间处理文本，为什么不让计算机替你完成部分工作呢？\n\n29. 编写能编写代码的代码\n   Write Code That Writes Code\n   代码生成器能提高你的生产率，并有助于避免重复。\n\n30. 你不可能写出完美的软件\n   You Can't Write Perfect Software\n   软件不可能完美。保护你的代码和用户，使它（他）们免于能够预见的错误。\n\n31. 通过合约进行设计\n   Design with Caontracts\n   使用合约建立文档，并检验代码所做的事情正好是它声明要做的。\n\n32. 早崩溃\n   Crash Early\n   死程序造成的危害通常比有问题的程序要小得多。\n\n33. 用断言避免不可能发生的事情\n   Use Assertions to Prevent the Impossible\n   断言验证你的各种假定。在一个不确定的世界里，用断言保护你的代码。\n\n34. 将异常用于异常的问题\n   Use Exceptions for Exceptional Problems\n   异常可能会遭受经典的意大利面条式的所有可能性和可维护性问题的折磨。将异常保给异常的事物。\n\n35. 要有始有终\n   Finish What You Start\n   只要可能，分配某资源的例程或对象也应该负责接触其分配。\n\n36. 是模块之间的耦合减至最少\n   Minimize Coupling Between Modules\n   通过编写“羞涩的”代码并应用得墨芯耳法则来避免耦合。\n\n37. 要配置，不要集成\n   Configure, Don't Integrate\n   要将应用的各种技术选择实现为可配置，而不是通过集成或工程方法实现。\n\n38. 将抽象放进代码，细节放进元数据\n   Put Abstractions in Code, Details in Metadata\n   为一本情况编程，将细节放在被编译的代码库之外。\n\n39. 分析工作流，以改善并发性\n   Analyze Workflow to Improve Concurrency\n   利用你的用户的工作流中的并发性。\n\n40. 用服务进行设计\n   Design Using Services\n   根据服务 — 独立的、在良好定义、一致的接口之后的并发对象 — 进行设计。\n\n41. 总是为并发进行设计\n   Always Design for Concurrency\n   容许并发，你将会设计出更整洁、具有更少假定的接口。\n\n42. 使试图与模型分离\n   Separate Views form Medels\n   要根据模型和视图设计你的应用，从而以低廉的代码获取灵活性。\n\n43. 用黑板协调工作流\n   Use BlackBoards to Coordinate Workflow\n   用黑板协调完全不同的事实和因素，同时又使各参与方保持独立和隔离。\n\n44. 不要靠巧合编程\n   Dont't Program by Coincidence\n   只依靠可靠的事物。注意偶发现的复杂性，不要把幸运的巧合与有目的的计划混为一谈。\n\n45. 估算你的算法的阶\n   Estimate the Order of Your Algorithms\n   在你编写代码之前，先大致估算事情需要多长时间。\n\n46. 测试你的估算\n   Test Your Estimates\n   对算法的数据分析并不会告诉你每一件事情。在你的代码的目标环境中测定它的速度。\n\n47. 早重构，常重构\n   Refactor Early, Refactor Often\n   就和你会在花园里除草、并重新布置一样，在需要时对代码进行重新、重做和重新架构。要铲除问题的根源。\n\n48. 为测试而设计\n   Design to Test\n   在你还没有编写代码时就开始思考问题。\n\n49. 测试你的软件，否则你的用户就得测试\n   Test Your Software, or Your Users Will\n   无情地测试。不要让你的用户为你查找bug。\n\n50. 不要使用你不理解的向导代码\n   Don't Use Wizard Code You Don't Understand\n   向导可以生成大量代码。在你把它们合并进你的项目之前，确保你理解全部的代码。\n\n51. 不要搜集需求 — 挖掘它们\n   Don't Gather Requirements — Dig for Them\n   需求很少存于表面上。它们深深地埋藏在层层假定、误解和政治手段的下面。\n\n52. 与用户一同工作，以像用户一样思考\n   Work with a User to Think Like a User\n   要了解系统实际上将如何被使用，这是最好的方法。\n\n53. 抽象比细节活得更长久\n   Abstractions Live Longer than Details\n   “投资”于抽象，而不是实现。抽象能在来自不同的实现和新技术的变化的“攻击”之下活下去。\n\n54. 使用项目词汇表\n   Use a Project Glossary\n   创建并维护项目中使用的专用术语和词汇的单一信息源。\n\n55. 不要在盒子外面思考 — 要找到盒子\n   Don't Think Outside the Box — Find the Box\n   在遇到不可能解决的问题时，要确定真正的约束。问问你自己：“它必须以这种方式完成吗？它真的必须完成吗？”\n\n56. 等你准备好再开始\n   Start When You're Ready\n   你的一生都在积累经验。不要忽视反复出现的疑虑。\n\n57. 对有些事情“做”胜于“描述”\n   Some Things Are Better Done than Described\n   不要掉进规范的螺旋 — 在某个时刻，你需要开始编码。\n\n58. 不要做形式方法的奴隶\n   Don't Be a Slave to Formal Methods\n   如果你没有把某些技术放进你的开发实践和能力的语境中，不要盲目地采用它。\n\n59. 昂贵的工具不一定能制作出更好的设计\n   Costly Tools Don't Produce Better Designs\n   小心供应商的炒作、行业教条、以及价格标签的诱惑。要根据工具的价值判断它们。\n\n60. 围绕功能组织团队\n   Organize Teams Around Functionality\n   不要把设计师与编码员分开，也不要把测试员与数据建模员分开。按照你构建代码的方式构建团队。\n\n61. 不要使用手工流程\n   Don't Use Manual Procedures\n   shell脚本或批文件会一次次地以同一顺序执行相同的指令。\n\n62. 早测试、常测试、自动测试\n   Test Early, Text Often, Text Automatically\n   与待在书架上的测试计划相比，每次构建时运行测试要有效得多。\n\n63. 要到通过全部测试，编码才算完成\n   Coding Ain't Done, Till All the Tests Run\n   就是这样。\n\n64. 通过“蓄意破坏”测试你的测试\n   Use Saboteurs to Test Your Testing\n   在单独的软件副本上故意引入bug，以检验测试能够抓住它们。\n\n65. 测试状态覆盖，而不是代码覆盖\n   Test State Coverage, Not Code Coverage\n   确定并测试重要的程序状态。只是测试代码行是不够的。\n\n66. 一个bug只抓一次\n   Find Bugs Once\n   一旦测试员找到一个bug，这应该是测试员最后一次找到它。此后自动测试应该对其进行检查。\n\n67. 英语就是一种编程语言\n   English is just a Programming Language\n   像你编写代码一样编写文档：遵守DRY原则、使用元数据、MVC、自动生成等等。\n\n68. 把文档建在里面，不要栓在外面\n   Build Documentation In. Don't Bolt It On\n   与代码分离的文档不太可能被修正和更新。\n\n69. 温和地超出用户的期待\n   Gently Exceed Your Users' Expectations\n   要理解你的用户的期望，然后给他们的东西要多那么一点。\n\n70. 在你的作品上签名\n   Sign Your Work\n   过去时代的手艺人为能在他们的作品上签名而自豪。你也应该如此。\n\n   ​\n\n   ​\n   ​\n   ​","slug":"2016-10-22-coding-principle","published":1,"date":"2016-10-22T12:13:55.000Z","updated":"2016-12-21T02:47:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr9o001ey3on4q3zpb44","content":"<p>在生活中，每个人都有一套自己的价值观，并形成一套处事原则，根据这套原则决定自己应该做什么，不应该做什么。可以说，所有的主动选择都是由价值观决定的。同理，在编程的世界里，程序员也需要一套原则，来规定自己应该做什么，不应该做什么。</p>\n<p>《程序员修炼之道 — 从小工到专家》一书给出了70条原则，可以作为每一个程序员的基本原则，我们可以根据这些原则来做正确的事情。</p>\n<ol>\n<li><p>关心你的技艺<br>Care About Your Craft<br>如果你不在乎能否漂亮地开发出软件，你又为何要耗费生命去开发软件呢？</p>\n</li>\n<li><p>思考！你的工作<br>Think! About Your Work<br>关掉自动驾驶仪，接管操作。不断地批评和评估你的工作。</p>\n</li>\n<li><p>提供各种选择，不要找蹩脚的借口<br>Provide Options, Don’t Make Lame Excuses<br>要提供各种选择，而不是找借口。不要说事情做不到；说明能够做什么。</p>\n</li>\n<li><p>不要容忍破窗户<br>Don‘t Live with Broken Windows<br>当你看到糟糕的设计、错误的决策和糟糕的代码，修正它们。</p>\n</li>\n<li><p>做变化的催化剂<br>Be a Catalyst for Change<br>你不能强迫人们改变。相反，要向他们展示未来可能会怎样，并帮助他们参与对未来的创造。</p>\n</li>\n<li><p>记住大图景<br>Remember the Big Picture<br>不要太过于专注细节，一致忘了查看你周围正在发生什么。</p>\n</li>\n<li><p>使质量成为需求问题<br>Make Quality a Requirements Issue<br>让你的用户参与确定真正的质量需求。</p>\n</li>\n<li><p>定期为你的知识资产投资<br>Invest Regularly in Your Knowledge Portfolio<br>让学习成为习惯。</p>\n</li>\n<li><p>批评地分析你读到的和听到的<br>Critically Analyze What You Read and Hear<br>不要被供应商、媒体炒作、或胶条左右。要按照你自己的看法和你的项目的情况去对信息进行分析。</p>\n</li>\n<li><p>你说什么和你怎么说同样重要<br>It’s Both What You Say and the Way You Say It<br>如果你不能有效地向他人传达你的了不起想法，这些想法就毫无用处。</p>\n</li>\n<li><p>不要重复你自己<br>DRY - Don’t Repeat Yourself<br>系统中的每一项知识都必须具有单一、无歧义、权威的表示。</p>\n</li>\n<li><p>让复用变得容易<br>Make It Easy to Reuse<br>如果复用很容易，人们就会去复用。创造一个支持复用的环境。</p>\n</li>\n<li><p>消除无关事物之间的影响<br>Eliminate Effects Between Unrelated Thins<br>设计自足、独立、并具有单一、良好定义的目的的组件。</p>\n</li>\n<li><p>不存在最终决策<br>There Are No Final Decisions<br>没有决策是浇铸在石头上的。相反，要把每项决策都视为是写在沙滩上的，并为变化做好计划。</p>\n</li>\n<li><p>用曳光弹找到目标<br>Use Tracer Bullets to Find the Target<br>用曳光弹能通过试验各种事物并检查它们离目标有多远来让你追踪目标。</p>\n</li>\n<li><p>为了学习而制作原型<br>Prototype to learn<br>原型制作是一种学习经验。其价值并不在于所产生的代码，而在于所学到的教经验教训。</p>\n</li>\n<li><p>靠近问题领域编程<br>Program Close to the Problem domain<br>用你的用户的语言进行设计和编码</p>\n</li>\n<li><p>估算，以避免发生意外<br>Estimate to Avoid Surprises<br>在着手之前先进行估算。你将提前发现潜在的问题。</p>\n</li>\n<li><p>通过代码对进度表进行迭代<br>Iterate the Schedule with the Code<br>用你在进行实现时获得的经验提炼项目的时间标度。</p>\n</li>\n<li><p>用纯文本保存知识<br>Keep Knowledge in Plain Text<br>纯文本不会过时。它能够帮助你有效利用你的工作，并简化调试和测试。</p>\n</li>\n<li><p>利用命令shell的力量<br>Use the Power of Command Shells<br>当图形用户界面无能为力时使用shell。</p>\n</li>\n<li><p>用好一种编辑器<br>Use a Single Editor Well<br>编辑器应该是你的手的延伸；确保你的编辑器是可配置、可拓展和可编程的。</p>\n</li>\n<li><p>总是使用源码控制<br>Always Use Source Code Control<br>源码控制是你的工作的时间机器 — 你能够回到过去。</p>\n</li>\n<li><p>要修正问题，而不是发出指责<br>Fix the Problem, Not the Blame<br>bug是你的过程还是别人的过程，并不是很重要 — 它仍然是你的问题，它仍然需要被修正。</p>\n</li>\n<li><p>不要恐慌<br>Don’t Panic When Debuging<br>做一次深呼吸，思考什么可能是bug的原因。</p>\n</li>\n<li><p>“Select”没有问题<br>“select” Isn’t Broken<br>在OS或者是编译器、或者是第三方产品或库中很少发现bug。bug很可能在应用中。</p>\n</li>\n<li><p>不要假定，要证明<br>Don’t Assume It — Prove It<br>在实际环境中 — 使用真正的数据和边界条件 — 证明你的假定。</p>\n</li>\n<li><p>学习一种文本操作语言<br>Learn a Text Manipilation Language<br>你用每天的很大一部分时间处理文本，为什么不让计算机替你完成部分工作呢？</p>\n</li>\n<li><p>编写能编写代码的代码<br>Write Code That Writes Code<br>代码生成器能提高你的生产率，并有助于避免重复。</p>\n</li>\n<li><p>你不可能写出完美的软件<br>You Can’t Write Perfect Software<br>软件不可能完美。保护你的代码和用户，使它（他）们免于能够预见的错误。</p>\n</li>\n<li><p>通过合约进行设计<br>Design with Caontracts<br>使用合约建立文档，并检验代码所做的事情正好是它声明要做的。</p>\n</li>\n<li><p>早崩溃<br>Crash Early<br>死程序造成的危害通常比有问题的程序要小得多。</p>\n</li>\n<li><p>用断言避免不可能发生的事情<br>Use Assertions to Prevent the Impossible<br>断言验证你的各种假定。在一个不确定的世界里，用断言保护你的代码。</p>\n</li>\n<li><p>将异常用于异常的问题<br>Use Exceptions for Exceptional Problems<br>异常可能会遭受经典的意大利面条式的所有可能性和可维护性问题的折磨。将异常保给异常的事物。</p>\n</li>\n<li><p>要有始有终<br>Finish What You Start<br>只要可能，分配某资源的例程或对象也应该负责接触其分配。</p>\n</li>\n<li><p>是模块之间的耦合减至最少<br>Minimize Coupling Between Modules<br>通过编写“羞涩的”代码并应用得墨芯耳法则来避免耦合。</p>\n</li>\n<li><p>要配置，不要集成<br>Configure, Don’t Integrate<br>要将应用的各种技术选择实现为可配置，而不是通过集成或工程方法实现。</p>\n</li>\n<li><p>将抽象放进代码，细节放进元数据<br>Put Abstractions in Code, Details in Metadata<br>为一本情况编程，将细节放在被编译的代码库之外。</p>\n</li>\n<li><p>分析工作流，以改善并发性<br>Analyze Workflow to Improve Concurrency<br>利用你的用户的工作流中的并发性。</p>\n</li>\n<li><p>用服务进行设计<br>Design Using Services<br>根据服务 — 独立的、在良好定义、一致的接口之后的并发对象 — 进行设计。</p>\n</li>\n<li><p>总是为并发进行设计<br>Always Design for Concurrency<br>容许并发，你将会设计出更整洁、具有更少假定的接口。</p>\n</li>\n<li><p>使试图与模型分离<br>Separate Views form Medels<br>要根据模型和视图设计你的应用，从而以低廉的代码获取灵活性。</p>\n</li>\n<li><p>用黑板协调工作流<br>Use BlackBoards to Coordinate Workflow<br>用黑板协调完全不同的事实和因素，同时又使各参与方保持独立和隔离。</p>\n</li>\n<li><p>不要靠巧合编程<br>Dont’t Program by Coincidence<br>只依靠可靠的事物。注意偶发现的复杂性，不要把幸运的巧合与有目的的计划混为一谈。</p>\n</li>\n<li><p>估算你的算法的阶<br>Estimate the Order of Your Algorithms<br>在你编写代码之前，先大致估算事情需要多长时间。</p>\n</li>\n<li><p>测试你的估算<br>Test Your Estimates<br>对算法的数据分析并不会告诉你每一件事情。在你的代码的目标环境中测定它的速度。</p>\n</li>\n<li><p>早重构，常重构<br>Refactor Early, Refactor Often<br>就和你会在花园里除草、并重新布置一样，在需要时对代码进行重新、重做和重新架构。要铲除问题的根源。</p>\n</li>\n<li><p>为测试而设计<br>Design to Test<br>在你还没有编写代码时就开始思考问题。</p>\n</li>\n<li><p>测试你的软件，否则你的用户就得测试<br>Test Your Software, or Your Users Will<br>无情地测试。不要让你的用户为你查找bug。</p>\n</li>\n<li><p>不要使用你不理解的向导代码<br>Don’t Use Wizard Code You Don’t Understand<br>向导可以生成大量代码。在你把它们合并进你的项目之前，确保你理解全部的代码。</p>\n</li>\n<li><p>不要搜集需求 — 挖掘它们<br>Don’t Gather Requirements — Dig for Them<br>需求很少存于表面上。它们深深地埋藏在层层假定、误解和政治手段的下面。</p>\n</li>\n<li><p>与用户一同工作，以像用户一样思考<br>Work with a User to Think Like a User<br>要了解系统实际上将如何被使用，这是最好的方法。</p>\n</li>\n<li><p>抽象比细节活得更长久<br>Abstractions Live Longer than Details<br>“投资”于抽象，而不是实现。抽象能在来自不同的实现和新技术的变化的“攻击”之下活下去。</p>\n</li>\n<li><p>使用项目词汇表<br>Use a Project Glossary<br>创建并维护项目中使用的专用术语和词汇的单一信息源。</p>\n</li>\n<li><p>不要在盒子外面思考 — 要找到盒子<br>Don’t Think Outside the Box — Find the Box<br>在遇到不可能解决的问题时，要确定真正的约束。问问你自己：“它必须以这种方式完成吗？它真的必须完成吗？”</p>\n</li>\n<li><p>等你准备好再开始<br>Start When You’re Ready<br>你的一生都在积累经验。不要忽视反复出现的疑虑。</p>\n</li>\n<li><p>对有些事情“做”胜于“描述”<br>Some Things Are Better Done than Described<br>不要掉进规范的螺旋 — 在某个时刻，你需要开始编码。</p>\n</li>\n<li><p>不要做形式方法的奴隶<br>Don’t Be a Slave to Formal Methods<br>如果你没有把某些技术放进你的开发实践和能力的语境中，不要盲目地采用它。</p>\n</li>\n<li><p>昂贵的工具不一定能制作出更好的设计<br>Costly Tools Don’t Produce Better Designs<br>小心供应商的炒作、行业教条、以及价格标签的诱惑。要根据工具的价值判断它们。</p>\n</li>\n<li><p>围绕功能组织团队<br>Organize Teams Around Functionality<br>不要把设计师与编码员分开，也不要把测试员与数据建模员分开。按照你构建代码的方式构建团队。</p>\n</li>\n<li><p>不要使用手工流程<br>Don’t Use Manual Procedures<br>shell脚本或批文件会一次次地以同一顺序执行相同的指令。</p>\n</li>\n<li><p>早测试、常测试、自动测试<br>Test Early, Text Often, Text Automatically<br>与待在书架上的测试计划相比，每次构建时运行测试要有效得多。</p>\n</li>\n<li><p>要到通过全部测试，编码才算完成<br>Coding Ain’t Done, Till All the Tests Run<br>就是这样。</p>\n</li>\n<li><p>通过“蓄意破坏”测试你的测试<br>Use Saboteurs to Test Your Testing<br>在单独的软件副本上故意引入bug，以检验测试能够抓住它们。</p>\n</li>\n<li><p>测试状态覆盖，而不是代码覆盖<br>Test State Coverage, Not Code Coverage<br>确定并测试重要的程序状态。只是测试代码行是不够的。</p>\n</li>\n<li><p>一个bug只抓一次<br>Find Bugs Once<br>一旦测试员找到一个bug，这应该是测试员最后一次找到它。此后自动测试应该对其进行检查。</p>\n</li>\n<li><p>英语就是一种编程语言<br>English is just a Programming Language<br>像你编写代码一样编写文档：遵守DRY原则、使用元数据、MVC、自动生成等等。</p>\n</li>\n<li><p>把文档建在里面，不要栓在外面<br>Build Documentation In. Don’t Bolt It On<br>与代码分离的文档不太可能被修正和更新。</p>\n</li>\n<li><p>温和地超出用户的期待<br>Gently Exceed Your Users’ Expectations<br>要理解你的用户的期望，然后给他们的东西要多那么一点。</p>\n</li>\n<li><p>在你的作品上签名<br>Sign Your Work<br>过去时代的手艺人为能在他们的作品上签名而自豪。你也应该如此。</p>\n<p>​</p>\n<p>​<br>​<br>​</p>\n</li>\n</ol>\n","excerpt":"","more":"<p>在生活中，每个人都有一套自己的价值观，并形成一套处事原则，根据这套原则决定自己应该做什么，不应该做什么。可以说，所有的主动选择都是由价值观决定的。同理，在编程的世界里，程序员也需要一套原则，来规定自己应该做什么，不应该做什么。</p>\n<p>《程序员修炼之道 — 从小工到专家》一书给出了70条原则，可以作为每一个程序员的基本原则，我们可以根据这些原则来做正确的事情。</p>\n<ol>\n<li><p>关心你的技艺<br>Care About Your Craft<br>如果你不在乎能否漂亮地开发出软件，你又为何要耗费生命去开发软件呢？</p>\n</li>\n<li><p>思考！你的工作<br>Think! About Your Work<br>关掉自动驾驶仪，接管操作。不断地批评和评估你的工作。</p>\n</li>\n<li><p>提供各种选择，不要找蹩脚的借口<br>Provide Options, Don’t Make Lame Excuses<br>要提供各种选择，而不是找借口。不要说事情做不到；说明能够做什么。</p>\n</li>\n<li><p>不要容忍破窗户<br>Don‘t Live with Broken Windows<br>当你看到糟糕的设计、错误的决策和糟糕的代码，修正它们。</p>\n</li>\n<li><p>做变化的催化剂<br>Be a Catalyst for Change<br>你不能强迫人们改变。相反，要向他们展示未来可能会怎样，并帮助他们参与对未来的创造。</p>\n</li>\n<li><p>记住大图景<br>Remember the Big Picture<br>不要太过于专注细节，一致忘了查看你周围正在发生什么。</p>\n</li>\n<li><p>使质量成为需求问题<br>Make Quality a Requirements Issue<br>让你的用户参与确定真正的质量需求。</p>\n</li>\n<li><p>定期为你的知识资产投资<br>Invest Regularly in Your Knowledge Portfolio<br>让学习成为习惯。</p>\n</li>\n<li><p>批评地分析你读到的和听到的<br>Critically Analyze What You Read and Hear<br>不要被供应商、媒体炒作、或胶条左右。要按照你自己的看法和你的项目的情况去对信息进行分析。</p>\n</li>\n<li><p>你说什么和你怎么说同样重要<br>It’s Both What You Say and the Way You Say It<br>如果你不能有效地向他人传达你的了不起想法，这些想法就毫无用处。</p>\n</li>\n<li><p>不要重复你自己<br>DRY - Don’t Repeat Yourself<br>系统中的每一项知识都必须具有单一、无歧义、权威的表示。</p>\n</li>\n<li><p>让复用变得容易<br>Make It Easy to Reuse<br>如果复用很容易，人们就会去复用。创造一个支持复用的环境。</p>\n</li>\n<li><p>消除无关事物之间的影响<br>Eliminate Effects Between Unrelated Thins<br>设计自足、独立、并具有单一、良好定义的目的的组件。</p>\n</li>\n<li><p>不存在最终决策<br>There Are No Final Decisions<br>没有决策是浇铸在石头上的。相反，要把每项决策都视为是写在沙滩上的，并为变化做好计划。</p>\n</li>\n<li><p>用曳光弹找到目标<br>Use Tracer Bullets to Find the Target<br>用曳光弹能通过试验各种事物并检查它们离目标有多远来让你追踪目标。</p>\n</li>\n<li><p>为了学习而制作原型<br>Prototype to learn<br>原型制作是一种学习经验。其价值并不在于所产生的代码，而在于所学到的教经验教训。</p>\n</li>\n<li><p>靠近问题领域编程<br>Program Close to the Problem domain<br>用你的用户的语言进行设计和编码</p>\n</li>\n<li><p>估算，以避免发生意外<br>Estimate to Avoid Surprises<br>在着手之前先进行估算。你将提前发现潜在的问题。</p>\n</li>\n<li><p>通过代码对进度表进行迭代<br>Iterate the Schedule with the Code<br>用你在进行实现时获得的经验提炼项目的时间标度。</p>\n</li>\n<li><p>用纯文本保存知识<br>Keep Knowledge in Plain Text<br>纯文本不会过时。它能够帮助你有效利用你的工作，并简化调试和测试。</p>\n</li>\n<li><p>利用命令shell的力量<br>Use the Power of Command Shells<br>当图形用户界面无能为力时使用shell。</p>\n</li>\n<li><p>用好一种编辑器<br>Use a Single Editor Well<br>编辑器应该是你的手的延伸；确保你的编辑器是可配置、可拓展和可编程的。</p>\n</li>\n<li><p>总是使用源码控制<br>Always Use Source Code Control<br>源码控制是你的工作的时间机器 — 你能够回到过去。</p>\n</li>\n<li><p>要修正问题，而不是发出指责<br>Fix the Problem, Not the Blame<br>bug是你的过程还是别人的过程，并不是很重要 — 它仍然是你的问题，它仍然需要被修正。</p>\n</li>\n<li><p>不要恐慌<br>Don’t Panic When Debuging<br>做一次深呼吸，思考什么可能是bug的原因。</p>\n</li>\n<li><p>“Select”没有问题<br>“select” Isn’t Broken<br>在OS或者是编译器、或者是第三方产品或库中很少发现bug。bug很可能在应用中。</p>\n</li>\n<li><p>不要假定，要证明<br>Don’t Assume It — Prove It<br>在实际环境中 — 使用真正的数据和边界条件 — 证明你的假定。</p>\n</li>\n<li><p>学习一种文本操作语言<br>Learn a Text Manipilation Language<br>你用每天的很大一部分时间处理文本，为什么不让计算机替你完成部分工作呢？</p>\n</li>\n<li><p>编写能编写代码的代码<br>Write Code That Writes Code<br>代码生成器能提高你的生产率，并有助于避免重复。</p>\n</li>\n<li><p>你不可能写出完美的软件<br>You Can’t Write Perfect Software<br>软件不可能完美。保护你的代码和用户，使它（他）们免于能够预见的错误。</p>\n</li>\n<li><p>通过合约进行设计<br>Design with Caontracts<br>使用合约建立文档，并检验代码所做的事情正好是它声明要做的。</p>\n</li>\n<li><p>早崩溃<br>Crash Early<br>死程序造成的危害通常比有问题的程序要小得多。</p>\n</li>\n<li><p>用断言避免不可能发生的事情<br>Use Assertions to Prevent the Impossible<br>断言验证你的各种假定。在一个不确定的世界里，用断言保护你的代码。</p>\n</li>\n<li><p>将异常用于异常的问题<br>Use Exceptions for Exceptional Problems<br>异常可能会遭受经典的意大利面条式的所有可能性和可维护性问题的折磨。将异常保给异常的事物。</p>\n</li>\n<li><p>要有始有终<br>Finish What You Start<br>只要可能，分配某资源的例程或对象也应该负责接触其分配。</p>\n</li>\n<li><p>是模块之间的耦合减至最少<br>Minimize Coupling Between Modules<br>通过编写“羞涩的”代码并应用得墨芯耳法则来避免耦合。</p>\n</li>\n<li><p>要配置，不要集成<br>Configure, Don’t Integrate<br>要将应用的各种技术选择实现为可配置，而不是通过集成或工程方法实现。</p>\n</li>\n<li><p>将抽象放进代码，细节放进元数据<br>Put Abstractions in Code, Details in Metadata<br>为一本情况编程，将细节放在被编译的代码库之外。</p>\n</li>\n<li><p>分析工作流，以改善并发性<br>Analyze Workflow to Improve Concurrency<br>利用你的用户的工作流中的并发性。</p>\n</li>\n<li><p>用服务进行设计<br>Design Using Services<br>根据服务 — 独立的、在良好定义、一致的接口之后的并发对象 — 进行设计。</p>\n</li>\n<li><p>总是为并发进行设计<br>Always Design for Concurrency<br>容许并发，你将会设计出更整洁、具有更少假定的接口。</p>\n</li>\n<li><p>使试图与模型分离<br>Separate Views form Medels<br>要根据模型和视图设计你的应用，从而以低廉的代码获取灵活性。</p>\n</li>\n<li><p>用黑板协调工作流<br>Use BlackBoards to Coordinate Workflow<br>用黑板协调完全不同的事实和因素，同时又使各参与方保持独立和隔离。</p>\n</li>\n<li><p>不要靠巧合编程<br>Dont’t Program by Coincidence<br>只依靠可靠的事物。注意偶发现的复杂性，不要把幸运的巧合与有目的的计划混为一谈。</p>\n</li>\n<li><p>估算你的算法的阶<br>Estimate the Order of Your Algorithms<br>在你编写代码之前，先大致估算事情需要多长时间。</p>\n</li>\n<li><p>测试你的估算<br>Test Your Estimates<br>对算法的数据分析并不会告诉你每一件事情。在你的代码的目标环境中测定它的速度。</p>\n</li>\n<li><p>早重构，常重构<br>Refactor Early, Refactor Often<br>就和你会在花园里除草、并重新布置一样，在需要时对代码进行重新、重做和重新架构。要铲除问题的根源。</p>\n</li>\n<li><p>为测试而设计<br>Design to Test<br>在你还没有编写代码时就开始思考问题。</p>\n</li>\n<li><p>测试你的软件，否则你的用户就得测试<br>Test Your Software, or Your Users Will<br>无情地测试。不要让你的用户为你查找bug。</p>\n</li>\n<li><p>不要使用你不理解的向导代码<br>Don’t Use Wizard Code You Don’t Understand<br>向导可以生成大量代码。在你把它们合并进你的项目之前，确保你理解全部的代码。</p>\n</li>\n<li><p>不要搜集需求 — 挖掘它们<br>Don’t Gather Requirements — Dig for Them<br>需求很少存于表面上。它们深深地埋藏在层层假定、误解和政治手段的下面。</p>\n</li>\n<li><p>与用户一同工作，以像用户一样思考<br>Work with a User to Think Like a User<br>要了解系统实际上将如何被使用，这是最好的方法。</p>\n</li>\n<li><p>抽象比细节活得更长久<br>Abstractions Live Longer than Details<br>“投资”于抽象，而不是实现。抽象能在来自不同的实现和新技术的变化的“攻击”之下活下去。</p>\n</li>\n<li><p>使用项目词汇表<br>Use a Project Glossary<br>创建并维护项目中使用的专用术语和词汇的单一信息源。</p>\n</li>\n<li><p>不要在盒子外面思考 — 要找到盒子<br>Don’t Think Outside the Box — Find the Box<br>在遇到不可能解决的问题时，要确定真正的约束。问问你自己：“它必须以这种方式完成吗？它真的必须完成吗？”</p>\n</li>\n<li><p>等你准备好再开始<br>Start When You’re Ready<br>你的一生都在积累经验。不要忽视反复出现的疑虑。</p>\n</li>\n<li><p>对有些事情“做”胜于“描述”<br>Some Things Are Better Done than Described<br>不要掉进规范的螺旋 — 在某个时刻，你需要开始编码。</p>\n</li>\n<li><p>不要做形式方法的奴隶<br>Don’t Be a Slave to Formal Methods<br>如果你没有把某些技术放进你的开发实践和能力的语境中，不要盲目地采用它。</p>\n</li>\n<li><p>昂贵的工具不一定能制作出更好的设计<br>Costly Tools Don’t Produce Better Designs<br>小心供应商的炒作、行业教条、以及价格标签的诱惑。要根据工具的价值判断它们。</p>\n</li>\n<li><p>围绕功能组织团队<br>Organize Teams Around Functionality<br>不要把设计师与编码员分开，也不要把测试员与数据建模员分开。按照你构建代码的方式构建团队。</p>\n</li>\n<li><p>不要使用手工流程<br>Don’t Use Manual Procedures<br>shell脚本或批文件会一次次地以同一顺序执行相同的指令。</p>\n</li>\n<li><p>早测试、常测试、自动测试<br>Test Early, Text Often, Text Automatically<br>与待在书架上的测试计划相比，每次构建时运行测试要有效得多。</p>\n</li>\n<li><p>要到通过全部测试，编码才算完成<br>Coding Ain’t Done, Till All the Tests Run<br>就是这样。</p>\n</li>\n<li><p>通过“蓄意破坏”测试你的测试<br>Use Saboteurs to Test Your Testing<br>在单独的软件副本上故意引入bug，以检验测试能够抓住它们。</p>\n</li>\n<li><p>测试状态覆盖，而不是代码覆盖<br>Test State Coverage, Not Code Coverage<br>确定并测试重要的程序状态。只是测试代码行是不够的。</p>\n</li>\n<li><p>一个bug只抓一次<br>Find Bugs Once<br>一旦测试员找到一个bug，这应该是测试员最后一次找到它。此后自动测试应该对其进行检查。</p>\n</li>\n<li><p>英语就是一种编程语言<br>English is just a Programming Language<br>像你编写代码一样编写文档：遵守DRY原则、使用元数据、MVC、自动生成等等。</p>\n</li>\n<li><p>把文档建在里面，不要栓在外面<br>Build Documentation In. Don’t Bolt It On<br>与代码分离的文档不太可能被修正和更新。</p>\n</li>\n<li><p>温和地超出用户的期待<br>Gently Exceed Your Users’ Expectations<br>要理解你的用户的期望，然后给他们的东西要多那么一点。</p>\n</li>\n<li><p>在你的作品上签名<br>Sign Your Work<br>过去时代的手艺人为能在他们的作品上签名而自豪。你也应该如此。</p>\n<p>​</p>\n<p>​<br>​<br>​</p>\n</li>\n</ol>\n"},{"title":"使用vue容易犯的错误","_content":"\n- [在data里面声明的属性才是reactive](http://vuejs.org/guide/instance.html#Properties-and-Methods)。在声明vue实例之后，如果要添加reactive的变量，可以通过[set方法](http://vuejs.org/guide/reactivity.html#Change-Detection-Caveats)。\n- 在vue实例的属性或者回调函数中，[使用箭头函数](http://vuejs.org/guide/instance.html#Properties-and-Methods)，因为使用箭头函数，this就不是指向vue实例，而是指向父级作用域。\n- `vm.items[indexOfItem] = newValue`更新数据，但不会更新视图，应该使用[set方法](http://vuejs.org/guide/list.html#Caveats)。\n- `vm.items.length = newLength`更新数据，但不会更新视图，应该使用[splice方法](http://vuejs.org/guide/list.html#Caveats)\n- [component的data必须是一个函数](http://vuejs.org/guide/components.html#data-Must-Be-a-Function)，而且必须返回一个干净的对象（fresh data object），如果不是一个干净的对象，那么所有的组件都会引用同一个对象，这不是我们想要的结果。\n- [camelCase vs kebab-case](http://vuejs.org/guide/components.html#camelCase-vs-kebab-case)。组件的props在js里面是camelCase写法，而在HTML里面是kebab-case写法。同理，[组件的命名](http://vuejs.org/guide/components.html#Component-Naming-Conventions)也是如此。\n- [Literal vs Dynamic](http://vuejs.org/guide/components.html#Literal-vs-Dynamic)。如果想要给子组件传递一个数字而不是字符串，那就要使用v-bind。\n- [One Way Data Flow](http://vuejs.org/guide/components.html#One-Way-Data-Flow)。父组件可以修改props，但子组件不允许修改props，也就说数据的单向的，只允许 `父 -> 子`，不允许 `子 -> 父`。子组件要改变父组件的数据只能通过events up。父子组件的通信方式可以总结为：[props down, events up](http://vuejs.org/guide/components.html#Composing-Components)。\n- [Compilation-Scope](http://vuejs.org/guide/components.html#Compilation-Scope)。父组件的模板只能使用父组件作用域里面的变量，子组件的模板只能使用子组件作用域里面的变量。\n- [Child Component Refs](http://vuejs.org/guide/components.html#Child-Component-Refs)。子组件的$refs不是reactive的，所以不要用在template或者computed","source":"_posts/2016-10-24-vue-caveats.md","raw":"---\ntitle: 使用vue容易犯的错误\ncategories: Javascript\ntags: [vue]\n\n---\n\n- [在data里面声明的属性才是reactive](http://vuejs.org/guide/instance.html#Properties-and-Methods)。在声明vue实例之后，如果要添加reactive的变量，可以通过[set方法](http://vuejs.org/guide/reactivity.html#Change-Detection-Caveats)。\n- 在vue实例的属性或者回调函数中，[使用箭头函数](http://vuejs.org/guide/instance.html#Properties-and-Methods)，因为使用箭头函数，this就不是指向vue实例，而是指向父级作用域。\n- `vm.items[indexOfItem] = newValue`更新数据，但不会更新视图，应该使用[set方法](http://vuejs.org/guide/list.html#Caveats)。\n- `vm.items.length = newLength`更新数据，但不会更新视图，应该使用[splice方法](http://vuejs.org/guide/list.html#Caveats)\n- [component的data必须是一个函数](http://vuejs.org/guide/components.html#data-Must-Be-a-Function)，而且必须返回一个干净的对象（fresh data object），如果不是一个干净的对象，那么所有的组件都会引用同一个对象，这不是我们想要的结果。\n- [camelCase vs kebab-case](http://vuejs.org/guide/components.html#camelCase-vs-kebab-case)。组件的props在js里面是camelCase写法，而在HTML里面是kebab-case写法。同理，[组件的命名](http://vuejs.org/guide/components.html#Component-Naming-Conventions)也是如此。\n- [Literal vs Dynamic](http://vuejs.org/guide/components.html#Literal-vs-Dynamic)。如果想要给子组件传递一个数字而不是字符串，那就要使用v-bind。\n- [One Way Data Flow](http://vuejs.org/guide/components.html#One-Way-Data-Flow)。父组件可以修改props，但子组件不允许修改props，也就说数据的单向的，只允许 `父 -> 子`，不允许 `子 -> 父`。子组件要改变父组件的数据只能通过events up。父子组件的通信方式可以总结为：[props down, events up](http://vuejs.org/guide/components.html#Composing-Components)。\n- [Compilation-Scope](http://vuejs.org/guide/components.html#Compilation-Scope)。父组件的模板只能使用父组件作用域里面的变量，子组件的模板只能使用子组件作用域里面的变量。\n- [Child Component Refs](http://vuejs.org/guide/components.html#Child-Component-Refs)。子组件的$refs不是reactive的，所以不要用在template或者computed","slug":"2016-10-24-vue-caveats","published":1,"date":"2016-10-24T05:26:11.000Z","updated":"2016-10-24T05:27:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr9q001hy3onon1jj25t","content":"<ul>\n<li><a href=\"http://vuejs.org/guide/instance.html#Properties-and-Methods\" target=\"_blank\" rel=\"external\">在data里面声明的属性才是reactive</a>。在声明vue实例之后，如果要添加reactive的变量，可以通过<a href=\"http://vuejs.org/guide/reactivity.html#Change-Detection-Caveats\" target=\"_blank\" rel=\"external\">set方法</a>。</li>\n<li>在vue实例的属性或者回调函数中，<a href=\"http://vuejs.org/guide/instance.html#Properties-and-Methods\" target=\"_blank\" rel=\"external\">使用箭头函数</a>，因为使用箭头函数，this就不是指向vue实例，而是指向父级作用域。</li>\n<li><code>vm.items[indexOfItem] = newValue</code>更新数据，但不会更新视图，应该使用<a href=\"http://vuejs.org/guide/list.html#Caveats\" target=\"_blank\" rel=\"external\">set方法</a>。</li>\n<li><code>vm.items.length = newLength</code>更新数据，但不会更新视图，应该使用<a href=\"http://vuejs.org/guide/list.html#Caveats\" target=\"_blank\" rel=\"external\">splice方法</a></li>\n<li><a href=\"http://vuejs.org/guide/components.html#data-Must-Be-a-Function\" target=\"_blank\" rel=\"external\">component的data必须是一个函数</a>，而且必须返回一个干净的对象（fresh data object），如果不是一个干净的对象，那么所有的组件都会引用同一个对象，这不是我们想要的结果。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#camelCase-vs-kebab-case\" target=\"_blank\" rel=\"external\">camelCase vs kebab-case</a>。组件的props在js里面是camelCase写法，而在HTML里面是kebab-case写法。同理，<a href=\"http://vuejs.org/guide/components.html#Component-Naming-Conventions\" target=\"_blank\" rel=\"external\">组件的命名</a>也是如此。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#Literal-vs-Dynamic\" target=\"_blank\" rel=\"external\">Literal vs Dynamic</a>。如果想要给子组件传递一个数字而不是字符串，那就要使用v-bind。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#One-Way-Data-Flow\" target=\"_blank\" rel=\"external\">One Way Data Flow</a>。父组件可以修改props，但子组件不允许修改props，也就说数据的单向的，只允许 <code>父 -&gt; 子</code>，不允许 <code>子 -&gt; 父</code>。子组件要改变父组件的数据只能通过events up。父子组件的通信方式可以总结为：<a href=\"http://vuejs.org/guide/components.html#Composing-Components\" target=\"_blank\" rel=\"external\">props down, events up</a>。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#Compilation-Scope\" target=\"_blank\" rel=\"external\">Compilation-Scope</a>。父组件的模板只能使用父组件作用域里面的变量，子组件的模板只能使用子组件作用域里面的变量。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#Child-Component-Refs\" target=\"_blank\" rel=\"external\">Child Component Refs</a>。子组件的$refs不是reactive的，所以不要用在template或者computed</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><a href=\"http://vuejs.org/guide/instance.html#Properties-and-Methods\">在data里面声明的属性才是reactive</a>。在声明vue实例之后，如果要添加reactive的变量，可以通过<a href=\"http://vuejs.org/guide/reactivity.html#Change-Detection-Caveats\">set方法</a>。</li>\n<li>在vue实例的属性或者回调函数中，<a href=\"http://vuejs.org/guide/instance.html#Properties-and-Methods\">使用箭头函数</a>，因为使用箭头函数，this就不是指向vue实例，而是指向父级作用域。</li>\n<li><code>vm.items[indexOfItem] = newValue</code>更新数据，但不会更新视图，应该使用<a href=\"http://vuejs.org/guide/list.html#Caveats\">set方法</a>。</li>\n<li><code>vm.items.length = newLength</code>更新数据，但不会更新视图，应该使用<a href=\"http://vuejs.org/guide/list.html#Caveats\">splice方法</a></li>\n<li><a href=\"http://vuejs.org/guide/components.html#data-Must-Be-a-Function\">component的data必须是一个函数</a>，而且必须返回一个干净的对象（fresh data object），如果不是一个干净的对象，那么所有的组件都会引用同一个对象，这不是我们想要的结果。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#camelCase-vs-kebab-case\">camelCase vs kebab-case</a>。组件的props在js里面是camelCase写法，而在HTML里面是kebab-case写法。同理，<a href=\"http://vuejs.org/guide/components.html#Component-Naming-Conventions\">组件的命名</a>也是如此。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#Literal-vs-Dynamic\">Literal vs Dynamic</a>。如果想要给子组件传递一个数字而不是字符串，那就要使用v-bind。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#One-Way-Data-Flow\">One Way Data Flow</a>。父组件可以修改props，但子组件不允许修改props，也就说数据的单向的，只允许 <code>父 -&gt; 子</code>，不允许 <code>子 -&gt; 父</code>。子组件要改变父组件的数据只能通过events up。父子组件的通信方式可以总结为：<a href=\"http://vuejs.org/guide/components.html#Composing-Components\">props down, events up</a>。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#Compilation-Scope\">Compilation-Scope</a>。父组件的模板只能使用父组件作用域里面的变量，子组件的模板只能使用子组件作用域里面的变量。</li>\n<li><a href=\"http://vuejs.org/guide/components.html#Child-Component-Refs\">Child Component Refs</a>。子组件的$refs不是reactive的，所以不要用在template或者computed</li>\n</ul>\n"},{"title":"JavaScript作用域","_content":"\n## 什么是作用域（Scope）？\n\n所有的编程语言都有一个空间，既可以存放变量，也可以在我们需要的时候读取变量，我们把这个空间叫做作用域。\n\n## js引擎\n\n计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。\n\n编译器翻译的方式有两种：一个是编译，一个是解释。根据编译的时机不同，可以把语言分成编译型语言和解释性语言。\n\n> 编译型语言必须事先经过编译才能运行。\n>\n> 解释性语言不需要提前编译，而是在运行的时候，才通过编译器进行解释。\n\njs是一门解释型语言，它的编译器就是js引擎。与编译型语言不同的是，解释性语言没有很多的时间去编译代码，因为它是在运行的时候才开始编译的，这就要求它的编译速度必须足够快，为了提高编译速度，js引擎的实现使用了很多花招或者说是奇淫技巧。\n\n> To ensure the fastest performance, JS engines use all kinds of tricks (like JITs, which lazy compile and even hot re-compile, etc.) \n\n所以，js引擎的编译过程非常复杂，想要弄明白实现原理是一件非常困难的事情。我们只需要简单地明白一件事：所有的js代码首先通过编译器进行解释，然后才能执行。\n\n## 理解作用域\n\n三个重要的概念：\n\n> 引擎：负责开启和关闭编译器以及执行器。\n>\n> 编译器：引擎的一个“好朋友”，负责编译js代码。\n>\n> 作用域：存放所有已经声明的变量。\n\n他们三个是怎么合作的呢？举个例子：\n\n假如要执这条语句\n\n```javascript\nvar a = 2;\n```\n\n编译器会有下面进行两个操作：\n\n> 1. 询问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”，如果已经声明，编译器就忽略声明的过程继续往下编译，否则编译器对作用域说：“你需要声明一个变量a，放在作用域里面”。\n> 2. 编译器编译出一堆代码，给到引擎这边，准备执行，引擎开始尝试执行 `a = 2`，首先，引擎会问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”。如果已经声明，引擎就会使用变量a。否则，引擎就会从当前作用域一层一层地往上找（下面会解释）。\n\n如果引擎最终在作用域里面找到了变量a，那么就会把a的值设置为2，否则，引擎就是举手并且大喊：“这有bug呀！”\n\n总结一下：一条赋值语句的执行过程分为两步，第一步，编译器**声明变量**（如果变量还没有声明的话），第二步，**执行代码**，前提是引擎在作用域里面找得到变量。\n\n## 引擎寻找变量的两种方式\n\n引擎在作用域里面寻找变量有两种方式：LHS和RHS（ \"Left-hand Side\" and \"Right-hand Side\"），从表层意思来看，它指的是`=`的左边和右边，比如说\n\n```javascript\nvar a = b;\n```\n\n这里面的b是RHS引用，引擎会对作用域说：“帮我找一下b，它是RHS引用”，也即是引擎并不想改变b的值，只是想读取它的值。\n\na则是LHS引用，引擎会对作用域说：“帮我找一下a，它是LHS引用”，也就是说引擎并不关注a现在的值是什么，它只是把a的值改成和b一样。\n\n不过，用`=`的左边和右边来区分LHS和RHS并不准确，更准确的区分是\n\n> LHS：我要改变这个变量的值，也就是set。\n>\n> RHS：我要读取这个变量的值，也就是get。\n\n比如说下面这条语句:\n\n```javascript\nconsole.log(a);\n```\n\n这里只是要读取a的值，并不想改变a的值，所以它是RHS引用。\n\n再举个LHS的例子来对一下：\n\n```javascript\na = 2;\n```\n\n这里只是要把a的值设置为2，压根不关心a现在的值是多少，这就是LHS引用。\n\n在看一个例子：\n\n```javascript\nfunction foo(a) {\n    console.log( a ); // 2\n}\n\nfoo( 2 );\n```\n\n让我们来分析一下这里面发生的LHS和RHS。\n\n最后一行，`foo(..)`是RHS引用。也是引擎会对作用域说：“hi，把我找一下foo的值，然后给我”。\n\n在这里，有一个非常重要而且容易被忽视的地方：\n\n当你把2作为参数传给`foo`函数时，实际上就是在执行`a = 2`，所以这里有一个隐藏的LHS引用。\n\n当执行`console.log(..)`时，需要寻找console对象，这是一个RHS引用，然后检查console是不是有一个属性`log`。\n\n最后，还有一个同时具备LHS/RHS引用的操作，`log(a)`，我们假定`log(..)`的参数是`arg1`，所以有`arg1 = a`，这是LHS引用，而读取a这是RHS引用。\n\n不过，你可能会认为声明`function foo(a){…`等同于`var foo = function (a){…`，所以这里也有一个LHS引用。\n\n然而这一步是发生在编译阶段，而我们这里讨论的LHS/RHS是发生在第二个阶段，也就是引擎阶段，所以就没必要把它看成是赋值一个函数给`foo`啦。\n\n## 引擎和作用域是怎么交流的？\n\n```javascript\nfunction foo(a) {\n    console.log( a ); // 2\n}\n\nfoo( 2 );\n```\n\n他们之间的交流过程如下：\n\n> 引擎：“Hi，作用域，帮我找一下`foo`，是RHS引用，你有听过它吗？”\n>\n> 作用域：“当然有，编译器一分钟前刚刚声明过，它是一个函数，呐，给你”\n>\n> 引擎：“太棒啦，谢谢哈，我执行以下`foo`”\n>\n> 引擎：“Hey，作用域，帮我找一下变量`a`，是个LHS引用，你有听过它吗？”\n>\n> 作用域：“当然有，编译器刚刚声明它为`foo`函数的一个参数，呐，给你”\n>\n> 引擎：“wow，真是帮了我大忙，在次谢谢你，现在，我把`2`复杂给`a`”\n>\n> 引擎：“Hey，作用域，不要意思又来打扰你，你需要一个`console`，它是一个RHS引用，你有听过它吗？”\n>\n> 作用域：“没问题，引擎，这是我应该做的，我有一个`console`，它是系统内建对象，给你”\n>\n> 引擎：“太完美了，找找一下`log(..)`，ok，太棒啦，它是个函数”\n>\n> 引擎：“Yo，作用域，你能帮我找一下变量a吗？它是个RHS引用，我记得它，刚才有来找你拿过，但是现在想在次确认一下。”\n>\n> 作用域：“你的，你刚才有拿过，同一个变量来着，没有发生任何改变，呐，给你”\n>\n> 引擎：“太酷了，把`2`复制给`a`”，然后执行`log(..)`\n\n## 嵌套作用域\n\n上面提高过，如果引擎没有从当前作用域中找到变量，那么它就会从当前作用域一层一层地往上找，一直找到顶层，也就是global，打个比喻：\n\n![](http://oggx6lf7f.bkt.clouddn.com/b7xrs.png)\n\n这是一栋楼，目前的作用域是在一楼，如果找不到变量，那么就坐电梯到二楼找，如果找到了就停止，否则就一直找知道最顶层global。\n\n## 报错\n\n你可能会问了，区分LHS和RHS有什么实际意义呢？因为他们出错的类型是不一样的。\n\n对于LHS来说，如果引擎在作用域中找不到变量而且代码不是在“Strict Mode”模式下，那么它会在全局作用域（Global Scope）中创建这个变量。然后把它拿到引擎中处理。而如果是在“Strict Mode”模式下，那就会抛出一个`ReferenceError`类型的错误\n\n对于RHS来说，如果引擎在作用域中找不到变量，那就会抛出一个`ReferenceError`类型的错误。\n\n还有，如果引擎在作用域中找到了RHS引用的变量，但是你尝试去用不可能的方式进行操作，比如从`null`或者`undefined`中读取一个属性，这是引擎就会抛出一个`TypeError`错误。\n\n## 参考链接\n\n[You Don't Know JS: Scope & Closures](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch1.md) \n\n\n","source":"_posts/2016-11-13-scope.md","raw":"---\ntitle: JavaScript作用域\ncategories: Javascript\n---\n\n## 什么是作用域（Scope）？\n\n所有的编程语言都有一个空间，既可以存放变量，也可以在我们需要的时候读取变量，我们把这个空间叫做作用域。\n\n## js引擎\n\n计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。\n\n编译器翻译的方式有两种：一个是编译，一个是解释。根据编译的时机不同，可以把语言分成编译型语言和解释性语言。\n\n> 编译型语言必须事先经过编译才能运行。\n>\n> 解释性语言不需要提前编译，而是在运行的时候，才通过编译器进行解释。\n\njs是一门解释型语言，它的编译器就是js引擎。与编译型语言不同的是，解释性语言没有很多的时间去编译代码，因为它是在运行的时候才开始编译的，这就要求它的编译速度必须足够快，为了提高编译速度，js引擎的实现使用了很多花招或者说是奇淫技巧。\n\n> To ensure the fastest performance, JS engines use all kinds of tricks (like JITs, which lazy compile and even hot re-compile, etc.) \n\n所以，js引擎的编译过程非常复杂，想要弄明白实现原理是一件非常困难的事情。我们只需要简单地明白一件事：所有的js代码首先通过编译器进行解释，然后才能执行。\n\n## 理解作用域\n\n三个重要的概念：\n\n> 引擎：负责开启和关闭编译器以及执行器。\n>\n> 编译器：引擎的一个“好朋友”，负责编译js代码。\n>\n> 作用域：存放所有已经声明的变量。\n\n他们三个是怎么合作的呢？举个例子：\n\n假如要执这条语句\n\n```javascript\nvar a = 2;\n```\n\n编译器会有下面进行两个操作：\n\n> 1. 询问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”，如果已经声明，编译器就忽略声明的过程继续往下编译，否则编译器对作用域说：“你需要声明一个变量a，放在作用域里面”。\n> 2. 编译器编译出一堆代码，给到引擎这边，准备执行，引擎开始尝试执行 `a = 2`，首先，引擎会问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”。如果已经声明，引擎就会使用变量a。否则，引擎就会从当前作用域一层一层地往上找（下面会解释）。\n\n如果引擎最终在作用域里面找到了变量a，那么就会把a的值设置为2，否则，引擎就是举手并且大喊：“这有bug呀！”\n\n总结一下：一条赋值语句的执行过程分为两步，第一步，编译器**声明变量**（如果变量还没有声明的话），第二步，**执行代码**，前提是引擎在作用域里面找得到变量。\n\n## 引擎寻找变量的两种方式\n\n引擎在作用域里面寻找变量有两种方式：LHS和RHS（ \"Left-hand Side\" and \"Right-hand Side\"），从表层意思来看，它指的是`=`的左边和右边，比如说\n\n```javascript\nvar a = b;\n```\n\n这里面的b是RHS引用，引擎会对作用域说：“帮我找一下b，它是RHS引用”，也即是引擎并不想改变b的值，只是想读取它的值。\n\na则是LHS引用，引擎会对作用域说：“帮我找一下a，它是LHS引用”，也就是说引擎并不关注a现在的值是什么，它只是把a的值改成和b一样。\n\n不过，用`=`的左边和右边来区分LHS和RHS并不准确，更准确的区分是\n\n> LHS：我要改变这个变量的值，也就是set。\n>\n> RHS：我要读取这个变量的值，也就是get。\n\n比如说下面这条语句:\n\n```javascript\nconsole.log(a);\n```\n\n这里只是要读取a的值，并不想改变a的值，所以它是RHS引用。\n\n再举个LHS的例子来对一下：\n\n```javascript\na = 2;\n```\n\n这里只是要把a的值设置为2，压根不关心a现在的值是多少，这就是LHS引用。\n\n在看一个例子：\n\n```javascript\nfunction foo(a) {\n    console.log( a ); // 2\n}\n\nfoo( 2 );\n```\n\n让我们来分析一下这里面发生的LHS和RHS。\n\n最后一行，`foo(..)`是RHS引用。也是引擎会对作用域说：“hi，把我找一下foo的值，然后给我”。\n\n在这里，有一个非常重要而且容易被忽视的地方：\n\n当你把2作为参数传给`foo`函数时，实际上就是在执行`a = 2`，所以这里有一个隐藏的LHS引用。\n\n当执行`console.log(..)`时，需要寻找console对象，这是一个RHS引用，然后检查console是不是有一个属性`log`。\n\n最后，还有一个同时具备LHS/RHS引用的操作，`log(a)`，我们假定`log(..)`的参数是`arg1`，所以有`arg1 = a`，这是LHS引用，而读取a这是RHS引用。\n\n不过，你可能会认为声明`function foo(a){…`等同于`var foo = function (a){…`，所以这里也有一个LHS引用。\n\n然而这一步是发生在编译阶段，而我们这里讨论的LHS/RHS是发生在第二个阶段，也就是引擎阶段，所以就没必要把它看成是赋值一个函数给`foo`啦。\n\n## 引擎和作用域是怎么交流的？\n\n```javascript\nfunction foo(a) {\n    console.log( a ); // 2\n}\n\nfoo( 2 );\n```\n\n他们之间的交流过程如下：\n\n> 引擎：“Hi，作用域，帮我找一下`foo`，是RHS引用，你有听过它吗？”\n>\n> 作用域：“当然有，编译器一分钟前刚刚声明过，它是一个函数，呐，给你”\n>\n> 引擎：“太棒啦，谢谢哈，我执行以下`foo`”\n>\n> 引擎：“Hey，作用域，帮我找一下变量`a`，是个LHS引用，你有听过它吗？”\n>\n> 作用域：“当然有，编译器刚刚声明它为`foo`函数的一个参数，呐，给你”\n>\n> 引擎：“wow，真是帮了我大忙，在次谢谢你，现在，我把`2`复杂给`a`”\n>\n> 引擎：“Hey，作用域，不要意思又来打扰你，你需要一个`console`，它是一个RHS引用，你有听过它吗？”\n>\n> 作用域：“没问题，引擎，这是我应该做的，我有一个`console`，它是系统内建对象，给你”\n>\n> 引擎：“太完美了，找找一下`log(..)`，ok，太棒啦，它是个函数”\n>\n> 引擎：“Yo，作用域，你能帮我找一下变量a吗？它是个RHS引用，我记得它，刚才有来找你拿过，但是现在想在次确认一下。”\n>\n> 作用域：“你的，你刚才有拿过，同一个变量来着，没有发生任何改变，呐，给你”\n>\n> 引擎：“太酷了，把`2`复制给`a`”，然后执行`log(..)`\n\n## 嵌套作用域\n\n上面提高过，如果引擎没有从当前作用域中找到变量，那么它就会从当前作用域一层一层地往上找，一直找到顶层，也就是global，打个比喻：\n\n![](http://oggx6lf7f.bkt.clouddn.com/b7xrs.png)\n\n这是一栋楼，目前的作用域是在一楼，如果找不到变量，那么就坐电梯到二楼找，如果找到了就停止，否则就一直找知道最顶层global。\n\n## 报错\n\n你可能会问了，区分LHS和RHS有什么实际意义呢？因为他们出错的类型是不一样的。\n\n对于LHS来说，如果引擎在作用域中找不到变量而且代码不是在“Strict Mode”模式下，那么它会在全局作用域（Global Scope）中创建这个变量。然后把它拿到引擎中处理。而如果是在“Strict Mode”模式下，那就会抛出一个`ReferenceError`类型的错误\n\n对于RHS来说，如果引擎在作用域中找不到变量，那就会抛出一个`ReferenceError`类型的错误。\n\n还有，如果引擎在作用域中找到了RHS引用的变量，但是你尝试去用不可能的方式进行操作，比如从`null`或者`undefined`中读取一个属性，这是引擎就会抛出一个`TypeError`错误。\n\n## 参考链接\n\n[You Don't Know JS: Scope & Closures](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch1.md) \n\n\n","slug":"2016-11-13-scope","published":1,"date":"2016-11-13T09:50:08.000Z","updated":"2016-11-13T12:33:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr9s001ky3on9scbywv4","content":"<h2 id=\"什么是作用域（Scope）？\"><a href=\"#什么是作用域（Scope）？\" class=\"headerlink\" title=\"什么是作用域（Scope）？\"></a>什么是作用域（Scope）？</h2><p>所有的编程语言都有一个空间，既可以存放变量，也可以在我们需要的时候读取变量，我们把这个空间叫做作用域。</p>\n<h2 id=\"js引擎\"><a href=\"#js引擎\" class=\"headerlink\" title=\"js引擎\"></a>js引擎</h2><p>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。</p>\n<p>编译器翻译的方式有两种：一个是编译，一个是解释。根据编译的时机不同，可以把语言分成编译型语言和解释性语言。</p>\n<blockquote>\n<p>编译型语言必须事先经过编译才能运行。</p>\n<p>解释性语言不需要提前编译，而是在运行的时候，才通过编译器进行解释。</p>\n</blockquote>\n<p>js是一门解释型语言，它的编译器就是js引擎。与编译型语言不同的是，解释性语言没有很多的时间去编译代码，因为它是在运行的时候才开始编译的，这就要求它的编译速度必须足够快，为了提高编译速度，js引擎的实现使用了很多花招或者说是奇淫技巧。</p>\n<blockquote>\n<p>To ensure the fastest performance, JS engines use all kinds of tricks (like JITs, which lazy compile and even hot re-compile, etc.) </p>\n</blockquote>\n<p>所以，js引擎的编译过程非常复杂，想要弄明白实现原理是一件非常困难的事情。我们只需要简单地明白一件事：所有的js代码首先通过编译器进行解释，然后才能执行。</p>\n<h2 id=\"理解作用域\"><a href=\"#理解作用域\" class=\"headerlink\" title=\"理解作用域\"></a>理解作用域</h2><p>三个重要的概念：</p>\n<blockquote>\n<p>引擎：负责开启和关闭编译器以及执行器。</p>\n<p>编译器：引擎的一个“好朋友”，负责编译js代码。</p>\n<p>作用域：存放所有已经声明的变量。</p>\n</blockquote>\n<p>他们三个是怎么合作的呢？举个例子：</p>\n<p>假如要执这条语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>编译器会有下面进行两个操作：</p>\n<blockquote>\n<ol>\n<li>询问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”，如果已经声明，编译器就忽略声明的过程继续往下编译，否则编译器对作用域说：“你需要声明一个变量a，放在作用域里面”。</li>\n<li>编译器编译出一堆代码，给到引擎这边，准备执行，引擎开始尝试执行 <code>a = 2</code>，首先，引擎会问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”。如果已经声明，引擎就会使用变量a。否则，引擎就会从当前作用域一层一层地往上找（下面会解释）。</li>\n</ol>\n</blockquote>\n<p>如果引擎最终在作用域里面找到了变量a，那么就会把a的值设置为2，否则，引擎就是举手并且大喊：“这有bug呀！”</p>\n<p>总结一下：一条赋值语句的执行过程分为两步，第一步，编译器<strong>声明变量</strong>（如果变量还没有声明的话），第二步，<strong>执行代码</strong>，前提是引擎在作用域里面找得到变量。</p>\n<h2 id=\"引擎寻找变量的两种方式\"><a href=\"#引擎寻找变量的两种方式\" class=\"headerlink\" title=\"引擎寻找变量的两种方式\"></a>引擎寻找变量的两种方式</h2><p>引擎在作用域里面寻找变量有两种方式：LHS和RHS（ “Left-hand Side” and “Right-hand Side”），从表层意思来看，它指的是<code>=</code>的左边和右边，比如说</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = b;</span><br></pre></td></tr></table></figure>\n<p>这里面的b是RHS引用，引擎会对作用域说：“帮我找一下b，它是RHS引用”，也即是引擎并不想改变b的值，只是想读取它的值。</p>\n<p>a则是LHS引用，引擎会对作用域说：“帮我找一下a，它是LHS引用”，也就是说引擎并不关注a现在的值是什么，它只是把a的值改成和b一样。</p>\n<p>不过，用<code>=</code>的左边和右边来区分LHS和RHS并不准确，更准确的区分是</p>\n<blockquote>\n<p>LHS：我要改变这个变量的值，也就是set。</p>\n<p>RHS：我要读取这个变量的值，也就是get。</p>\n</blockquote>\n<p>比如说下面这条语句:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n<p>这里只是要读取a的值，并不想改变a的值，所以它是RHS引用。</p>\n<p>再举个LHS的例子来对一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>这里只是要把a的值设置为2，压根不关心a现在的值是多少，这就是LHS引用。</p>\n<p>在看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo( <span class=\"number\">2</span> );</span><br></pre></td></tr></table></figure>\n<p>让我们来分析一下这里面发生的LHS和RHS。</p>\n<p>最后一行，<code>foo(..)</code>是RHS引用。也是引擎会对作用域说：“hi，把我找一下foo的值，然后给我”。</p>\n<p>在这里，有一个非常重要而且容易被忽视的地方：</p>\n<p>当你把2作为参数传给<code>foo</code>函数时，实际上就是在执行<code>a = 2</code>，所以这里有一个隐藏的LHS引用。</p>\n<p>当执行<code>console.log(..)</code>时，需要寻找console对象，这是一个RHS引用，然后检查console是不是有一个属性<code>log</code>。</p>\n<p>最后，还有一个同时具备LHS/RHS引用的操作，<code>log(a)</code>，我们假定<code>log(..)</code>的参数是<code>arg1</code>，所以有<code>arg1 = a</code>，这是LHS引用，而读取a这是RHS引用。</p>\n<p>不过，你可能会认为声明<code>function foo(a){…</code>等同于<code>var foo = function (a){…</code>，所以这里也有一个LHS引用。</p>\n<p>然而这一步是发生在编译阶段，而我们这里讨论的LHS/RHS是发生在第二个阶段，也就是引擎阶段，所以就没必要把它看成是赋值一个函数给<code>foo</code>啦。</p>\n<h2 id=\"引擎和作用域是怎么交流的？\"><a href=\"#引擎和作用域是怎么交流的？\" class=\"headerlink\" title=\"引擎和作用域是怎么交流的？\"></a>引擎和作用域是怎么交流的？</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo( <span class=\"number\">2</span> );</span><br></pre></td></tr></table></figure>\n<p>他们之间的交流过程如下：</p>\n<blockquote>\n<p>引擎：“Hi，作用域，帮我找一下<code>foo</code>，是RHS引用，你有听过它吗？”</p>\n<p>作用域：“当然有，编译器一分钟前刚刚声明过，它是一个函数，呐，给你”</p>\n<p>引擎：“太棒啦，谢谢哈，我执行以下<code>foo</code>”</p>\n<p>引擎：“Hey，作用域，帮我找一下变量<code>a</code>，是个LHS引用，你有听过它吗？”</p>\n<p>作用域：“当然有，编译器刚刚声明它为<code>foo</code>函数的一个参数，呐，给你”</p>\n<p>引擎：“wow，真是帮了我大忙，在次谢谢你，现在，我把<code>2</code>复杂给<code>a</code>”</p>\n<p>引擎：“Hey，作用域，不要意思又来打扰你，你需要一个<code>console</code>，它是一个RHS引用，你有听过它吗？”</p>\n<p>作用域：“没问题，引擎，这是我应该做的，我有一个<code>console</code>，它是系统内建对象，给你”</p>\n<p>引擎：“太完美了，找找一下<code>log(..)</code>，ok，太棒啦，它是个函数”</p>\n<p>引擎：“Yo，作用域，你能帮我找一下变量a吗？它是个RHS引用，我记得它，刚才有来找你拿过，但是现在想在次确认一下。”</p>\n<p>作用域：“你的，你刚才有拿过，同一个变量来着，没有发生任何改变，呐，给你”</p>\n<p>引擎：“太酷了，把<code>2</code>复制给<code>a</code>”，然后执行<code>log(..)</code></p>\n</blockquote>\n<h2 id=\"嵌套作用域\"><a href=\"#嵌套作用域\" class=\"headerlink\" title=\"嵌套作用域\"></a>嵌套作用域</h2><p>上面提高过，如果引擎没有从当前作用域中找到变量，那么它就会从当前作用域一层一层地往上找，一直找到顶层，也就是global，打个比喻：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/b7xrs.png\" alt=\"\"></p>\n<p>这是一栋楼，目前的作用域是在一楼，如果找不到变量，那么就坐电梯到二楼找，如果找到了就停止，否则就一直找知道最顶层global。</p>\n<h2 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h2><p>你可能会问了，区分LHS和RHS有什么实际意义呢？因为他们出错的类型是不一样的。</p>\n<p>对于LHS来说，如果引擎在作用域中找不到变量而且代码不是在“Strict Mode”模式下，那么它会在全局作用域（Global Scope）中创建这个变量。然后把它拿到引擎中处理。而如果是在“Strict Mode”模式下，那就会抛出一个<code>ReferenceError</code>类型的错误</p>\n<p>对于RHS来说，如果引擎在作用域中找不到变量，那就会抛出一个<code>ReferenceError</code>类型的错误。</p>\n<p>还有，如果引擎在作用域中找到了RHS引用的变量，但是你尝试去用不可能的方式进行操作，比如从<code>null</code>或者<code>undefined</code>中读取一个属性，这是引擎就会抛出一个<code>TypeError</code>错误。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch1.md\" target=\"_blank\" rel=\"external\">You Don’t Know JS: Scope &amp; Closures</a> </p>\n","excerpt":"","more":"<h2 id=\"什么是作用域（Scope）？\"><a href=\"#什么是作用域（Scope）？\" class=\"headerlink\" title=\"什么是作用域（Scope）？\"></a>什么是作用域（Scope）？</h2><p>所有的编程语言都有一个空间，既可以存放变量，也可以在我们需要的时候读取变量，我们把这个空间叫做作用域。</p>\n<h2 id=\"js引擎\"><a href=\"#js引擎\" class=\"headerlink\" title=\"js引擎\"></a>js引擎</h2><p>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。</p>\n<p>编译器翻译的方式有两种：一个是编译，一个是解释。根据编译的时机不同，可以把语言分成编译型语言和解释性语言。</p>\n<blockquote>\n<p>编译型语言必须事先经过编译才能运行。</p>\n<p>解释性语言不需要提前编译，而是在运行的时候，才通过编译器进行解释。</p>\n</blockquote>\n<p>js是一门解释型语言，它的编译器就是js引擎。与编译型语言不同的是，解释性语言没有很多的时间去编译代码，因为它是在运行的时候才开始编译的，这就要求它的编译速度必须足够快，为了提高编译速度，js引擎的实现使用了很多花招或者说是奇淫技巧。</p>\n<blockquote>\n<p>To ensure the fastest performance, JS engines use all kinds of tricks (like JITs, which lazy compile and even hot re-compile, etc.) </p>\n</blockquote>\n<p>所以，js引擎的编译过程非常复杂，想要弄明白实现原理是一件非常困难的事情。我们只需要简单地明白一件事：所有的js代码首先通过编译器进行解释，然后才能执行。</p>\n<h2 id=\"理解作用域\"><a href=\"#理解作用域\" class=\"headerlink\" title=\"理解作用域\"></a>理解作用域</h2><p>三个重要的概念：</p>\n<blockquote>\n<p>引擎：负责开启和关闭编译器以及执行器。</p>\n<p>编译器：引擎的一个“好朋友”，负责编译js代码。</p>\n<p>作用域：存放所有已经声明的变量。</p>\n</blockquote>\n<p>他们三个是怎么合作的呢？举个例子：</p>\n<p>假如要执这条语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>编译器会有下面进行两个操作：</p>\n<blockquote>\n<ol>\n<li>询问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”，如果已经声明，编译器就忽略声明的过程继续往下编译，否则编译器对作用域说：“你需要声明一个变量a，放在作用域里面”。</li>\n<li>编译器编译出一堆代码，给到引擎这边，准备执行，引擎开始尝试执行 <code>a = 2</code>，首先，引擎会问作用域：“hi，哥们，变量a是不是在你那里已经声明了呀？”。如果已经声明，引擎就会使用变量a。否则，引擎就会从当前作用域一层一层地往上找（下面会解释）。</li>\n</ol>\n</blockquote>\n<p>如果引擎最终在作用域里面找到了变量a，那么就会把a的值设置为2，否则，引擎就是举手并且大喊：“这有bug呀！”</p>\n<p>总结一下：一条赋值语句的执行过程分为两步，第一步，编译器<strong>声明变量</strong>（如果变量还没有声明的话），第二步，<strong>执行代码</strong>，前提是引擎在作用域里面找得到变量。</p>\n<h2 id=\"引擎寻找变量的两种方式\"><a href=\"#引擎寻找变量的两种方式\" class=\"headerlink\" title=\"引擎寻找变量的两种方式\"></a>引擎寻找变量的两种方式</h2><p>引擎在作用域里面寻找变量有两种方式：LHS和RHS（ “Left-hand Side” and “Right-hand Side”），从表层意思来看，它指的是<code>=</code>的左边和右边，比如说</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = b;</span><br></pre></td></tr></table></figure>\n<p>这里面的b是RHS引用，引擎会对作用域说：“帮我找一下b，它是RHS引用”，也即是引擎并不想改变b的值，只是想读取它的值。</p>\n<p>a则是LHS引用，引擎会对作用域说：“帮我找一下a，它是LHS引用”，也就是说引擎并不关注a现在的值是什么，它只是把a的值改成和b一样。</p>\n<p>不过，用<code>=</code>的左边和右边来区分LHS和RHS并不准确，更准确的区分是</p>\n<blockquote>\n<p>LHS：我要改变这个变量的值，也就是set。</p>\n<p>RHS：我要读取这个变量的值，也就是get。</p>\n</blockquote>\n<p>比如说下面这条语句:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n<p>这里只是要读取a的值，并不想改变a的值，所以它是RHS引用。</p>\n<p>再举个LHS的例子来对一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>这里只是要把a的值设置为2，压根不关心a现在的值是多少，这就是LHS引用。</p>\n<p>在看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo( <span class=\"number\">2</span> );</span><br></pre></td></tr></table></figure>\n<p>让我们来分析一下这里面发生的LHS和RHS。</p>\n<p>最后一行，<code>foo(..)</code>是RHS引用。也是引擎会对作用域说：“hi，把我找一下foo的值，然后给我”。</p>\n<p>在这里，有一个非常重要而且容易被忽视的地方：</p>\n<p>当你把2作为参数传给<code>foo</code>函数时，实际上就是在执行<code>a = 2</code>，所以这里有一个隐藏的LHS引用。</p>\n<p>当执行<code>console.log(..)</code>时，需要寻找console对象，这是一个RHS引用，然后检查console是不是有一个属性<code>log</code>。</p>\n<p>最后，还有一个同时具备LHS/RHS引用的操作，<code>log(a)</code>，我们假定<code>log(..)</code>的参数是<code>arg1</code>，所以有<code>arg1 = a</code>，这是LHS引用，而读取a这是RHS引用。</p>\n<p>不过，你可能会认为声明<code>function foo(a){…</code>等同于<code>var foo = function (a){…</code>，所以这里也有一个LHS引用。</p>\n<p>然而这一步是发生在编译阶段，而我们这里讨论的LHS/RHS是发生在第二个阶段，也就是引擎阶段，所以就没必要把它看成是赋值一个函数给<code>foo</code>啦。</p>\n<h2 id=\"引擎和作用域是怎么交流的？\"><a href=\"#引擎和作用域是怎么交流的？\" class=\"headerlink\" title=\"引擎和作用域是怎么交流的？\"></a>引擎和作用域是怎么交流的？</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo( <span class=\"number\">2</span> );</span><br></pre></td></tr></table></figure>\n<p>他们之间的交流过程如下：</p>\n<blockquote>\n<p>引擎：“Hi，作用域，帮我找一下<code>foo</code>，是RHS引用，你有听过它吗？”</p>\n<p>作用域：“当然有，编译器一分钟前刚刚声明过，它是一个函数，呐，给你”</p>\n<p>引擎：“太棒啦，谢谢哈，我执行以下<code>foo</code>”</p>\n<p>引擎：“Hey，作用域，帮我找一下变量<code>a</code>，是个LHS引用，你有听过它吗？”</p>\n<p>作用域：“当然有，编译器刚刚声明它为<code>foo</code>函数的一个参数，呐，给你”</p>\n<p>引擎：“wow，真是帮了我大忙，在次谢谢你，现在，我把<code>2</code>复杂给<code>a</code>”</p>\n<p>引擎：“Hey，作用域，不要意思又来打扰你，你需要一个<code>console</code>，它是一个RHS引用，你有听过它吗？”</p>\n<p>作用域：“没问题，引擎，这是我应该做的，我有一个<code>console</code>，它是系统内建对象，给你”</p>\n<p>引擎：“太完美了，找找一下<code>log(..)</code>，ok，太棒啦，它是个函数”</p>\n<p>引擎：“Yo，作用域，你能帮我找一下变量a吗？它是个RHS引用，我记得它，刚才有来找你拿过，但是现在想在次确认一下。”</p>\n<p>作用域：“你的，你刚才有拿过，同一个变量来着，没有发生任何改变，呐，给你”</p>\n<p>引擎：“太酷了，把<code>2</code>复制给<code>a</code>”，然后执行<code>log(..)</code></p>\n</blockquote>\n<h2 id=\"嵌套作用域\"><a href=\"#嵌套作用域\" class=\"headerlink\" title=\"嵌套作用域\"></a>嵌套作用域</h2><p>上面提高过，如果引擎没有从当前作用域中找到变量，那么它就会从当前作用域一层一层地往上找，一直找到顶层，也就是global，打个比喻：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/b7xrs.png\" alt=\"\"></p>\n<p>这是一栋楼，目前的作用域是在一楼，如果找不到变量，那么就坐电梯到二楼找，如果找到了就停止，否则就一直找知道最顶层global。</p>\n<h2 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h2><p>你可能会问了，区分LHS和RHS有什么实际意义呢？因为他们出错的类型是不一样的。</p>\n<p>对于LHS来说，如果引擎在作用域中找不到变量而且代码不是在“Strict Mode”模式下，那么它会在全局作用域（Global Scope）中创建这个变量。然后把它拿到引擎中处理。而如果是在“Strict Mode”模式下，那就会抛出一个<code>ReferenceError</code>类型的错误</p>\n<p>对于RHS来说，如果引擎在作用域中找不到变量，那就会抛出一个<code>ReferenceError</code>类型的错误。</p>\n<p>还有，如果引擎在作用域中找到了RHS引用的变量，但是你尝试去用不可能的方式进行操作，比如从<code>null</code>或者<code>undefined</code>中读取一个属性，这是引擎就会抛出一个<code>TypeError</code>错误。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch1.md\">You Don’t Know JS: Scope &amp; Closures</a> </p>\n"},{"title":"《React Native开源项目 — Snowflake》学习总结","_content":"\nsnowflake是一个非常好的[react naitve开源项目](https://github.com/bartonhammond/snowflake)，功能其实并不复杂，但是讲解却非常详细，它的功能主要是实现手机app的登录、注册、修改密码以及获取和修改用户信息等功能，是个很常见的业务场景。\n\n通过它可以了解一个完整的React Native项目是长什么样子的，有哪些常用的模块，以及代码是怎么规划的，组件和组件之间是如何通过redux来进行通信交流的。\n\n## 新发现的几个模块\n\n开发React Native有一些几乎是必备的模块，比如`react-redux`，`redux-thunk`，在看这个项目的过程中，发现了几个之前不知道的模块。\n\n### react-native-i18n\n\n[https://github.com/AlexanderZaytsev/react-native-i18n](https://github.com/AlexanderZaytsev/react-native-i18n)\n\n一开始不明白`i18n`是什么意思，后来google之后才知道，原来是internationalization，国际化的意思，nternationalization去掉头尾的i和n刚好还剩下18个字符。这个模块可以让app自动地切换成当前移动设备使用的语言。\n\n比如在一份json文件中定义不同的语言：\n\n```javascript\n{\n  \"zh\": {\n    \"App\": {\n      \"version\": \"版本\"\n    },\n    \"Header\": {\n      \"current_state\": \"当前状态\",\n      \"see_console\": \"查看控制台\",\n      \"update_state\": \"更新状态\"\n    }\n  },\n  \"en\": {\n    \"App\": {\n      \"version\": \"Version\"\n    },\n    \"Header\": {\n      \"current_state\": \"Current State\",\n      \"see_console\": \"see console\",\n      \"update_state\": \"Update State\"\n    }\n  },\n  \"fr\": {\n    \"App\": {\n      \"version\": \"Version\"\n    },\n    \"Header\": {\n      \"current_state\": \"état actuel\",\n      \"see_console\": \"voir console\",\n      \"update_state\": \"état de mise à jour\"      \n    }    \n  },\n  \"es\": {\n    \"App\": {\n      \"version\": \"Versión\"\n    },\n    \"Header\": {\n      \"current_state\": \"Estado actual\",\n      \"see_console\": \"ver la consola\",\n      \"update_state\": \"Estado de actualización\"      \n    }  \n  }\n}\n```\n\n引用这份json文件：\n\n```javascript\nvar I18n = require('react-native-i18n')\nimport Translations from '../lib/Translations'\nI18n.translations = Translations\n\nlet version = I18n.t('App.version')\n```\n\n变量version的值在中文的手机会显示：“版本”，在英文的手机会显示：“Version”。\n\n### tcomb-form-native\n\n[https://github.com/gcanti/tcomb-form-native](https://github.com/gcanti/tcomb-form-native)\n\n一个非常好用的表单库，根据配置可以快速生成表单，使用的方法如下\n\n```javascript\nconst t = require('tcomb-form-native')\nlet Form = t.form.Form\n\nloginForm = t.struct({\n  username: t.String,\n  email: t.String,\n  password: t.String,\n  passwordAgain: t.String\n})\noptions.fields['username'] = username\noptions.fields['username'].placeholder = I18n.t('LoginForm.username')\noptions.fields['username'].autoCapitalize = 'none'\noptions.fields['email'] = email\noptions.fields['email'].placeholder = I18n.t('LoginForm.email')\noptions.fields['email'].autoCapitalize = 'none'\noptions.fields['password'] = password\noptions.fields['password'].placeholder = I18n.t('LoginForm.password')\noptions.fields['passwordAgain'] = passwordAgain\noptions.fields['passwordAgain'].placeholder = I18n.t('LoginForm.password_again')\n```\n\n最终可以生成相应的表单\n\n![](http://oggx6lf7f.bkt.clouddn.com/v2jdt.png)\n\n### react-native-router-flux\n\n[https://github.com/aksonov/react-native-router-flux](https://github.com/aksonov/react-native-router-flux)\n\nReact Native路由模块，轻松实现不同组件的切换。使用方法：\n\n```javascript\n// 引入模块\nimport {\n    Router,\n    Scene} from 'react-native-router-flux'\n\n// 配置组件\n<Router sceneStyle={{ backgroundColor: 'white' }}>\n  <Scene key='root' hideNavBar>\n    <Scene key='App'\n      component={App}\n      type='replace'\n      initial />\n\n    <Scene key='InitialLoginForm'\n      component={Register}\n      type='replace' />\n\n    <Scene key='Login'\n      component={Login}\n      type='replace' />\n\n    <Scene key='Register'\n      component={Register}\n      type='replace' />\n\n    <Scene key='ForgotPassword'\n      component={ForgotPassword}\n      type='replace' />\n\n    <Scene key='Subview'\n      component={Subview} />\n  </Scene>\n</Router>\n         \n```\n\nkey就是组件的标志，比如说，如果要跳转到`Register`组件，可以这么做：\n\n```javascript\nimport { Actions } from 'react-native-router-flux'\nActions.Register()\n```\n\n### react-native-simple-store\n\n[https://github.com/jasonmerino/react-native-simple-store](https://github.com/jasonmerino/react-native-simple-store)\n\nReact Native本地的异步储存，使用方法如下：\n\n```javascript\nimport store from 'react-native-simple-store';\n\nstore\n  .save('coffee', {\n    isAwesome: true\n  })\n  .then(() => store.get('coffee'))\n  .then(coffee => {\n    console.assert(coffee.isAwesome === true);\n  })\n  .then(() => store.update('coffee', {\n    isNotEssential: false\n  }))\n  .then(() => store.get('coffee'))\n  .then(coffee => {\n    console.assert(coffee.isNotEssential === false);\n    console.assert(coffee.isAwesome === true);\n    return store.delete('coffee');\n  })\n  .then(() => store.get('coffee'))\n  .then(coffee => {\n    console.assert(coffee === null);\n  })\n  .catch(error => {\n    console.error(error.message);\n  });\n```\n\n## 代码规划\n\n- 入口文件，index.ios.js和index.android.js\n- 所有业务代码放在src目录中\n- reducers单独一个文件夹，里面分成4个模块，分别是auth、device、global和profile，每个模块里面有3份文件，分别是installState.js（初始化数据）、actions.js（dispatch行为）和reducer.js（接受diapatch，更改数据），每个模块里面还有一个tests文件夹，用来存放actions和reducer的测试用例。\n- containers存放所有路由组件，也就是所有的页面\n- lib存放config、数据请求以及工具类文件\n- images存放图片\n- componengs存放通用的小组件\n\n项目虽然不是很复杂，但是代码的规划非常合理，也有完整的单元测试，确实学到了很多东西。","source":"_posts/2016-11-14-snowflake.md","raw":"---\ntitle: 《React Native开源项目 — Snowflake》学习总结\ncategories: javascript\ntags: [react]\n---\n\nsnowflake是一个非常好的[react naitve开源项目](https://github.com/bartonhammond/snowflake)，功能其实并不复杂，但是讲解却非常详细，它的功能主要是实现手机app的登录、注册、修改密码以及获取和修改用户信息等功能，是个很常见的业务场景。\n\n通过它可以了解一个完整的React Native项目是长什么样子的，有哪些常用的模块，以及代码是怎么规划的，组件和组件之间是如何通过redux来进行通信交流的。\n\n## 新发现的几个模块\n\n开发React Native有一些几乎是必备的模块，比如`react-redux`，`redux-thunk`，在看这个项目的过程中，发现了几个之前不知道的模块。\n\n### react-native-i18n\n\n[https://github.com/AlexanderZaytsev/react-native-i18n](https://github.com/AlexanderZaytsev/react-native-i18n)\n\n一开始不明白`i18n`是什么意思，后来google之后才知道，原来是internationalization，国际化的意思，nternationalization去掉头尾的i和n刚好还剩下18个字符。这个模块可以让app自动地切换成当前移动设备使用的语言。\n\n比如在一份json文件中定义不同的语言：\n\n```javascript\n{\n  \"zh\": {\n    \"App\": {\n      \"version\": \"版本\"\n    },\n    \"Header\": {\n      \"current_state\": \"当前状态\",\n      \"see_console\": \"查看控制台\",\n      \"update_state\": \"更新状态\"\n    }\n  },\n  \"en\": {\n    \"App\": {\n      \"version\": \"Version\"\n    },\n    \"Header\": {\n      \"current_state\": \"Current State\",\n      \"see_console\": \"see console\",\n      \"update_state\": \"Update State\"\n    }\n  },\n  \"fr\": {\n    \"App\": {\n      \"version\": \"Version\"\n    },\n    \"Header\": {\n      \"current_state\": \"état actuel\",\n      \"see_console\": \"voir console\",\n      \"update_state\": \"état de mise à jour\"      \n    }    \n  },\n  \"es\": {\n    \"App\": {\n      \"version\": \"Versión\"\n    },\n    \"Header\": {\n      \"current_state\": \"Estado actual\",\n      \"see_console\": \"ver la consola\",\n      \"update_state\": \"Estado de actualización\"      \n    }  \n  }\n}\n```\n\n引用这份json文件：\n\n```javascript\nvar I18n = require('react-native-i18n')\nimport Translations from '../lib/Translations'\nI18n.translations = Translations\n\nlet version = I18n.t('App.version')\n```\n\n变量version的值在中文的手机会显示：“版本”，在英文的手机会显示：“Version”。\n\n### tcomb-form-native\n\n[https://github.com/gcanti/tcomb-form-native](https://github.com/gcanti/tcomb-form-native)\n\n一个非常好用的表单库，根据配置可以快速生成表单，使用的方法如下\n\n```javascript\nconst t = require('tcomb-form-native')\nlet Form = t.form.Form\n\nloginForm = t.struct({\n  username: t.String,\n  email: t.String,\n  password: t.String,\n  passwordAgain: t.String\n})\noptions.fields['username'] = username\noptions.fields['username'].placeholder = I18n.t('LoginForm.username')\noptions.fields['username'].autoCapitalize = 'none'\noptions.fields['email'] = email\noptions.fields['email'].placeholder = I18n.t('LoginForm.email')\noptions.fields['email'].autoCapitalize = 'none'\noptions.fields['password'] = password\noptions.fields['password'].placeholder = I18n.t('LoginForm.password')\noptions.fields['passwordAgain'] = passwordAgain\noptions.fields['passwordAgain'].placeholder = I18n.t('LoginForm.password_again')\n```\n\n最终可以生成相应的表单\n\n![](http://oggx6lf7f.bkt.clouddn.com/v2jdt.png)\n\n### react-native-router-flux\n\n[https://github.com/aksonov/react-native-router-flux](https://github.com/aksonov/react-native-router-flux)\n\nReact Native路由模块，轻松实现不同组件的切换。使用方法：\n\n```javascript\n// 引入模块\nimport {\n    Router,\n    Scene} from 'react-native-router-flux'\n\n// 配置组件\n<Router sceneStyle={{ backgroundColor: 'white' }}>\n  <Scene key='root' hideNavBar>\n    <Scene key='App'\n      component={App}\n      type='replace'\n      initial />\n\n    <Scene key='InitialLoginForm'\n      component={Register}\n      type='replace' />\n\n    <Scene key='Login'\n      component={Login}\n      type='replace' />\n\n    <Scene key='Register'\n      component={Register}\n      type='replace' />\n\n    <Scene key='ForgotPassword'\n      component={ForgotPassword}\n      type='replace' />\n\n    <Scene key='Subview'\n      component={Subview} />\n  </Scene>\n</Router>\n         \n```\n\nkey就是组件的标志，比如说，如果要跳转到`Register`组件，可以这么做：\n\n```javascript\nimport { Actions } from 'react-native-router-flux'\nActions.Register()\n```\n\n### react-native-simple-store\n\n[https://github.com/jasonmerino/react-native-simple-store](https://github.com/jasonmerino/react-native-simple-store)\n\nReact Native本地的异步储存，使用方法如下：\n\n```javascript\nimport store from 'react-native-simple-store';\n\nstore\n  .save('coffee', {\n    isAwesome: true\n  })\n  .then(() => store.get('coffee'))\n  .then(coffee => {\n    console.assert(coffee.isAwesome === true);\n  })\n  .then(() => store.update('coffee', {\n    isNotEssential: false\n  }))\n  .then(() => store.get('coffee'))\n  .then(coffee => {\n    console.assert(coffee.isNotEssential === false);\n    console.assert(coffee.isAwesome === true);\n    return store.delete('coffee');\n  })\n  .then(() => store.get('coffee'))\n  .then(coffee => {\n    console.assert(coffee === null);\n  })\n  .catch(error => {\n    console.error(error.message);\n  });\n```\n\n## 代码规划\n\n- 入口文件，index.ios.js和index.android.js\n- 所有业务代码放在src目录中\n- reducers单独一个文件夹，里面分成4个模块，分别是auth、device、global和profile，每个模块里面有3份文件，分别是installState.js（初始化数据）、actions.js（dispatch行为）和reducer.js（接受diapatch，更改数据），每个模块里面还有一个tests文件夹，用来存放actions和reducer的测试用例。\n- containers存放所有路由组件，也就是所有的页面\n- lib存放config、数据请求以及工具类文件\n- images存放图片\n- componengs存放通用的小组件\n\n项目虽然不是很复杂，但是代码的规划非常合理，也有完整的单元测试，确实学到了很多东西。","slug":"2016-11-14-snowflake","published":1,"date":"2016-11-14T12:44:31.000Z","updated":"2016-11-14T12:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxr9v001oy3on1fwe24e2","content":"<p>snowflake是一个非常好的<a href=\"https://github.com/bartonhammond/snowflake\" target=\"_blank\" rel=\"external\">react naitve开源项目</a>，功能其实并不复杂，但是讲解却非常详细，它的功能主要是实现手机app的登录、注册、修改密码以及获取和修改用户信息等功能，是个很常见的业务场景。</p>\n<p>通过它可以了解一个完整的React Native项目是长什么样子的，有哪些常用的模块，以及代码是怎么规划的，组件和组件之间是如何通过redux来进行通信交流的。</p>\n<h2 id=\"新发现的几个模块\"><a href=\"#新发现的几个模块\" class=\"headerlink\" title=\"新发现的几个模块\"></a>新发现的几个模块</h2><p>开发React Native有一些几乎是必备的模块，比如<code>react-redux</code>，<code>redux-thunk</code>，在看这个项目的过程中，发现了几个之前不知道的模块。</p>\n<h3 id=\"react-native-i18n\"><a href=\"#react-native-i18n\" class=\"headerlink\" title=\"react-native-i18n\"></a>react-native-i18n</h3><p><a href=\"https://github.com/AlexanderZaytsev/react-native-i18n\" target=\"_blank\" rel=\"external\">https://github.com/AlexanderZaytsev/react-native-i18n</a></p>\n<p>一开始不明白<code>i18n</code>是什么意思，后来google之后才知道，原来是internationalization，国际化的意思，nternationalization去掉头尾的i和n刚好还剩下18个字符。这个模块可以让app自动地切换成当前移动设备使用的语言。</p>\n<p>比如在一份json文件中定义不同的语言：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"zh\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"版本\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"当前状态\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"查看控制台\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"更新状态\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"en\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"Version\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"Current State\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"see console\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"Update State\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"fr\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"Version\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"état actuel\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"voir console\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"état de mise à jour\"</span>      </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"es\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"Versión\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"Estado actual\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"ver la consola\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"Estado de actualización\"</span>      </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>引用这份json文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> I18n = <span class=\"built_in\">require</span>(<span class=\"string\">'react-native-i18n'</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> Translations <span class=\"keyword\">from</span> <span class=\"string\">'../lib/Translations'</span></span><br><span class=\"line\">I18n.translations = Translations</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> version = I18n.t(<span class=\"string\">'App.version'</span>)</span><br></pre></td></tr></table></figure>\n<p>变量version的值在中文的手机会显示：“版本”，在英文的手机会显示：“Version”。</p>\n<h3 id=\"tcomb-form-native\"><a href=\"#tcomb-form-native\" class=\"headerlink\" title=\"tcomb-form-native\"></a>tcomb-form-native</h3><p><a href=\"https://github.com/gcanti/tcomb-form-native\" target=\"_blank\" rel=\"external\">https://github.com/gcanti/tcomb-form-native</a></p>\n<p>一个非常好用的表单库，根据配置可以快速生成表单，使用的方法如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'tcomb-form-native'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> Form = t.form.Form</span><br><span class=\"line\"></span><br><span class=\"line\">loginForm = t.struct(&#123;</span><br><span class=\"line\">  username: t.String,</span><br><span class=\"line\">  email: t.String,</span><br><span class=\"line\">  password: t.String,</span><br><span class=\"line\">  passwordAgain: t.String</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">options.fields[<span class=\"string\">'username'</span>] = username</span><br><span class=\"line\">options.fields[<span class=\"string\">'username'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.username'</span>)</span><br><span class=\"line\">options.fields[<span class=\"string\">'username'</span>].autoCapitalize = <span class=\"string\">'none'</span></span><br><span class=\"line\">options.fields[<span class=\"string\">'email'</span>] = email</span><br><span class=\"line\">options.fields[<span class=\"string\">'email'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.email'</span>)</span><br><span class=\"line\">options.fields[<span class=\"string\">'email'</span>].autoCapitalize = <span class=\"string\">'none'</span></span><br><span class=\"line\">options.fields[<span class=\"string\">'password'</span>] = password</span><br><span class=\"line\">options.fields[<span class=\"string\">'password'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.password'</span>)</span><br><span class=\"line\">options.fields[<span class=\"string\">'passwordAgain'</span>] = passwordAgain</span><br><span class=\"line\">options.fields[<span class=\"string\">'passwordAgain'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.password_again'</span>)</span><br></pre></td></tr></table></figure>\n<p>最终可以生成相应的表单</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/v2jdt.png\" alt=\"\"></p>\n<h3 id=\"react-native-router-flux\"><a href=\"#react-native-router-flux\" class=\"headerlink\" title=\"react-native-router-flux\"></a>react-native-router-flux</h3><p><a href=\"https://github.com/aksonov/react-native-router-flux\" target=\"_blank\" rel=\"external\">https://github.com/aksonov/react-native-router-flux</a></p>\n<p>React Native路由模块，轻松实现不同组件的切换。使用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    Router,</span><br><span class=\"line\">    Scene&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native-router-flux'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置组件</span></span><br><span class=\"line\">&lt;Router sceneStyle=&#123;&#123; backgroundColor: <span class=\"string\">'white'</span> &#125;&#125;&gt;</span><br><span class=\"line\">  &lt;Scene key='root' hideNavBar&gt;</span><br><span class=\"line\">    &lt;Scene key='App'</span><br><span class=\"line\">      component=&#123;App&#125;</span><br><span class=\"line\">      type='replace'</span><br><span class=\"line\">      initial /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key='InitialLoginForm'</span><br><span class=\"line\">      component=&#123;Register&#125;</span><br><span class=\"line\">      type='replace' /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key='Login'</span><br><span class=\"line\">      component=&#123;Login&#125;</span><br><span class=\"line\">      type='replace' /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key='Register'</span><br><span class=\"line\">      component=&#123;Register&#125;</span><br><span class=\"line\">      type='replace' /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key='ForgotPassword'</span><br><span class=\"line\">      component=&#123;ForgotPassword&#125;</span><br><span class=\"line\">      type='replace' /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key='Subview'</span><br><span class=\"line\">      component=&#123;Subview&#125; /&gt;</span><br><span class=\"line\">  &lt;/Scene&gt;</span><br><span class=\"line\">&lt;/Router&gt;</span><br></pre></td></tr></table></figure>\n<p>key就是组件的标志，比如说，如果要跳转到<code>Register</code>组件，可以这么做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Actions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native-router-flux'</span></span><br><span class=\"line\">Actions.Register()</span><br></pre></td></tr></table></figure>\n<h3 id=\"react-native-simple-store\"><a href=\"#react-native-simple-store\" class=\"headerlink\" title=\"react-native-simple-store\"></a>react-native-simple-store</h3><p><a href=\"https://github.com/jasonmerino/react-native-simple-store\" target=\"_blank\" rel=\"external\">https://github.com/jasonmerino/react-native-simple-store</a></p>\n<p>React Native本地的异步储存，使用方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'react-native-simple-store'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">store</span><br><span class=\"line\">  .save(<span class=\"string\">'coffee'</span>, &#123;</span><br><span class=\"line\">    isAwesome: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(() =&gt; store.get(<span class=\"string\">'coffee'</span>))</span><br><span class=\"line\">  .then(coffee =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee.isAwesome === <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(() =&gt; store.update(<span class=\"string\">'coffee'</span>, &#123;</span><br><span class=\"line\">    isNotEssential: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">  .then(() =&gt; store.get(<span class=\"string\">'coffee'</span>))</span><br><span class=\"line\">  .then(coffee =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee.isNotEssential === <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee.isAwesome === <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> store.delete(<span class=\"string\">'coffee'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(() =&gt; store.get(<span class=\"string\">'coffee'</span>))</span><br><span class=\"line\">  .then(coffee =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee === <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error.message);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码规划\"><a href=\"#代码规划\" class=\"headerlink\" title=\"代码规划\"></a>代码规划</h2><ul>\n<li>入口文件，index.ios.js和index.android.js</li>\n<li>所有业务代码放在src目录中</li>\n<li>reducers单独一个文件夹，里面分成4个模块，分别是auth、device、global和profile，每个模块里面有3份文件，分别是installState.js（初始化数据）、actions.js（dispatch行为）和reducer.js（接受diapatch，更改数据），每个模块里面还有一个tests文件夹，用来存放actions和reducer的测试用例。</li>\n<li>containers存放所有路由组件，也就是所有的页面</li>\n<li>lib存放config、数据请求以及工具类文件</li>\n<li>images存放图片</li>\n<li>componengs存放通用的小组件</li>\n</ul>\n<p>项目虽然不是很复杂，但是代码的规划非常合理，也有完整的单元测试，确实学到了很多东西。</p>\n","excerpt":"","more":"<p>snowflake是一个非常好的<a href=\"https://github.com/bartonhammond/snowflake\">react naitve开源项目</a>，功能其实并不复杂，但是讲解却非常详细，它的功能主要是实现手机app的登录、注册、修改密码以及获取和修改用户信息等功能，是个很常见的业务场景。</p>\n<p>通过它可以了解一个完整的React Native项目是长什么样子的，有哪些常用的模块，以及代码是怎么规划的，组件和组件之间是如何通过redux来进行通信交流的。</p>\n<h2 id=\"新发现的几个模块\"><a href=\"#新发现的几个模块\" class=\"headerlink\" title=\"新发现的几个模块\"></a>新发现的几个模块</h2><p>开发React Native有一些几乎是必备的模块，比如<code>react-redux</code>，<code>redux-thunk</code>，在看这个项目的过程中，发现了几个之前不知道的模块。</p>\n<h3 id=\"react-native-i18n\"><a href=\"#react-native-i18n\" class=\"headerlink\" title=\"react-native-i18n\"></a>react-native-i18n</h3><p><a href=\"https://github.com/AlexanderZaytsev/react-native-i18n\">https://github.com/AlexanderZaytsev/react-native-i18n</a></p>\n<p>一开始不明白<code>i18n</code>是什么意思，后来google之后才知道，原来是internationalization，国际化的意思，nternationalization去掉头尾的i和n刚好还剩下18个字符。这个模块可以让app自动地切换成当前移动设备使用的语言。</p>\n<p>比如在一份json文件中定义不同的语言：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"zh\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"版本\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"当前状态\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"查看控制台\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"更新状态\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"en\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"Version\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"Current State\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"see console\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"Update State\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"fr\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"Version\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"état actuel\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"voir console\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"état de mise à jour\"</span>      </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"es\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"Versión\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Header\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"current_state\"</span>: <span class=\"string\">\"Estado actual\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"see_console\"</span>: <span class=\"string\">\"ver la consola\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"update_state\"</span>: <span class=\"string\">\"Estado de actualización\"</span>      </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>引用这份json文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> I18n = <span class=\"built_in\">require</span>(<span class=\"string\">'react-native-i18n'</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> Translations <span class=\"keyword\">from</span> <span class=\"string\">'../lib/Translations'</span></span><br><span class=\"line\">I18n.translations = Translations</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> version = I18n.t(<span class=\"string\">'App.version'</span>)</span><br></pre></td></tr></table></figure>\n<p>变量version的值在中文的手机会显示：“版本”，在英文的手机会显示：“Version”。</p>\n<h3 id=\"tcomb-form-native\"><a href=\"#tcomb-form-native\" class=\"headerlink\" title=\"tcomb-form-native\"></a>tcomb-form-native</h3><p><a href=\"https://github.com/gcanti/tcomb-form-native\">https://github.com/gcanti/tcomb-form-native</a></p>\n<p>一个非常好用的表单库，根据配置可以快速生成表单，使用的方法如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'tcomb-form-native'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> Form = t.form.Form</span><br><span class=\"line\"></span><br><span class=\"line\">loginForm = t.struct(&#123;</span><br><span class=\"line\">  username: t.String,</span><br><span class=\"line\">  email: t.String,</span><br><span class=\"line\">  password: t.String,</span><br><span class=\"line\">  passwordAgain: t.String</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">options.fields[<span class=\"string\">'username'</span>] = username</span><br><span class=\"line\">options.fields[<span class=\"string\">'username'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.username'</span>)</span><br><span class=\"line\">options.fields[<span class=\"string\">'username'</span>].autoCapitalize = <span class=\"string\">'none'</span></span><br><span class=\"line\">options.fields[<span class=\"string\">'email'</span>] = email</span><br><span class=\"line\">options.fields[<span class=\"string\">'email'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.email'</span>)</span><br><span class=\"line\">options.fields[<span class=\"string\">'email'</span>].autoCapitalize = <span class=\"string\">'none'</span></span><br><span class=\"line\">options.fields[<span class=\"string\">'password'</span>] = password</span><br><span class=\"line\">options.fields[<span class=\"string\">'password'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.password'</span>)</span><br><span class=\"line\">options.fields[<span class=\"string\">'passwordAgain'</span>] = passwordAgain</span><br><span class=\"line\">options.fields[<span class=\"string\">'passwordAgain'</span>].placeholder = I18n.t(<span class=\"string\">'LoginForm.password_again'</span>)</span><br></pre></td></tr></table></figure>\n<p>最终可以生成相应的表单</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/v2jdt.png\" alt=\"\"></p>\n<h3 id=\"react-native-router-flux\"><a href=\"#react-native-router-flux\" class=\"headerlink\" title=\"react-native-router-flux\"></a>react-native-router-flux</h3><p><a href=\"https://github.com/aksonov/react-native-router-flux\">https://github.com/aksonov/react-native-router-flux</a></p>\n<p>React Native路由模块，轻松实现不同组件的切换。使用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    Router,</span><br><span class=\"line\">    Scene&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native-router-flux'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置组件</span></span><br><span class=\"line\">&lt;Router sceneStyle=&#123;&#123; backgroundColor: <span class=\"string\">'white'</span> &#125;&#125;&gt;</span><br><span class=\"line\">  &lt;Scene key='root' hideNavBar&gt;</span><br><span class=\"line\">    &lt;Scene key='App'</span><br><span class=\"line\">      component=&#123;App&#125;</span><br><span class=\"line\">      type='replace'</span><br><span class=\"line\">      initial /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key='InitialLoginForm'</span><br><span class=\"line\">      component=&#123;Register&#125;</span><br><span class=\"line\">      type='replace' /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key='Login'</span><br><span class=\"line\">      component=&#123;Login&#125;</span><br><span class=\"line\">      type='replace' /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key='Register'</span><br><span class=\"line\">      component=&#123;Register&#125;</span><br><span class=\"line\">      type='replace' /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key='ForgotPassword'</span><br><span class=\"line\">      component=&#123;ForgotPassword&#125;</span><br><span class=\"line\">      type='replace' /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Scene key='Subview'</span><br><span class=\"line\">      component=&#123;Subview&#125; /&gt;</span><br><span class=\"line\">  &lt;/Scene&gt;</span><br><span class=\"line\">&lt;/Router&gt;</span><br></pre></td></tr></table></figure>\n<p>key就是组件的标志，比如说，如果要跳转到<code>Register</code>组件，可以这么做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Actions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native-router-flux'</span></span><br><span class=\"line\">Actions.Register()</span><br></pre></td></tr></table></figure>\n<h3 id=\"react-native-simple-store\"><a href=\"#react-native-simple-store\" class=\"headerlink\" title=\"react-native-simple-store\"></a>react-native-simple-store</h3><p><a href=\"https://github.com/jasonmerino/react-native-simple-store\">https://github.com/jasonmerino/react-native-simple-store</a></p>\n<p>React Native本地的异步储存，使用方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'react-native-simple-store'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">store</span><br><span class=\"line\">  .save(<span class=\"string\">'coffee'</span>, &#123;</span><br><span class=\"line\">    isAwesome: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(() =&gt; store.get(<span class=\"string\">'coffee'</span>))</span><br><span class=\"line\">  .then(coffee =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee.isAwesome === <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(() =&gt; store.update(<span class=\"string\">'coffee'</span>, &#123;</span><br><span class=\"line\">    isNotEssential: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">  .then(() =&gt; store.get(<span class=\"string\">'coffee'</span>))</span><br><span class=\"line\">  .then(coffee =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee.isNotEssential === <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee.isAwesome === <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> store.delete(<span class=\"string\">'coffee'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(() =&gt; store.get(<span class=\"string\">'coffee'</span>))</span><br><span class=\"line\">  .then(coffee =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.assert(coffee === <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error.message);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码规划\"><a href=\"#代码规划\" class=\"headerlink\" title=\"代码规划\"></a>代码规划</h2><ul>\n<li>入口文件，index.ios.js和index.android.js</li>\n<li>所有业务代码放在src目录中</li>\n<li>reducers单独一个文件夹，里面分成4个模块，分别是auth、device、global和profile，每个模块里面有3份文件，分别是installState.js（初始化数据）、actions.js（dispatch行为）和reducer.js（接受diapatch，更改数据），每个模块里面还有一个tests文件夹，用来存放actions和reducer的测试用例。</li>\n<li>containers存放所有路由组件，也就是所有的页面</li>\n<li>lib存放config、数据请求以及工具类文件</li>\n<li>images存放图片</li>\n<li>componengs存放通用的小组件</li>\n</ul>\n<p>项目虽然不是很复杂，但是代码的规划非常合理，也有完整的单元测试，确实学到了很多东西。</p>\n"},{"title":"【总结】vue从1.0升级到2.0","_content":"\n原先有一个项目，想要使用[饿了么的UI库](http://element.eleme.io/#/zh-CN)来提高项目的简洁度以及可扩展性，也提高开发效率，所以决定将项目的基础库vuejs，从1.0升级为2.0。\n\nvue2.0移除和替换了很多api，所以在升级的过程中，修改了无数个bug，最终费了很大的劲才升级成功，同时也集成了UI库，界面变简洁美观了，开发变得更加容易了，所以升级还是非常值得的。\n\n在这个过程中，记录了很多的东西，在此总结一下。\n\n## 检测需要升级的代码工具\n\n[vue-migration-helper](https://github.com/vuejs/vue-migration-helper)能用来检测定位需要升级的代码，可以快速定位，批量修改代码，很实用。\n\n## vuex的dispatch\n\n1.0是通过actions的dispatch来派发mutation。\n\n2.0改成用dispatch派发action，然后action通过commit派发mutation，然后对数据进行修改。\n\n## router\n\n1.0在组件中监听路由变化的写法\n\n```javascript\nnew Vue({\n  route ({to}) {\n\t//to是路由实例，可以拿到路由的各种信息，比如params，path等等\n  }\n})\n```\n\n2.0改成用watch监听\n\n```javascript\nnew Vue({\n  watch: {\n    '$store' () {\n      // ...\n    }\n  }\n})\n```\n\n路由信息通过`this.$route`获取，路由实例是`this.$router`。\n\n## filter\n\n1.0的过滤器filter可以在指令中使用，比如说\n\n```html\n<div v-html=\"startTime | date\"></div>\n```\n\n2.0将filter改成只能在取值的时候使用，而不能在指令中使用\n\n```html\n<div>{{startTime | date}}</div>\n```\n\n## 数据必须提前声明\n\n1.0没有提前声明数据并不会有任何问题。\n\n2.0如果提前声明数据就会有警告。\n\n## for遍历中的$index\n\n1.0的for遍历可以通过这种方式拿到$index\n\n```html\n<li v-for=\"item in items\">\n\t{{$index}}\n</li>\n```\n\n2.0这取消这种快捷写法，改成必须提前声明\n\n```html\n<li v-for=\"(item, index) in items\">\n\t{{index}}\n</li>\n```\n\n## 取消数组的$set和$remove方法\n\n1.0可以这样子操作数组\n\n```javascript\nvm.list.$set(index, item)\nvm.list.$remove(item)\n```\n\n2.0将$set改成全局的Vue.$set，$remove改用splice\n\n```\nVue.set(list, index, item)\nvm.list.splice(index, 1)\n```\n\n## 数据绑定的写法\n\n1.0可以这样子绑定数据\n\n```html\n<div href=\"{{item.url}}\"></div>\n```\n\n2.0不允许在内联属性中使用插值符号，所以要这么做\n\n```html\n<div :href=\"item.url\"></div>\n```\n\n## vuex中getters和actions\n\n1.0中getters和actions的写法\n\n```javascript\nnew Vue({\n  vuex: {\n    actions: {\n      getUserInfo\n    },\n    getters: {\n      userId: ({ userInfo }) => userInfo.id,\n    }\n  }\n})\n```\n\n2.0的写法是\n\n```javascript\nimport { setTip } from '../../vuex/actions/doc_actions'\nimport { mapGetters } from 'vuex'\n\ncomputed: {\n  ...mapGetters({\n    userId\n  })\n}\n```\n\n而action的调用方式为`this.$store.dispatch(action_name, payload)`","source":"_posts/2016-12-07-vue-upgrade.md","raw":"---\ntitle: 【总结】vue从1.0升级到2.0\ncategories: Javascript\ntags: [vue]\n---\n\n原先有一个项目，想要使用[饿了么的UI库](http://element.eleme.io/#/zh-CN)来提高项目的简洁度以及可扩展性，也提高开发效率，所以决定将项目的基础库vuejs，从1.0升级为2.0。\n\nvue2.0移除和替换了很多api，所以在升级的过程中，修改了无数个bug，最终费了很大的劲才升级成功，同时也集成了UI库，界面变简洁美观了，开发变得更加容易了，所以升级还是非常值得的。\n\n在这个过程中，记录了很多的东西，在此总结一下。\n\n## 检测需要升级的代码工具\n\n[vue-migration-helper](https://github.com/vuejs/vue-migration-helper)能用来检测定位需要升级的代码，可以快速定位，批量修改代码，很实用。\n\n## vuex的dispatch\n\n1.0是通过actions的dispatch来派发mutation。\n\n2.0改成用dispatch派发action，然后action通过commit派发mutation，然后对数据进行修改。\n\n## router\n\n1.0在组件中监听路由变化的写法\n\n```javascript\nnew Vue({\n  route ({to}) {\n\t//to是路由实例，可以拿到路由的各种信息，比如params，path等等\n  }\n})\n```\n\n2.0改成用watch监听\n\n```javascript\nnew Vue({\n  watch: {\n    '$store' () {\n      // ...\n    }\n  }\n})\n```\n\n路由信息通过`this.$route`获取，路由实例是`this.$router`。\n\n## filter\n\n1.0的过滤器filter可以在指令中使用，比如说\n\n```html\n<div v-html=\"startTime | date\"></div>\n```\n\n2.0将filter改成只能在取值的时候使用，而不能在指令中使用\n\n```html\n<div>{{startTime | date}}</div>\n```\n\n## 数据必须提前声明\n\n1.0没有提前声明数据并不会有任何问题。\n\n2.0如果提前声明数据就会有警告。\n\n## for遍历中的$index\n\n1.0的for遍历可以通过这种方式拿到$index\n\n```html\n<li v-for=\"item in items\">\n\t{{$index}}\n</li>\n```\n\n2.0这取消这种快捷写法，改成必须提前声明\n\n```html\n<li v-for=\"(item, index) in items\">\n\t{{index}}\n</li>\n```\n\n## 取消数组的$set和$remove方法\n\n1.0可以这样子操作数组\n\n```javascript\nvm.list.$set(index, item)\nvm.list.$remove(item)\n```\n\n2.0将$set改成全局的Vue.$set，$remove改用splice\n\n```\nVue.set(list, index, item)\nvm.list.splice(index, 1)\n```\n\n## 数据绑定的写法\n\n1.0可以这样子绑定数据\n\n```html\n<div href=\"{{item.url}}\"></div>\n```\n\n2.0不允许在内联属性中使用插值符号，所以要这么做\n\n```html\n<div :href=\"item.url\"></div>\n```\n\n## vuex中getters和actions\n\n1.0中getters和actions的写法\n\n```javascript\nnew Vue({\n  vuex: {\n    actions: {\n      getUserInfo\n    },\n    getters: {\n      userId: ({ userInfo }) => userInfo.id,\n    }\n  }\n})\n```\n\n2.0的写法是\n\n```javascript\nimport { setTip } from '../../vuex/actions/doc_actions'\nimport { mapGetters } from 'vuex'\n\ncomputed: {\n  ...mapGetters({\n    userId\n  })\n}\n```\n\n而action的调用方式为`this.$store.dispatch(action_name, payload)`","slug":"2016-12-07-vue-upgrade","published":1,"date":"2016-12-07T14:05:28.000Z","updated":"2016-12-07T14:09:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxra0001qy3onpf4410gs","content":"<p>原先有一个项目，想要使用<a href=\"http://element.eleme.io/#/zh-CN\" target=\"_blank\" rel=\"external\">饿了么的UI库</a>来提高项目的简洁度以及可扩展性，也提高开发效率，所以决定将项目的基础库vuejs，从1.0升级为2.0。</p>\n<p>vue2.0移除和替换了很多api，所以在升级的过程中，修改了无数个bug，最终费了很大的劲才升级成功，同时也集成了UI库，界面变简洁美观了，开发变得更加容易了，所以升级还是非常值得的。</p>\n<p>在这个过程中，记录了很多的东西，在此总结一下。</p>\n<h2 id=\"检测需要升级的代码工具\"><a href=\"#检测需要升级的代码工具\" class=\"headerlink\" title=\"检测需要升级的代码工具\"></a>检测需要升级的代码工具</h2><p><a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">vue-migration-helper</a>能用来检测定位需要升级的代码，可以快速定位，批量修改代码，很实用。</p>\n<h2 id=\"vuex的dispatch\"><a href=\"#vuex的dispatch\" class=\"headerlink\" title=\"vuex的dispatch\"></a>vuex的dispatch</h2><p>1.0是通过actions的dispatch来派发mutation。</p>\n<p>2.0改成用dispatch派发action，然后action通过commit派发mutation，然后对数据进行修改。</p>\n<h2 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h2><p>1.0在组件中监听路由变化的写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  route (&#123;to&#125;) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//to是路由实例，可以拿到路由的各种信息，比如params，path等等</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.0改成用watch监听</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    <span class=\"string\">'$store'</span> () &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>路由信息通过<code>this.$route</code>获取，路由实例是<code>this.$router</code>。</p>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><p>1.0的过滤器filter可以在指令中使用，比如说</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"startTime | date\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.0将filter改成只能在取值的时候使用，而不能在指令中使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;startTime | date&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数据必须提前声明\"><a href=\"#数据必须提前声明\" class=\"headerlink\" title=\"数据必须提前声明\"></a>数据必须提前声明</h2><p>1.0没有提前声明数据并不会有任何问题。</p>\n<p>2.0如果提前声明数据就会有警告。</p>\n<h2 id=\"for遍历中的-index\"><a href=\"#for遍历中的-index\" class=\"headerlink\" title=\"for遍历中的$index\"></a>for遍历中的$index</h2><p>1.0的for遍历可以通过这种方式拿到$index</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123;$index&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.0这取消这种快捷写法，改成必须提前声明</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123;index&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"取消数组的-set和-remove方法\"><a href=\"#取消数组的-set和-remove方法\" class=\"headerlink\" title=\"取消数组的$set和$remove方法\"></a>取消数组的$set和$remove方法</h2><p>1.0可以这样子操作数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.list.$set(index, item)</span><br><span class=\"line\">vm.list.$remove(item)</span><br></pre></td></tr></table></figure>\n<p>2.0将$set改成全局的Vue.$set，$remove改用splice</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(list, index, item)</span><br><span class=\"line\">vm.list.splice(index, 1)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据绑定的写法\"><a href=\"#数据绑定的写法\" class=\"headerlink\" title=\"数据绑定的写法\"></a>数据绑定的写法</h2><p>1.0可以这样子绑定数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123;item.url&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.0不允许在内联属性中使用插值符号，所以要这么做</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"item.url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"vuex中getters和actions\"><a href=\"#vuex中getters和actions\" class=\"headerlink\" title=\"vuex中getters和actions\"></a>vuex中getters和actions</h2><p>1.0中getters和actions的写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  vuex: &#123;</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">      getUserInfo</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getters: &#123;</span><br><span class=\"line\">      userId: (&#123; userInfo &#125;) =&gt; userInfo.id,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.0的写法是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; setTip &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../vuex/actions/doc_actions'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters(&#123;</span><br><span class=\"line\">    userId</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而action的调用方式为<code>this.$store.dispatch(action_name, payload)</code></p>\n","excerpt":"","more":"<p>原先有一个项目，想要使用<a href=\"http://element.eleme.io/#/zh-CN\">饿了么的UI库</a>来提高项目的简洁度以及可扩展性，也提高开发效率，所以决定将项目的基础库vuejs，从1.0升级为2.0。</p>\n<p>vue2.0移除和替换了很多api，所以在升级的过程中，修改了无数个bug，最终费了很大的劲才升级成功，同时也集成了UI库，界面变简洁美观了，开发变得更加容易了，所以升级还是非常值得的。</p>\n<p>在这个过程中，记录了很多的东西，在此总结一下。</p>\n<h2 id=\"检测需要升级的代码工具\"><a href=\"#检测需要升级的代码工具\" class=\"headerlink\" title=\"检测需要升级的代码工具\"></a>检测需要升级的代码工具</h2><p><a href=\"https://github.com/vuejs/vue-migration-helper\">vue-migration-helper</a>能用来检测定位需要升级的代码，可以快速定位，批量修改代码，很实用。</p>\n<h2 id=\"vuex的dispatch\"><a href=\"#vuex的dispatch\" class=\"headerlink\" title=\"vuex的dispatch\"></a>vuex的dispatch</h2><p>1.0是通过actions的dispatch来派发mutation。</p>\n<p>2.0改成用dispatch派发action，然后action通过commit派发mutation，然后对数据进行修改。</p>\n<h2 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h2><p>1.0在组件中监听路由变化的写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  route (&#123;to&#125;) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//to是路由实例，可以拿到路由的各种信息，比如params，path等等</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.0改成用watch监听</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    <span class=\"string\">'$store'</span> () &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>路由信息通过<code>this.$route</code>获取，路由实例是<code>this.$router</code>。</p>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><p>1.0的过滤器filter可以在指令中使用，比如说</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"startTime | date\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.0将filter改成只能在取值的时候使用，而不能在指令中使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;startTime | date&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数据必须提前声明\"><a href=\"#数据必须提前声明\" class=\"headerlink\" title=\"数据必须提前声明\"></a>数据必须提前声明</h2><p>1.0没有提前声明数据并不会有任何问题。</p>\n<p>2.0如果提前声明数据就会有警告。</p>\n<h2 id=\"for遍历中的-index\"><a href=\"#for遍历中的-index\" class=\"headerlink\" title=\"for遍历中的$index\"></a>for遍历中的$index</h2><p>1.0的for遍历可以通过这种方式拿到$index</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123;$index&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.0这取消这种快捷写法，改成必须提前声明</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123;index&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"取消数组的-set和-remove方法\"><a href=\"#取消数组的-set和-remove方法\" class=\"headerlink\" title=\"取消数组的$set和$remove方法\"></a>取消数组的$set和$remove方法</h2><p>1.0可以这样子操作数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.list.$set(index, item)</span><br><span class=\"line\">vm.list.$remove(item)</span><br></pre></td></tr></table></figure>\n<p>2.0将$set改成全局的Vue.$set，$remove改用splice</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(list, index, item)</span><br><span class=\"line\">vm.list.splice(index, 1)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据绑定的写法\"><a href=\"#数据绑定的写法\" class=\"headerlink\" title=\"数据绑定的写法\"></a>数据绑定的写法</h2><p>1.0可以这样子绑定数据</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123;item.url&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.0不允许在内联属性中使用插值符号，所以要这么做</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"item.url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"vuex中getters和actions\"><a href=\"#vuex中getters和actions\" class=\"headerlink\" title=\"vuex中getters和actions\"></a>vuex中getters和actions</h2><p>1.0中getters和actions的写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  vuex: &#123;</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">      getUserInfo</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getters: &#123;</span><br><span class=\"line\">      userId: (&#123; userInfo &#125;) =&gt; userInfo.id,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.0的写法是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; setTip &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../vuex/actions/doc_actions'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters(&#123;</span><br><span class=\"line\">    userId</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而action的调用方式为<code>this.$store.dispatch(action_name, payload)</code></p>\n"},{"title":"【总结】2016/12/08","_content":"\n## Objective\n\n下班之后，花一个半小时，做第三遍rails 101，完成1-5节。\n\n## Relective\n\n做第三次遍，感觉越来越熟练了，敲代码的速度也更快了，很有成就感。\n\n## Interpretive\n\n### git 存档\n\n平时做项目时，经常会改很多很多东西，然后要提交git时才发现，怎么修改了这么多！！！经常搞不清楚到底哪个步骤修改了哪些文件，最终往往会写一句可能以后自己都看不懂的提交信息，草草了事。在练习rails101时，因为rails101的教程对项目进行了分解，每一个步骤对应一次commit，目标明确，循序渐进，写完一节就提交一节，所以我才发现，原来每次只做一件小事情，做好了就马上提交，一点都不会乱，这点我是学到了，很棒。\n\n### 漏写了无数次的 “end”\n\n犯错误最多的就是忘了写end，所以我决定每次写if或者循环等语法时，先把end写了再说，养成一个好习惯。\n\n### 慢慢地能默写了\n\n已经做了两遍rails，在做第三遍时，已经比较熟练了，比较意外的是，竟然可以在看了教程的一句引导词之后，可以不看后面的步骤，自己把下一步给写出来了，比如说CRUD，这非常有成就感，真是熟能生巧呀。\n\n### 情不自禁地和nodejs做比较\n\n平时学后端用nodejs，所以不自觉地会比较ruby on rails(RoR)和nodej\u0010s，最让我刚到惊讶的是，rails帮开发者做了很多很多事情，就拿路由来说，rails只需要在routes.rb写一句\n\n```rub\nresources :groups\n```\n\n它就能帮你生成7个Action\n\n```ruby\n              groups GET    /groups(.:format)              groups#index\n                     POST   /groups(.:format)              groups#create\n           new_group GET    /groups/new(.:format)          groups#new\n          edit_group GET    /groups/:id/edit(.:format)     groups#edit\n               group GET    /groups/:id(.:format)          groups#show\n                     PATCH  /groups/:id(.:format)          groups#update\n                     PUT    /groups/:id(.:format)          groups#update\n                     DELETE /groups/:id(.:format)          groups#destroy\n                root GET    /                              groups#index\n```\n\n如果用nodejs的框架koa来写的话，是需要一个一个手动定义的\n\n```javascript\nrouter.get('/', controller.getUser)\nrouter.post('/', controller.addUser)\nrouter.put('/', controller.updateUser)\nrouter.delete('/:id', controller.destroy)\n...\n```\n\n因为rails帮开发者做很多事情，所以开发者的开发效率会更高。\n\n另外，发现了一个node和RoR一个很相似的地方，那就是rails的`gemfile`和node的`package.json`，都是用来安装一些模块的，RoR的安装命令是`bundle install `，而node是`npm install`。\n\n### ApplicationRecord 和 ActiveRecord\n\n用rails创建model时，默认是长这个样子的\n\n```ruby\nclass Group < ApplicationRecord\nend\n\n```\n\n教程要求把`ApplicationRecord`改成`ActiveRecord::Base`，但是因为教程没有明说，所以我经常忘记。现在我还弄不清楚为什么要改成`ActiveRecord::Base`，所以先背起来再说。\n\n### 良好的编程规范\n\nrails提供的一些功能是有助于帮助程序员养成良好的习惯的，比如说\n\n- html模板代码重复太多，冗余了把？用partial。\n- 很多请求都要先经过登录认证吧？用before_action。\n- 很多html模板都需要用到工具函数吧？用Helper。\n- 很多action里面都用到同一个函数吗？把它封装成函数，写在private里面。\n\n### 做得越多，想写的东西就越多。\n\n一开始做的时候，感觉没有可以写，于是就偷懒没写学习日记，随着练习次数的增加，学到的东西越来越多，慢慢地就开始有很多东西可以写了，继续保持。\n\n### 加入一个登录系统也太轻松了吧？\n\n前阵子有nodejs开发一套登录系统，费力很大的劲，还算是比较复杂的，开发起来有点麻烦，而RoR可以直接使用devise模块，直接搞定登录系统，哇塞，太轻松了吧。\n\n### <% %> 和 <%= %>\n\n这两者经常搞混，虽然现在也没有彻底弄清楚，不过还是发现一些规律的，很多情况下，都用到`<%= %>`，比如说\n\n```ruby\n<h2><%= @group.title %></h2>\n\n<%= link_to(\"Edit\", edit_group_path(@group), class: \"btn btn-primary pull-right\") %>\n\n<%= f.input :title, input_html: { class: \"form-control\"} %>\n\n<%= render \"common/navbar\" %>\n```\n\n而`<% %>`是用在一些判断或者遍历的关键词上面的，比如说\n\n```ruby\n<% if current_user && current_user == @group.user %>\n\n<% end %>\n```\n\n```ruby\n<% @groups.each do |group| %>\n\n<% end %>\n```\n\n## Decisional\n\n放下之前无效的学习方式，摒弃傲慢的态度，一心一意按照教程的指示做，养成好的学习习惯，相信一定会有惊喜的。\n","source":"_posts/2016-12-08-coding-diary.md","raw":"---\ntitle: 【总结】2016/12/08\ncategories: 总结\n---\n\n## Objective\n\n下班之后，花一个半小时，做第三遍rails 101，完成1-5节。\n\n## Relective\n\n做第三次遍，感觉越来越熟练了，敲代码的速度也更快了，很有成就感。\n\n## Interpretive\n\n### git 存档\n\n平时做项目时，经常会改很多很多东西，然后要提交git时才发现，怎么修改了这么多！！！经常搞不清楚到底哪个步骤修改了哪些文件，最终往往会写一句可能以后自己都看不懂的提交信息，草草了事。在练习rails101时，因为rails101的教程对项目进行了分解，每一个步骤对应一次commit，目标明确，循序渐进，写完一节就提交一节，所以我才发现，原来每次只做一件小事情，做好了就马上提交，一点都不会乱，这点我是学到了，很棒。\n\n### 漏写了无数次的 “end”\n\n犯错误最多的就是忘了写end，所以我决定每次写if或者循环等语法时，先把end写了再说，养成一个好习惯。\n\n### 慢慢地能默写了\n\n已经做了两遍rails，在做第三遍时，已经比较熟练了，比较意外的是，竟然可以在看了教程的一句引导词之后，可以不看后面的步骤，自己把下一步给写出来了，比如说CRUD，这非常有成就感，真是熟能生巧呀。\n\n### 情不自禁地和nodejs做比较\n\n平时学后端用nodejs，所以不自觉地会比较ruby on rails(RoR)和nodej\u0010s，最让我刚到惊讶的是，rails帮开发者做了很多很多事情，就拿路由来说，rails只需要在routes.rb写一句\n\n```rub\nresources :groups\n```\n\n它就能帮你生成7个Action\n\n```ruby\n              groups GET    /groups(.:format)              groups#index\n                     POST   /groups(.:format)              groups#create\n           new_group GET    /groups/new(.:format)          groups#new\n          edit_group GET    /groups/:id/edit(.:format)     groups#edit\n               group GET    /groups/:id(.:format)          groups#show\n                     PATCH  /groups/:id(.:format)          groups#update\n                     PUT    /groups/:id(.:format)          groups#update\n                     DELETE /groups/:id(.:format)          groups#destroy\n                root GET    /                              groups#index\n```\n\n如果用nodejs的框架koa来写的话，是需要一个一个手动定义的\n\n```javascript\nrouter.get('/', controller.getUser)\nrouter.post('/', controller.addUser)\nrouter.put('/', controller.updateUser)\nrouter.delete('/:id', controller.destroy)\n...\n```\n\n因为rails帮开发者做很多事情，所以开发者的开发效率会更高。\n\n另外，发现了一个node和RoR一个很相似的地方，那就是rails的`gemfile`和node的`package.json`，都是用来安装一些模块的，RoR的安装命令是`bundle install `，而node是`npm install`。\n\n### ApplicationRecord 和 ActiveRecord\n\n用rails创建model时，默认是长这个样子的\n\n```ruby\nclass Group < ApplicationRecord\nend\n\n```\n\n教程要求把`ApplicationRecord`改成`ActiveRecord::Base`，但是因为教程没有明说，所以我经常忘记。现在我还弄不清楚为什么要改成`ActiveRecord::Base`，所以先背起来再说。\n\n### 良好的编程规范\n\nrails提供的一些功能是有助于帮助程序员养成良好的习惯的，比如说\n\n- html模板代码重复太多，冗余了把？用partial。\n- 很多请求都要先经过登录认证吧？用before_action。\n- 很多html模板都需要用到工具函数吧？用Helper。\n- 很多action里面都用到同一个函数吗？把它封装成函数，写在private里面。\n\n### 做得越多，想写的东西就越多。\n\n一开始做的时候，感觉没有可以写，于是就偷懒没写学习日记，随着练习次数的增加，学到的东西越来越多，慢慢地就开始有很多东西可以写了，继续保持。\n\n### 加入一个登录系统也太轻松了吧？\n\n前阵子有nodejs开发一套登录系统，费力很大的劲，还算是比较复杂的，开发起来有点麻烦，而RoR可以直接使用devise模块，直接搞定登录系统，哇塞，太轻松了吧。\n\n### <% %> 和 <%= %>\n\n这两者经常搞混，虽然现在也没有彻底弄清楚，不过还是发现一些规律的，很多情况下，都用到`<%= %>`，比如说\n\n```ruby\n<h2><%= @group.title %></h2>\n\n<%= link_to(\"Edit\", edit_group_path(@group), class: \"btn btn-primary pull-right\") %>\n\n<%= f.input :title, input_html: { class: \"form-control\"} %>\n\n<%= render \"common/navbar\" %>\n```\n\n而`<% %>`是用在一些判断或者遍历的关键词上面的，比如说\n\n```ruby\n<% if current_user && current_user == @group.user %>\n\n<% end %>\n```\n\n```ruby\n<% @groups.each do |group| %>\n\n<% end %>\n```\n\n## Decisional\n\n放下之前无效的学习方式，摒弃傲慢的态度，一心一意按照教程的指示做，养成好的学习习惯，相信一定会有惊喜的。\n","slug":"2016-12-08-coding-diary","published":1,"date":"2016-12-21T02:26:48.000Z","updated":"2016-12-21T02:27:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxra2001ty3onagu4fiyc","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>下班之后，花一个半小时，做第三遍rails 101，完成1-5节。</p>\n<h2 id=\"Relective\"><a href=\"#Relective\" class=\"headerlink\" title=\"Relective\"></a>Relective</h2><p>做第三次遍，感觉越来越熟练了，敲代码的速度也更快了，很有成就感。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"git-存档\"><a href=\"#git-存档\" class=\"headerlink\" title=\"git 存档\"></a>git 存档</h3><p>平时做项目时，经常会改很多很多东西，然后要提交git时才发现，怎么修改了这么多！！！经常搞不清楚到底哪个步骤修改了哪些文件，最终往往会写一句可能以后自己都看不懂的提交信息，草草了事。在练习rails101时，因为rails101的教程对项目进行了分解，每一个步骤对应一次commit，目标明确，循序渐进，写完一节就提交一节，所以我才发现，原来每次只做一件小事情，做好了就马上提交，一点都不会乱，这点我是学到了，很棒。</p>\n<h3 id=\"漏写了无数次的-“end”\"><a href=\"#漏写了无数次的-“end”\" class=\"headerlink\" title=\"漏写了无数次的 “end”\"></a>漏写了无数次的 “end”</h3><p>犯错误最多的就是忘了写end，所以我决定每次写if或者循环等语法时，先把end写了再说，养成一个好习惯。</p>\n<h3 id=\"慢慢地能默写了\"><a href=\"#慢慢地能默写了\" class=\"headerlink\" title=\"慢慢地能默写了\"></a>慢慢地能默写了</h3><p>已经做了两遍rails，在做第三遍时，已经比较熟练了，比较意外的是，竟然可以在看了教程的一句引导词之后，可以不看后面的步骤，自己把下一步给写出来了，比如说CRUD，这非常有成就感，真是熟能生巧呀。</p>\n<h3 id=\"情不自禁地和nodejs做比较\"><a href=\"#情不自禁地和nodejs做比较\" class=\"headerlink\" title=\"情不自禁地和nodejs做比较\"></a>情不自禁地和nodejs做比较</h3><p>平时学后端用nodejs，所以不自觉地会比较ruby on rails(RoR)和nodej\u0010s，最让我刚到惊讶的是，rails帮开发者做了很多很多事情，就拿路由来说，rails只需要在routes.rb写一句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resources :groups</span><br></pre></td></tr></table></figure>\n<p>它就能帮你生成7个Action</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    groups GET    /groups(.<span class=\"symbol\">:format</span>)              groups<span class=\"comment\">#index</span></span><br><span class=\"line\">           POST   /groups(.<span class=\"symbol\">:format</span>)              groups<span class=\"comment\">#create</span></span><br><span class=\"line\"> new_group GET    /groups/new(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#new</span></span><br><span class=\"line\">edit_group GET    /groups/<span class=\"symbol\">:id/edit</span>(.<span class=\"symbol\">:format</span>)     groups<span class=\"comment\">#edit</span></span><br><span class=\"line\">     group GET    /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#show</span></span><br><span class=\"line\">           PATCH  /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#update</span></span><br><span class=\"line\">           PUT    /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#update</span></span><br><span class=\"line\">           DELETE /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#destroy</span></span><br><span class=\"line\">      root GET    /                              groups<span class=\"comment\">#index</span></span><br></pre></td></tr></table></figure>\n<p>如果用nodejs的框架koa来写的话，是需要一个一个手动定义的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, controller.getUser)</span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, controller.addUser)</span><br><span class=\"line\">router.put(<span class=\"string\">'/'</span>, controller.updateUser)</span><br><span class=\"line\">router.delete(<span class=\"string\">'/:id'</span>, controller.destroy)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>因为rails帮开发者做很多事情，所以开发者的开发效率会更高。</p>\n<p>另外，发现了一个node和RoR一个很相似的地方，那就是rails的<code>gemfile</code>和node的<code>package.json</code>，都是用来安装一些模块的，RoR的安装命令是<code>bundle install</code>，而node是<code>npm install</code>。</p>\n<h3 id=\"ApplicationRecord-和-ActiveRecord\"><a href=\"#ApplicationRecord-和-ActiveRecord\" class=\"headerlink\" title=\"ApplicationRecord 和 ActiveRecord\"></a>ApplicationRecord 和 ActiveRecord</h3><p>用rails创建model时，默认是长这个样子的</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Group</span> &lt; ApplicationRecord</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>教程要求把<code>ApplicationRecord</code>改成<code>ActiveRecord::Base</code>，但是因为教程没有明说，所以我经常忘记。现在我还弄不清楚为什么要改成<code>ActiveRecord::Base</code>，所以先背起来再说。</p>\n<h3 id=\"良好的编程规范\"><a href=\"#良好的编程规范\" class=\"headerlink\" title=\"良好的编程规范\"></a>良好的编程规范</h3><p>rails提供的一些功能是有助于帮助程序员养成良好的习惯的，比如说</p>\n<ul>\n<li>html模板代码重复太多，冗余了把？用partial。</li>\n<li>很多请求都要先经过登录认证吧？用before_action。</li>\n<li>很多html模板都需要用到工具函数吧？用Helper。</li>\n<li>很多action里面都用到同一个函数吗？把它封装成函数，写在private里面。</li>\n</ul>\n<h3 id=\"做得越多，想写的东西就越多。\"><a href=\"#做得越多，想写的东西就越多。\" class=\"headerlink\" title=\"做得越多，想写的东西就越多。\"></a>做得越多，想写的东西就越多。</h3><p>一开始做的时候，感觉没有可以写，于是就偷懒没写学习日记，随着练习次数的增加，学到的东西越来越多，慢慢地就开始有很多东西可以写了，继续保持。</p>\n<h3 id=\"加入一个登录系统也太轻松了吧？\"><a href=\"#加入一个登录系统也太轻松了吧？\" class=\"headerlink\" title=\"加入一个登录系统也太轻松了吧？\"></a>加入一个登录系统也太轻松了吧？</h3><p>前阵子有nodejs开发一套登录系统，费力很大的劲，还算是比较复杂的，开发起来有点麻烦，而RoR可以直接使用devise模块，直接搞定登录系统，哇塞，太轻松了吧。</p>\n<h3 id=\"lt-gt-和-lt-gt\"><a href=\"#lt-gt-和-lt-gt\" class=\"headerlink\" title=\"&lt;% %&gt; 和 &lt;%= %&gt;\"></a>&lt;% %&gt; 和 &lt;%= %&gt;</h3><p>这两者经常搞混，虽然现在也没有彻底弄清楚，不过还是发现一些规律的，很多情况下，都用到<code>&lt;%= %&gt;</code>，比如说</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2&gt;&lt;%= @group.title %&gt;&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%= link_to(\"Edit\", edit_group_path(@group), class: \"btn btn-primary pull-right\") %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%= f.input :title, input_html: &#123; class: \"form-control\"&#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%= render \"common/navbar\" %&gt;</span><br></pre></td></tr></table></figure>\n<p>而<code>&lt;% %&gt;</code>是用在一些判断或者遍历的关键词上面的，比如说</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> current_user &amp;&amp; current_user == @group.user %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% <span class=\"keyword\">end</span> %&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% @groups.each <span class=\"keyword\">do</span> <span class=\"params\">|group|</span> %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% <span class=\"keyword\">end</span> %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>放下之前无效的学习方式，摒弃傲慢的态度，一心一意按照教程的指示做，养成好的学习习惯，相信一定会有惊喜的。</p>\n","excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>下班之后，花一个半小时，做第三遍rails 101，完成1-5节。</p>\n<h2 id=\"Relective\"><a href=\"#Relective\" class=\"headerlink\" title=\"Relective\"></a>Relective</h2><p>做第三次遍，感觉越来越熟练了，敲代码的速度也更快了，很有成就感。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"git-存档\"><a href=\"#git-存档\" class=\"headerlink\" title=\"git 存档\"></a>git 存档</h3><p>平时做项目时，经常会改很多很多东西，然后要提交git时才发现，怎么修改了这么多！！！经常搞不清楚到底哪个步骤修改了哪些文件，最终往往会写一句可能以后自己都看不懂的提交信息，草草了事。在练习rails101时，因为rails101的教程对项目进行了分解，每一个步骤对应一次commit，目标明确，循序渐进，写完一节就提交一节，所以我才发现，原来每次只做一件小事情，做好了就马上提交，一点都不会乱，这点我是学到了，很棒。</p>\n<h3 id=\"漏写了无数次的-“end”\"><a href=\"#漏写了无数次的-“end”\" class=\"headerlink\" title=\"漏写了无数次的 “end”\"></a>漏写了无数次的 “end”</h3><p>犯错误最多的就是忘了写end，所以我决定每次写if或者循环等语法时，先把end写了再说，养成一个好习惯。</p>\n<h3 id=\"慢慢地能默写了\"><a href=\"#慢慢地能默写了\" class=\"headerlink\" title=\"慢慢地能默写了\"></a>慢慢地能默写了</h3><p>已经做了两遍rails，在做第三遍时，已经比较熟练了，比较意外的是，竟然可以在看了教程的一句引导词之后，可以不看后面的步骤，自己把下一步给写出来了，比如说CRUD，这非常有成就感，真是熟能生巧呀。</p>\n<h3 id=\"情不自禁地和nodejs做比较\"><a href=\"#情不自禁地和nodejs做比较\" class=\"headerlink\" title=\"情不自禁地和nodejs做比较\"></a>情不自禁地和nodejs做比较</h3><p>平时学后端用nodejs，所以不自觉地会比较ruby on rails(RoR)和nodej\u0010s，最让我刚到惊讶的是，rails帮开发者做了很多很多事情，就拿路由来说，rails只需要在routes.rb写一句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resources :groups</span><br></pre></td></tr></table></figure>\n<p>它就能帮你生成7个Action</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    groups GET    /groups(.<span class=\"symbol\">:format</span>)              groups<span class=\"comment\">#index</span></span><br><span class=\"line\">           POST   /groups(.<span class=\"symbol\">:format</span>)              groups<span class=\"comment\">#create</span></span><br><span class=\"line\"> new_group GET    /groups/new(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#new</span></span><br><span class=\"line\">edit_group GET    /groups/<span class=\"symbol\">:id/edit</span>(.<span class=\"symbol\">:format</span>)     groups<span class=\"comment\">#edit</span></span><br><span class=\"line\">     group GET    /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#show</span></span><br><span class=\"line\">           PATCH  /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#update</span></span><br><span class=\"line\">           PUT    /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#update</span></span><br><span class=\"line\">           DELETE /groups/<span class=\"symbol\">:id</span>(.<span class=\"symbol\">:format</span>)          groups<span class=\"comment\">#destroy</span></span><br><span class=\"line\">      root GET    /                              groups<span class=\"comment\">#index</span></span><br></pre></td></tr></table></figure>\n<p>如果用nodejs的框架koa来写的话，是需要一个一个手动定义的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, controller.getUser)</span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, controller.addUser)</span><br><span class=\"line\">router.put(<span class=\"string\">'/'</span>, controller.updateUser)</span><br><span class=\"line\">router.delete(<span class=\"string\">'/:id'</span>, controller.destroy)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>因为rails帮开发者做很多事情，所以开发者的开发效率会更高。</p>\n<p>另外，发现了一个node和RoR一个很相似的地方，那就是rails的<code>gemfile</code>和node的<code>package.json</code>，都是用来安装一些模块的，RoR的安装命令是<code>bundle install</code>，而node是<code>npm install</code>。</p>\n<h3 id=\"ApplicationRecord-和-ActiveRecord\"><a href=\"#ApplicationRecord-和-ActiveRecord\" class=\"headerlink\" title=\"ApplicationRecord 和 ActiveRecord\"></a>ApplicationRecord 和 ActiveRecord</h3><p>用rails创建model时，默认是长这个样子的</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Group</span> &lt; ApplicationRecord</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>教程要求把<code>ApplicationRecord</code>改成<code>ActiveRecord::Base</code>，但是因为教程没有明说，所以我经常忘记。现在我还弄不清楚为什么要改成<code>ActiveRecord::Base</code>，所以先背起来再说。</p>\n<h3 id=\"良好的编程规范\"><a href=\"#良好的编程规范\" class=\"headerlink\" title=\"良好的编程规范\"></a>良好的编程规范</h3><p>rails提供的一些功能是有助于帮助程序员养成良好的习惯的，比如说</p>\n<ul>\n<li>html模板代码重复太多，冗余了把？用partial。</li>\n<li>很多请求都要先经过登录认证吧？用before_action。</li>\n<li>很多html模板都需要用到工具函数吧？用Helper。</li>\n<li>很多action里面都用到同一个函数吗？把它封装成函数，写在private里面。</li>\n</ul>\n<h3 id=\"做得越多，想写的东西就越多。\"><a href=\"#做得越多，想写的东西就越多。\" class=\"headerlink\" title=\"做得越多，想写的东西就越多。\"></a>做得越多，想写的东西就越多。</h3><p>一开始做的时候，感觉没有可以写，于是就偷懒没写学习日记，随着练习次数的增加，学到的东西越来越多，慢慢地就开始有很多东西可以写了，继续保持。</p>\n<h3 id=\"加入一个登录系统也太轻松了吧？\"><a href=\"#加入一个登录系统也太轻松了吧？\" class=\"headerlink\" title=\"加入一个登录系统也太轻松了吧？\"></a>加入一个登录系统也太轻松了吧？</h3><p>前阵子有nodejs开发一套登录系统，费力很大的劲，还算是比较复杂的，开发起来有点麻烦，而RoR可以直接使用devise模块，直接搞定登录系统，哇塞，太轻松了吧。</p>\n<h3 id=\"lt-gt-和-lt-gt\"><a href=\"#lt-gt-和-lt-gt\" class=\"headerlink\" title=\"&lt;% %&gt; 和 &lt;%= %&gt;\"></a>&lt;% %&gt; 和 &lt;%= %&gt;</h3><p>这两者经常搞混，虽然现在也没有彻底弄清楚，不过还是发现一些规律的，很多情况下，都用到<code>&lt;%= %&gt;</code>，比如说</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2&gt;&lt;%= @group.title %&gt;&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%= link_to(\"Edit\", edit_group_path(@group), class: \"btn btn-primary pull-right\") %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%= f.input :title, input_html: &#123; class: \"form-control\"&#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%= render \"common/navbar\" %&gt;</span><br></pre></td></tr></table></figure>\n<p>而<code>&lt;% %&gt;</code>是用在一些判断或者遍历的关键词上面的，比如说</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> current_user &amp;&amp; current_user == @group.user %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% <span class=\"keyword\">end</span> %&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% @groups.each <span class=\"keyword\">do</span> <span class=\"params\">|group|</span> %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% <span class=\"keyword\">end</span> %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>放下之前无效的学习方式，摒弃傲慢的态度，一心一意按照教程的指示做，养成好的学习习惯，相信一定会有惊喜的。</p>\n"},{"title":"vuex报错：vuex requires a Promise polyfill in this browser","_content":"\n使用vue2.0脚手架生成的项目，并且继承vuex和vue-router，在谷歌浏览器是正常的，但是在微信和uc浏览器就会出现这个错误。\n\n后来知道了原来需要加一个补丁，因为有些浏览器并不支持promise。\n\n解决方法：\n\nstep1：安装babel-polyfill。\n\n    npm i babel-polyfill -S\n\nstep2：将babel-polyfill添加到webpack的entry\n\n    entry: {\n      app: ['babel-polyfill', './src/main.js']\n    }\n\n\n","source":"_posts/2016-12-08-vuex-error.md","raw":"\n---\ntitle: vuex报错：vuex requires a Promise polyfill in this browser\ncategories: Javascript\ntags: vue\n---\n\n使用vue2.0脚手架生成的项目，并且继承vuex和vue-router，在谷歌浏览器是正常的，但是在微信和uc浏览器就会出现这个错误。\n\n后来知道了原来需要加一个补丁，因为有些浏览器并不支持promise。\n\n解决方法：\n\nstep1：安装babel-polyfill。\n\n    npm i babel-polyfill -S\n\nstep2：将babel-polyfill添加到webpack的entry\n\n    entry: {\n      app: ['babel-polyfill', './src/main.js']\n    }\n\n\n","slug":"2016-12-08-vuex-error","published":1,"date":"2016-12-08T09:15:07.000Z","updated":"2016-12-08T09:20:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxra7001xy3on562fohm7","content":"<p>使用vue2.0脚手架生成的项目，并且继承vuex和vue-router，在谷歌浏览器是正常的，但是在微信和uc浏览器就会出现这个错误。</p>\n<p>后来知道了原来需要加一个补丁，因为有些浏览器并不支持promise。</p>\n<p>解决方法：</p>\n<p>step1：安装babel-polyfill。</p>\n<pre><code>npm i babel-polyfill -S\n</code></pre><p>step2：将babel-polyfill添加到webpack的entry</p>\n<pre><code>entry: {\n  app: [&apos;babel-polyfill&apos;, &apos;./src/main.js&apos;]\n}\n</code></pre>","excerpt":"","more":"<p>使用vue2.0脚手架生成的项目，并且继承vuex和vue-router，在谷歌浏览器是正常的，但是在微信和uc浏览器就会出现这个错误。</p>\n<p>后来知道了原来需要加一个补丁，因为有些浏览器并不支持promise。</p>\n<p>解决方法：</p>\n<p>step1：安装babel-polyfill。</p>\n<pre><code>npm i babel-polyfill -S\n</code></pre><p>step2：将babel-polyfill添加到webpack的entry</p>\n<pre><code>entry: {\n  app: [&apos;babel-polyfill&apos;, &apos;./src/main.js&apos;]\n}\n</code></pre>"},{"title":"【总结】2016/12/09","_content":"\n## Objective\n\n第三遍rails101，6-10节\n\n![](http://oggx6lf7f.bkt.clouddn.com/ktbph.png)\n\n## Reflective\n\n### 今天的高峰是什么？\n\n完成了rails101第三遍练习，并且把额外的作业也完成了，很有成就感。\n\n## Interpretive\n\n### 终于做出了额外的作业\n\n之前的两遍练习，都没有做额外作业，因为心里有点畏难情绪，习惯了照着教程打，尽量不做太多的思考。其实前两遍也确实不应该想太多，不然就会不自觉地开启左脑进行逻辑分析，由于刚开始很多东西都不懂，甚至有很多的代码根本不知道什么意思，遇到不懂的问题，不管三七二十一，先把解法给背下来。这样一来，这些知识在我做第三遍的时候，就会慢慢地产生连接，突然间就懂了很多解法的由来，自然而然地也就能独立完成额外的作业了。\n\n### 相同的功能，不同的写法\n\n在练习的过程中，发现了一些代码，虽然实现的功能是一样的，但是写法却不太一样，比如说，提示信息的写法\n\n![](http://oggx6lf7f.bkt.clouddn.com/22dpr.jpg)\n\n关联表的写法:\n\n![](http://oggx6lf7f.bkt.clouddn.com/0mut7.jpg)\n\n![](http://oggx6lf7f.bkt.clouddn.com/t6tv4.jpg)\n\n\n\n## Decisional\n\n明天完成《初级练习》剩余的部分，并完成加分题。","source":"_posts/2016-12-09-coding-diary.md","raw":"---\ntitle: 【总结】2016/12/09\ncategories: 总结\n---\n\n## Objective\n\n第三遍rails101，6-10节\n\n![](http://oggx6lf7f.bkt.clouddn.com/ktbph.png)\n\n## Reflective\n\n### 今天的高峰是什么？\n\n完成了rails101第三遍练习，并且把额外的作业也完成了，很有成就感。\n\n## Interpretive\n\n### 终于做出了额外的作业\n\n之前的两遍练习，都没有做额外作业，因为心里有点畏难情绪，习惯了照着教程打，尽量不做太多的思考。其实前两遍也确实不应该想太多，不然就会不自觉地开启左脑进行逻辑分析，由于刚开始很多东西都不懂，甚至有很多的代码根本不知道什么意思，遇到不懂的问题，不管三七二十一，先把解法给背下来。这样一来，这些知识在我做第三遍的时候，就会慢慢地产生连接，突然间就懂了很多解法的由来，自然而然地也就能独立完成额外的作业了。\n\n### 相同的功能，不同的写法\n\n在练习的过程中，发现了一些代码，虽然实现的功能是一样的，但是写法却不太一样，比如说，提示信息的写法\n\n![](http://oggx6lf7f.bkt.clouddn.com/22dpr.jpg)\n\n关联表的写法:\n\n![](http://oggx6lf7f.bkt.clouddn.com/0mut7.jpg)\n\n![](http://oggx6lf7f.bkt.clouddn.com/t6tv4.jpg)\n\n\n\n## Decisional\n\n明天完成《初级练习》剩余的部分，并完成加分题。","slug":"2016-12-09-coding-diary","published":1,"date":"2016-12-21T02:29:54.000Z","updated":"2016-12-21T02:30:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxraa0021y3onn45wyral","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>第三遍rails101，6-10节</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ktbph.png\" alt=\"\"></p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><h3 id=\"今天的高峰是什么？\"><a href=\"#今天的高峰是什么？\" class=\"headerlink\" title=\"今天的高峰是什么？\"></a>今天的高峰是什么？</h3><p>完成了rails101第三遍练习，并且把额外的作业也完成了，很有成就感。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"终于做出了额外的作业\"><a href=\"#终于做出了额外的作业\" class=\"headerlink\" title=\"终于做出了额外的作业\"></a>终于做出了额外的作业</h3><p>之前的两遍练习，都没有做额外作业，因为心里有点畏难情绪，习惯了照着教程打，尽量不做太多的思考。其实前两遍也确实不应该想太多，不然就会不自觉地开启左脑进行逻辑分析，由于刚开始很多东西都不懂，甚至有很多的代码根本不知道什么意思，遇到不懂的问题，不管三七二十一，先把解法给背下来。这样一来，这些知识在我做第三遍的时候，就会慢慢地产生连接，突然间就懂了很多解法的由来，自然而然地也就能独立完成额外的作业了。</p>\n<h3 id=\"相同的功能，不同的写法\"><a href=\"#相同的功能，不同的写法\" class=\"headerlink\" title=\"相同的功能，不同的写法\"></a>相同的功能，不同的写法</h3><p>在练习的过程中，发现了一些代码，虽然实现的功能是一样的，但是写法却不太一样，比如说，提示信息的写法</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/22dpr.jpg\" alt=\"\"></p>\n<p>关联表的写法:</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/0mut7.jpg\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/t6tv4.jpg\" alt=\"\"></p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天完成《初级练习》剩余的部分，并完成加分题。</p>\n","excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>第三遍rails101，6-10节</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ktbph.png\" alt=\"\"></p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><h3 id=\"今天的高峰是什么？\"><a href=\"#今天的高峰是什么？\" class=\"headerlink\" title=\"今天的高峰是什么？\"></a>今天的高峰是什么？</h3><p>完成了rails101第三遍练习，并且把额外的作业也完成了，很有成就感。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"终于做出了额外的作业\"><a href=\"#终于做出了额外的作业\" class=\"headerlink\" title=\"终于做出了额外的作业\"></a>终于做出了额外的作业</h3><p>之前的两遍练习，都没有做额外作业，因为心里有点畏难情绪，习惯了照着教程打，尽量不做太多的思考。其实前两遍也确实不应该想太多，不然就会不自觉地开启左脑进行逻辑分析，由于刚开始很多东西都不懂，甚至有很多的代码根本不知道什么意思，遇到不懂的问题，不管三七二十一，先把解法给背下来。这样一来，这些知识在我做第三遍的时候，就会慢慢地产生连接，突然间就懂了很多解法的由来，自然而然地也就能独立完成额外的作业了。</p>\n<h3 id=\"相同的功能，不同的写法\"><a href=\"#相同的功能，不同的写法\" class=\"headerlink\" title=\"相同的功能，不同的写法\"></a>相同的功能，不同的写法</h3><p>在练习的过程中，发现了一些代码，虽然实现的功能是一样的，但是写法却不太一样，比如说，提示信息的写法</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/22dpr.jpg\" alt=\"\"></p>\n<p>关联表的写法:</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/0mut7.jpg\" alt=\"\"></p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/t6tv4.jpg\" alt=\"\"></p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天完成《初级练习》剩余的部分，并完成加分题。</p>\n"},{"title":"【总结】2016/12/10","_content":"\n## Objective\n\n重新做一遍基础练习，并完成加分题。\n\n（倒叙题尝试了很多种方法，最后还是没有做出来 XD）\n\n## Relective\n\n### 高峰是什么？\n\n虽然今天练了一天车，很累，但还是坚持完成了昨天定下的计划。\n\n## Interpretive\n\n### 新建'about'页面\n\n一开始路由是怎么写的\n\n![](http://oggx6lf7f.bkt.clouddn.com/mwdwh.jpg)\n\n但却得到这种结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/f5evc.jpg)\n\n后来看到文档里面原来是怎么写的\n\n![](http://oggx6lf7f.bkt.clouddn.com/sqxax.jpg)\n\n于是就改一下写法\n\n![](http://oggx6lf7f.bkt.clouddn.com/idf0m.jpg)\n\nok\n\n![](http://oggx6lf7f.bkt.clouddn.com/bpry1.jpg)\n\n### 加一个'扣分'按钮\n\n```ruby\ndef downvote\n  @topic = Topic.find(params[:id])\n  @topic.votes.first.destroy\n  redirect_to(topics_path)\nend\n```\n\n## Decisional\n\n明天完成基础练习的加分题，然后再练习一遍rails 101","source":"_posts/2016-12-10-coding-diary.md","raw":"---\ntitle: 【总结】2016/12/10\ncategories: 总结\n---\n\n## Objective\n\n重新做一遍基础练习，并完成加分题。\n\n（倒叙题尝试了很多种方法，最后还是没有做出来 XD）\n\n## Relective\n\n### 高峰是什么？\n\n虽然今天练了一天车，很累，但还是坚持完成了昨天定下的计划。\n\n## Interpretive\n\n### 新建'about'页面\n\n一开始路由是怎么写的\n\n![](http://oggx6lf7f.bkt.clouddn.com/mwdwh.jpg)\n\n但却得到这种结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/f5evc.jpg)\n\n后来看到文档里面原来是怎么写的\n\n![](http://oggx6lf7f.bkt.clouddn.com/sqxax.jpg)\n\n于是就改一下写法\n\n![](http://oggx6lf7f.bkt.clouddn.com/idf0m.jpg)\n\nok\n\n![](http://oggx6lf7f.bkt.clouddn.com/bpry1.jpg)\n\n### 加一个'扣分'按钮\n\n```ruby\ndef downvote\n  @topic = Topic.find(params[:id])\n  @topic.votes.first.destroy\n  redirect_to(topics_path)\nend\n```\n\n## Decisional\n\n明天完成基础练习的加分题，然后再练习一遍rails 101","slug":"2016-12-10-coding-diary","published":1,"date":"2016-12-21T02:34:12.000Z","updated":"2016-12-21T02:34:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxrad0025y3onsphlzxu6","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>重新做一遍基础练习，并完成加分题。</p>\n<p>（倒叙题尝试了很多种方法，最后还是没有做出来 XD）</p>\n<h2 id=\"Relective\"><a href=\"#Relective\" class=\"headerlink\" title=\"Relective\"></a>Relective</h2><h3 id=\"高峰是什么？\"><a href=\"#高峰是什么？\" class=\"headerlink\" title=\"高峰是什么？\"></a>高峰是什么？</h3><p>虽然今天练了一天车，很累，但还是坚持完成了昨天定下的计划。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"新建’about’页面\"><a href=\"#新建’about’页面\" class=\"headerlink\" title=\"新建’about’页面\"></a>新建’about’页面</h3><p>一开始路由是怎么写的</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/mwdwh.jpg\" alt=\"\"></p>\n<p>但却得到这种结果</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/f5evc.jpg\" alt=\"\"></p>\n<p>后来看到文档里面原来是怎么写的</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/sqxax.jpg\" alt=\"\"></p>\n<p>于是就改一下写法</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/idf0m.jpg\" alt=\"\"></p>\n<p>ok</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bpry1.jpg\" alt=\"\"></p>\n<h3 id=\"加一个’扣分’按钮\"><a href=\"#加一个’扣分’按钮\" class=\"headerlink\" title=\"加一个’扣分’按钮\"></a>加一个’扣分’按钮</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">downvote</span></span></span><br><span class=\"line\">  @topic = Topic.find(params[<span class=\"symbol\">:id</span>])</span><br><span class=\"line\">  @topic.votes.first.destroy</span><br><span class=\"line\">  redirect_to(topics_path)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天完成基础练习的加分题，然后再练习一遍rails 101</p>\n","excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>重新做一遍基础练习，并完成加分题。</p>\n<p>（倒叙题尝试了很多种方法，最后还是没有做出来 XD）</p>\n<h2 id=\"Relective\"><a href=\"#Relective\" class=\"headerlink\" title=\"Relective\"></a>Relective</h2><h3 id=\"高峰是什么？\"><a href=\"#高峰是什么？\" class=\"headerlink\" title=\"高峰是什么？\"></a>高峰是什么？</h3><p>虽然今天练了一天车，很累，但还是坚持完成了昨天定下的计划。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"新建’about’页面\"><a href=\"#新建’about’页面\" class=\"headerlink\" title=\"新建’about’页面\"></a>新建’about’页面</h3><p>一开始路由是怎么写的</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/mwdwh.jpg\" alt=\"\"></p>\n<p>但却得到这种结果</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/f5evc.jpg\" alt=\"\"></p>\n<p>后来看到文档里面原来是怎么写的</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/sqxax.jpg\" alt=\"\"></p>\n<p>于是就改一下写法</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/idf0m.jpg\" alt=\"\"></p>\n<p>ok</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bpry1.jpg\" alt=\"\"></p>\n<h3 id=\"加一个’扣分’按钮\"><a href=\"#加一个’扣分’按钮\" class=\"headerlink\" title=\"加一个’扣分’按钮\"></a>加一个’扣分’按钮</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">downvote</span></span></span><br><span class=\"line\">  @topic = Topic.find(params[<span class=\"symbol\">:id</span>])</span><br><span class=\"line\">  @topic.votes.first.destroy</span><br><span class=\"line\">  redirect_to(topics_path)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>明天完成基础练习的加分题，然后再练习一遍rails 101</p>\n"},{"title":"【总结】2016/12/11","_content":"\n## Objective\n\n完成第4遍rails 101的第1-5节。\n\n## Reflective\n\n情绪非常一般，学习rails并没有特别大的收获。\n\n## Interpretive\n\n### 不断地练习做rails 101\n\n今天决定开始做第四遍rails 101，因为目前的教程只有3个，所以没有太多的选择，就好好练吧。\n\n### 肌肉记忆与刻意练习\n\n在编程时，要先把高频小套路背下来，重复地练习，知道形成肌肉记忆。今天，我把这个方法论迁移到学车上面，在听完教练的讲解之后，先把重要的操作都背下来，不断地在脑中重复，然后开始一遍一遍地实操，于是，很快就上手了，学科目三用了1.5天就能在车流量很大的路段正常地驾驶了，非常有成就感。\n\n## Decisional\n\n今天遇到了几个bug，还没完全解决，明天将错误整理写成文章。","source":"_posts/2016-12-11-coding-diary.md","raw":"---\ntitle: 【总结】2016/12/11\ncategories: 总结\n---\n\n## Objective\n\n完成第4遍rails 101的第1-5节。\n\n## Reflective\n\n情绪非常一般，学习rails并没有特别大的收获。\n\n## Interpretive\n\n### 不断地练习做rails 101\n\n今天决定开始做第四遍rails 101，因为目前的教程只有3个，所以没有太多的选择，就好好练吧。\n\n### 肌肉记忆与刻意练习\n\n在编程时，要先把高频小套路背下来，重复地练习，知道形成肌肉记忆。今天，我把这个方法论迁移到学车上面，在听完教练的讲解之后，先把重要的操作都背下来，不断地在脑中重复，然后开始一遍一遍地实操，于是，很快就上手了，学科目三用了1.5天就能在车流量很大的路段正常地驾驶了，非常有成就感。\n\n## Decisional\n\n今天遇到了几个bug，还没完全解决，明天将错误整理写成文章。","slug":"2016-12-11-coding-diary","published":1,"date":"2016-12-21T02:34:52.000Z","updated":"2016-12-21T02:35:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxrae0029y3on4y5srucy","content":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>完成第4遍rails 101的第1-5节。</p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>情绪非常一般，学习rails并没有特别大的收获。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"不断地练习做rails-101\"><a href=\"#不断地练习做rails-101\" class=\"headerlink\" title=\"不断地练习做rails 101\"></a>不断地练习做rails 101</h3><p>今天决定开始做第四遍rails 101，因为目前的教程只有3个，所以没有太多的选择，就好好练吧。</p>\n<h3 id=\"肌肉记忆与刻意练习\"><a href=\"#肌肉记忆与刻意练习\" class=\"headerlink\" title=\"肌肉记忆与刻意练习\"></a>肌肉记忆与刻意练习</h3><p>在编程时，要先把高频小套路背下来，重复地练习，知道形成肌肉记忆。今天，我把这个方法论迁移到学车上面，在听完教练的讲解之后，先把重要的操作都背下来，不断地在脑中重复，然后开始一遍一遍地实操，于是，很快就上手了，学科目三用了1.5天就能在车流量很大的路段正常地驾驶了，非常有成就感。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>今天遇到了几个bug，还没完全解决，明天将错误整理写成文章。</p>\n","excerpt":"","more":"<h2 id=\"Objective\"><a href=\"#Objective\" class=\"headerlink\" title=\"Objective\"></a>Objective</h2><p>完成第4遍rails 101的第1-5节。</p>\n<h2 id=\"Reflective\"><a href=\"#Reflective\" class=\"headerlink\" title=\"Reflective\"></a>Reflective</h2><p>情绪非常一般，学习rails并没有特别大的收获。</p>\n<h2 id=\"Interpretive\"><a href=\"#Interpretive\" class=\"headerlink\" title=\"Interpretive\"></a>Interpretive</h2><h3 id=\"不断地练习做rails-101\"><a href=\"#不断地练习做rails-101\" class=\"headerlink\" title=\"不断地练习做rails 101\"></a>不断地练习做rails 101</h3><p>今天决定开始做第四遍rails 101，因为目前的教程只有3个，所以没有太多的选择，就好好练吧。</p>\n<h3 id=\"肌肉记忆与刻意练习\"><a href=\"#肌肉记忆与刻意练习\" class=\"headerlink\" title=\"肌肉记忆与刻意练习\"></a>肌肉记忆与刻意练习</h3><p>在编程时，要先把高频小套路背下来，重复地练习，知道形成肌肉记忆。今天，我把这个方法论迁移到学车上面，在听完教练的讲解之后，先把重要的操作都背下来，不断地在脑中重复，然后开始一遍一遍地实操，于是，很快就上手了，学科目三用了1.5天就能在车流量很大的路段正常地驾驶了，非常有成就感。</p>\n<h2 id=\"Decisional\"><a href=\"#Decisional\" class=\"headerlink\" title=\"Decisional\"></a>Decisional</h2><p>今天遇到了几个bug，还没完全解决，明天将错误整理写成文章。</p>\n"},{"title":"见过很多遍却没有用过的display：table布局","_content":"\n> - table: 指定了元素定义了一个块级表格\n> - table-cell: 指定了元素代表一个表格单元\n\n这个方法和float相比的好处是不需要清除浮动。\n\n<iframe height='278' scrolling='no' title='RovZwj' src='//codepen.io/raimonfuns/embed/RovZwj/?height=278&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/raimonfuns/pen/RovZwj/'>RovZwj</a> by raimonfuns (<a href='http://codepen.io/raimonfuns'>@raimonfuns</a>) on <a href='http://codepen.io'>CodePen</a>.\n</iframe>","source":"_posts/2016-12-19-display-table.md","raw":"---\ntitle: 见过很多遍却没有用过的display：table布局\ncategories: css\n---\n\n> - table: 指定了元素定义了一个块级表格\n> - table-cell: 指定了元素代表一个表格单元\n\n这个方法和float相比的好处是不需要清除浮动。\n\n<iframe height='278' scrolling='no' title='RovZwj' src='//codepen.io/raimonfuns/embed/RovZwj/?height=278&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/raimonfuns/pen/RovZwj/'>RovZwj</a> by raimonfuns (<a href='http://codepen.io/raimonfuns'>@raimonfuns</a>) on <a href='http://codepen.io'>CodePen</a>.\n</iframe>","slug":"2016-12-19-display-table","published":1,"date":"2016-12-19T09:52:42.000Z","updated":"2016-12-19T10:09:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxraj002dy3on4hztlkcw","content":"<blockquote>\n<ul>\n<li>table: 指定了元素定义了一个块级表格</li>\n<li>table-cell: 指定了元素代表一个表格单元</li>\n</ul>\n</blockquote>\n<p>这个方法和float相比的好处是不需要清除浮动。</p>\n<iframe height=\"278\" scrolling=\"no\" title=\"RovZwj\" src=\"//codepen.io/raimonfuns/embed/RovZwj/?height=278&theme-id=0&default-tab=html,result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"http://codepen.io/raimonfuns/pen/RovZwj/\" target=\"_blank\" rel=\"external\">RovZwj</a> by raimonfuns (<a href=\"http://codepen.io/raimonfuns\" target=\"_blank\" rel=\"external\">@raimonfuns</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.<br></iframe>","excerpt":"","more":"<blockquote>\n<ul>\n<li>table: 指定了元素定义了一个块级表格</li>\n<li>table-cell: 指定了元素代表一个表格单元</li>\n</ul>\n</blockquote>\n<p>这个方法和float相比的好处是不需要清除浮动。</p>\n<iframe height='278' scrolling='no' title='RovZwj' src='//codepen.io/raimonfuns/embed/RovZwj/?height=278&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/raimonfuns/pen/RovZwj/'>RovZwj</a> by raimonfuns (<a href='http://codepen.io/raimonfuns'>@raimonfuns</a>) on <a href='http://codepen.io'>CodePen</a>.<br></iframe>"},{"title":"单元测试之常用的ES6语法","_content":"\n之前粗略的看过[ECMAScript 6入门](http://es6.ruanyifeng.com/)教程，对于ES6的语法有了大概的了解，比如箭头函数，let和const声明，设置函数参数的默认值等等，一直没有系统地学习，今天抽空阅读一遍[es6-cheatsheet](https://github.com/DrkSephy/es6-cheatsheet)，针对常用的语法写了单元测试，以加强对ES6语法的理解，下面是测试代码和测试结果。\n\n## 测试代码\n\n``` Javascript\n'use strict'\n\nvar chai = require('chai');\nchai.should()\n\ndescribe('var versus let / const', function () {\n  it('let statements are not hoisted to the top of their enclosing scope', function () {\n    let snack = 'Meow Mix';\n\n    function getFood(food){\n      if (food) {\n        let snack = 'Friskies';\n        return snack;\n      }\n      return snack;\n    }\n\n    getFood(false).should.be.equal('Meow Mix');\n  });\n});\n\ndescribe('Replacing IIFEs with Blocks', function () {\n  it('create block-based scopes', function () {\n    let food = 'noodle';\n    {\n      let food = 'Meow Mix';\n    }\n    food.should.be.equal('noodle');\n  });\n});\n\ndescribe('Arrow Functions', function () {\n  it('preserve the lexical value of this', function () {\n    function Person(name) {\n      this.name = name;\n    }\n\n    Person.prototype.prefixName = function (arr) {\n      return arr.map(character => this.name + character);\n    }\n\n    var person = new Person();\n    person.name = 'prefix-';\n    var resultArr = person.prefixName(['raimon', 'raimonfuns']);\n\n    resultArr.length.should.be.equal(2);\n    resultArr[0].should.be.equal('prefix-raimon');\n  });\n\n  describe('Strings', function () {\n    it('.includes()', function () {\n      const string = 'food';\n      const substring = 'foo';\n\n      string.includes(substring).should.be.equal(true);\n    });\n\n    it('.repeat()', function () {\n      'raimon'.repeat(3).should.be.equal('raimonraimonraimon');\n    });\n  });\n\n  describe('Template Literals', function () {\n    it('do not need to be escaped anymore', function () {\n      let test = `This string contains \"double quotes\" which don't need to be escaped anymore.`;\n\n      test.should.be.equal(\"This string contains \\\"double quotes\\\" which don't need to be escaped anymore.\");\n    });\n\n    it('interpolation', function () {\n      const name = 'raimon';\n      const age = 24;\n\n      let test = `My cat is named ${name} and is ${age} years old.`;\n      test.should.be.equal('My cat is named raimon and is 24 years old.');\n    });\n\n    it('expressions', function () {\n      let string = 'nba';\n      let test = `${string.toUpperCase()}, where amazing happens`;\n\n      test.should.be.equal('NBA, where amazing happens');\n    });\n  });\n\n  describe('Destructuring', function () {\n    it('Destructuring Arrays', function () {\n      let [a, b] = [1, 2];\n\n      a.should.be.equal(1);\n      b.should.be.equal(2);\n    });\n\n    it('Destructuring Objects', function () {\n      let luke = {occupation: 'jeki', father: 'anakin'};\n      let {occupation, father} = luke;\n\n      occupation.should.be.equal('jeki');\n      father.should.be.equal('anakin');\n    });\n  });\n\n  describe('Parameters', function () {\n    it('Default Parameters', function () {\n      function addTwoNumbers(x=0, y=0) {\n        return x + y;\n      }\n\n      addTwoNumbers(2, 4).should.be.equal(6);\n      addTwoNumbers(2).should.be.equal(2);\n      addTwoNumbers().should.be.equal(0);\n    });\n\n    it('Rest Parameters', function () {\n      function joinArguments(...args) {\n        return args.join('');\n      }\n\n      joinArguments('a', 'b').should.be.equal('ab');\n    });\n\n    it('Named Parameters', function () {\n      function initializeCanvas({ height=600, width=400, lineStroke='black' }) {\n        return 'height:' + height + ';' + 'width:' + width + ';' + 'lineStroke:' + lineStroke;\n      }\n\n      initializeCanvas({height: 100, width: 100, lineStroke: 'black'}).should.be.equal('height:100;width:100;lineStroke:black');\n      initializeCanvas({height: 100, lineStroke: 'black'}).should.be.equal('height:100;width:400;lineStroke:black');\n    });\n  });\n\n  describe('Spread Operator', function () {\n    it('pass an array of values to be used as parameters to a function', function () {\n      Math.max(...[1, 100, 9001, -32]).should.be.equal(9001);\n    });\n\n    it('concat array literals', function () {\n      let cities = ['San Francisco', 'Los Angeles'];\n      let places = ['Miami', ...cities, 'Chicago'];\n\n      places.length.should.be.equal(4);\n      places[1].should.be.equal('San Francisco');\n    });\n  });\n\n  describe('Maps', function () {\n    it('set, get, search', function () {\n      let map = new Map();\n      map.set('name', 'david');\n\n      map.get('name').should.be.equal('david');\n      map.has('name').should.be.equal(true);\n    });\n\n    it('use any type as a key', function () {\n      var typeStr = '';\n      let map = new Map([\n        ['name', 'david'],\n        [true, 'false'],\n        [1, 'one'],\n        [{}, 'object'],\n        [function () {}, 'function']\n      ]);\n\n      for (let key of map.keys()) {\n        typeStr += typeof key + '|';\n      }\n\n      typeStr.should.be.equal('string|boolean|number|object|function|');\n    });\n\n    it('.entries()', function () {\n      var resultStr = '';\n      let map = new Map([\n        ['name', 'david'],\n        ['age', '24']\n      ]);\n\n      for (let [key, value] of map.entries()) {\n        resultStr += key + ': ' + value + '|';\n      }\n\n      resultStr.should.be.equal('name: david|age: 24|');\n    });\n  });\n});\n\n```\n\n## 测试结果\n![unit test result](http://chuantu.biz/t5/14/1467467341x2918528194.png)\n","source":"_posts/2016-12-19-es6-unit-test.md","raw":"---\ntitle: 单元测试之常用的ES6语法\ncategories: Javascript\ntags: [es6, 单元测试]\n---\n\n之前粗略的看过[ECMAScript 6入门](http://es6.ruanyifeng.com/)教程，对于ES6的语法有了大概的了解，比如箭头函数，let和const声明，设置函数参数的默认值等等，一直没有系统地学习，今天抽空阅读一遍[es6-cheatsheet](https://github.com/DrkSephy/es6-cheatsheet)，针对常用的语法写了单元测试，以加强对ES6语法的理解，下面是测试代码和测试结果。\n\n## 测试代码\n\n``` Javascript\n'use strict'\n\nvar chai = require('chai');\nchai.should()\n\ndescribe('var versus let / const', function () {\n  it('let statements are not hoisted to the top of their enclosing scope', function () {\n    let snack = 'Meow Mix';\n\n    function getFood(food){\n      if (food) {\n        let snack = 'Friskies';\n        return snack;\n      }\n      return snack;\n    }\n\n    getFood(false).should.be.equal('Meow Mix');\n  });\n});\n\ndescribe('Replacing IIFEs with Blocks', function () {\n  it('create block-based scopes', function () {\n    let food = 'noodle';\n    {\n      let food = 'Meow Mix';\n    }\n    food.should.be.equal('noodle');\n  });\n});\n\ndescribe('Arrow Functions', function () {\n  it('preserve the lexical value of this', function () {\n    function Person(name) {\n      this.name = name;\n    }\n\n    Person.prototype.prefixName = function (arr) {\n      return arr.map(character => this.name + character);\n    }\n\n    var person = new Person();\n    person.name = 'prefix-';\n    var resultArr = person.prefixName(['raimon', 'raimonfuns']);\n\n    resultArr.length.should.be.equal(2);\n    resultArr[0].should.be.equal('prefix-raimon');\n  });\n\n  describe('Strings', function () {\n    it('.includes()', function () {\n      const string = 'food';\n      const substring = 'foo';\n\n      string.includes(substring).should.be.equal(true);\n    });\n\n    it('.repeat()', function () {\n      'raimon'.repeat(3).should.be.equal('raimonraimonraimon');\n    });\n  });\n\n  describe('Template Literals', function () {\n    it('do not need to be escaped anymore', function () {\n      let test = `This string contains \"double quotes\" which don't need to be escaped anymore.`;\n\n      test.should.be.equal(\"This string contains \\\"double quotes\\\" which don't need to be escaped anymore.\");\n    });\n\n    it('interpolation', function () {\n      const name = 'raimon';\n      const age = 24;\n\n      let test = `My cat is named ${name} and is ${age} years old.`;\n      test.should.be.equal('My cat is named raimon and is 24 years old.');\n    });\n\n    it('expressions', function () {\n      let string = 'nba';\n      let test = `${string.toUpperCase()}, where amazing happens`;\n\n      test.should.be.equal('NBA, where amazing happens');\n    });\n  });\n\n  describe('Destructuring', function () {\n    it('Destructuring Arrays', function () {\n      let [a, b] = [1, 2];\n\n      a.should.be.equal(1);\n      b.should.be.equal(2);\n    });\n\n    it('Destructuring Objects', function () {\n      let luke = {occupation: 'jeki', father: 'anakin'};\n      let {occupation, father} = luke;\n\n      occupation.should.be.equal('jeki');\n      father.should.be.equal('anakin');\n    });\n  });\n\n  describe('Parameters', function () {\n    it('Default Parameters', function () {\n      function addTwoNumbers(x=0, y=0) {\n        return x + y;\n      }\n\n      addTwoNumbers(2, 4).should.be.equal(6);\n      addTwoNumbers(2).should.be.equal(2);\n      addTwoNumbers().should.be.equal(0);\n    });\n\n    it('Rest Parameters', function () {\n      function joinArguments(...args) {\n        return args.join('');\n      }\n\n      joinArguments('a', 'b').should.be.equal('ab');\n    });\n\n    it('Named Parameters', function () {\n      function initializeCanvas({ height=600, width=400, lineStroke='black' }) {\n        return 'height:' + height + ';' + 'width:' + width + ';' + 'lineStroke:' + lineStroke;\n      }\n\n      initializeCanvas({height: 100, width: 100, lineStroke: 'black'}).should.be.equal('height:100;width:100;lineStroke:black');\n      initializeCanvas({height: 100, lineStroke: 'black'}).should.be.equal('height:100;width:400;lineStroke:black');\n    });\n  });\n\n  describe('Spread Operator', function () {\n    it('pass an array of values to be used as parameters to a function', function () {\n      Math.max(...[1, 100, 9001, -32]).should.be.equal(9001);\n    });\n\n    it('concat array literals', function () {\n      let cities = ['San Francisco', 'Los Angeles'];\n      let places = ['Miami', ...cities, 'Chicago'];\n\n      places.length.should.be.equal(4);\n      places[1].should.be.equal('San Francisco');\n    });\n  });\n\n  describe('Maps', function () {\n    it('set, get, search', function () {\n      let map = new Map();\n      map.set('name', 'david');\n\n      map.get('name').should.be.equal('david');\n      map.has('name').should.be.equal(true);\n    });\n\n    it('use any type as a key', function () {\n      var typeStr = '';\n      let map = new Map([\n        ['name', 'david'],\n        [true, 'false'],\n        [1, 'one'],\n        [{}, 'object'],\n        [function () {}, 'function']\n      ]);\n\n      for (let key of map.keys()) {\n        typeStr += typeof key + '|';\n      }\n\n      typeStr.should.be.equal('string|boolean|number|object|function|');\n    });\n\n    it('.entries()', function () {\n      var resultStr = '';\n      let map = new Map([\n        ['name', 'david'],\n        ['age', '24']\n      ]);\n\n      for (let [key, value] of map.entries()) {\n        resultStr += key + ': ' + value + '|';\n      }\n\n      resultStr.should.be.equal('name: david|age: 24|');\n    });\n  });\n});\n\n```\n\n## 测试结果\n![unit test result](http://chuantu.biz/t5/14/1467467341x2918528194.png)\n","slug":"2016-12-19-es6-unit-test","published":1,"date":"2016-07-02T13:57:22.000Z","updated":"2016-08-07T08:55:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxram002hy3onogqtxsir","content":"<p>之前粗略的看过<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ECMAScript 6入门</a>教程，对于ES6的语法有了大概的了解，比如箭头函数，let和const声明，设置函数参数的默认值等等，一直没有系统地学习，今天抽空阅读一遍<a href=\"https://github.com/DrkSephy/es6-cheatsheet\" target=\"_blank\" rel=\"external\">es6-cheatsheet</a>，针对常用的语法写了单元测试，以加强对ES6语法的理解，下面是测试代码和测试结果。</p>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> chai = <span class=\"built_in\">require</span>(<span class=\"string\">'chai'</span>);</span><br><span class=\"line\">chai.should()</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'var versus let / const'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'let statements are not hoisted to the top of their enclosing scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> snack = <span class=\"string\">'Meow Mix'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFood</span>(<span class=\"params\">food</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (food) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> snack = <span class=\"string\">'Friskies'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> snack;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> snack;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getFood(<span class=\"literal\">false</span>).should.be.equal(<span class=\"string\">'Meow Mix'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Replacing IIFEs with Blocks'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'create block-based scopes'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> food = <span class=\"string\">'noodle'</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> food = <span class=\"string\">'Meow Mix'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    food.should.be.equal(<span class=\"string\">'noodle'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Arrow Functions'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'preserve the lexical value of this'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person.prototype.prefixName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arr.map(character =&gt; <span class=\"keyword\">this</span>.name + character);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    person.name = <span class=\"string\">'prefix-'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resultArr = person.prefixName([<span class=\"string\">'raimon'</span>, <span class=\"string\">'raimonfuns'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    resultArr.length.should.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">    resultArr[<span class=\"number\">0</span>].should.be.equal(<span class=\"string\">'prefix-raimon'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Strings'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'.includes()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> string = <span class=\"string\">'food'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> substring = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      string.includes(substring).should.be.equal(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'.repeat()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"string\">'raimon'</span>.repeat(<span class=\"number\">3</span>).should.be.equal(<span class=\"string\">'raimonraimonraimon'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Template Literals'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'do not need to be escaped anymore'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> test = <span class=\"string\">`This string contains \"double quotes\" which don't need to be escaped anymore.`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      test.should.be.equal(<span class=\"string\">\"This string contains \\\"double quotes\\\" which don't need to be escaped anymore.\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'interpolation'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> name = <span class=\"string\">'raimon'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> age = <span class=\"number\">24</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> test = <span class=\"string\">`My cat is named <span class=\"subst\">$&#123;name&#125;</span> and is <span class=\"subst\">$&#123;age&#125;</span> years old.`</span>;</span><br><span class=\"line\">      test.should.be.equal(<span class=\"string\">'My cat is named raimon and is 24 years old.'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'expressions'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> string = <span class=\"string\">'nba'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> test = <span class=\"string\">`<span class=\"subst\">$&#123;string.toUpperCase()&#125;</span>, where amazing happens`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      test.should.be.equal(<span class=\"string\">'NBA, where amazing happens'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Destructuring'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'Destructuring Arrays'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> [a, b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      a.should.be.equal(<span class=\"number\">1</span>);</span><br><span class=\"line\">      b.should.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'Destructuring Objects'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> luke = &#123;occupation: <span class=\"string\">'jeki'</span>, father: <span class=\"string\">'anakin'</span>&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123;occupation, father&#125; = luke;</span><br><span class=\"line\"></span><br><span class=\"line\">      occupation.should.be.equal(<span class=\"string\">'jeki'</span>);</span><br><span class=\"line\">      father.should.be.equal(<span class=\"string\">'anakin'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'Default Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTwoNumbers</span>(<span class=\"params\">x=0, y=0</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      addTwoNumbers(<span class=\"number\">2</span>, <span class=\"number\">4</span>).should.be.equal(<span class=\"number\">6</span>);</span><br><span class=\"line\">      addTwoNumbers(<span class=\"number\">2</span>).should.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">      addTwoNumbers().should.be.equal(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'Rest Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">joinArguments</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> args.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      joinArguments(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>).should.be.equal(<span class=\"string\">'ab'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'Named Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializeCanvas</span>(<span class=\"params\">&#123; height=600, width=400, lineStroke='black' &#125;</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'height:'</span> + height + <span class=\"string\">';'</span> + <span class=\"string\">'width:'</span> + width + <span class=\"string\">';'</span> + <span class=\"string\">'lineStroke:'</span> + lineStroke;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      initializeCanvas(&#123;height: <span class=\"number\">100</span>, width: <span class=\"number\">100</span>, lineStroke: <span class=\"string\">'black'</span>&#125;).should.be.equal(<span class=\"string\">'height:100;width:100;lineStroke:black'</span>);</span><br><span class=\"line\">      initializeCanvas(&#123;height: <span class=\"number\">100</span>, lineStroke: <span class=\"string\">'black'</span>&#125;).should.be.equal(<span class=\"string\">'height:100;width:400;lineStroke:black'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Spread Operator'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'pass an array of values to be used as parameters to a function'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.max(...[<span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">9001</span>, <span class=\"number\">-32</span>]).should.be.equal(<span class=\"number\">9001</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'concat array literals'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cities = [<span class=\"string\">'San Francisco'</span>, <span class=\"string\">'Los Angeles'</span>];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> places = [<span class=\"string\">'Miami'</span>, ...cities, <span class=\"string\">'Chicago'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      places.length.should.be.equal(<span class=\"number\">4</span>);</span><br><span class=\"line\">      places[<span class=\"number\">1</span>].should.be.equal(<span class=\"string\">'San Francisco'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Maps'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'set, get, search'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">      map.set(<span class=\"string\">'name'</span>, <span class=\"string\">'david'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      map.get(<span class=\"string\">'name'</span>).should.be.equal(<span class=\"string\">'david'</span>);</span><br><span class=\"line\">      map.has(<span class=\"string\">'name'</span>).should.be.equal(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'use any type as a key'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> typeStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">        [<span class=\"string\">'name'</span>, <span class=\"string\">'david'</span>],</span><br><span class=\"line\">        [<span class=\"literal\">true</span>, <span class=\"string\">'false'</span>],</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">        [&#123;&#125;, <span class=\"string\">'object'</span>],</span><br><span class=\"line\">        [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;, <span class=\"string\">'function'</span>]</span><br><span class=\"line\">      ]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> map.keys()) &#123;</span><br><span class=\"line\">        typeStr += <span class=\"keyword\">typeof</span> key + <span class=\"string\">'|'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      typeStr.should.be.equal(<span class=\"string\">'string|boolean|number|object|function|'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'.entries()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> resultStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">        [<span class=\"string\">'name'</span>, <span class=\"string\">'david'</span>],</span><br><span class=\"line\">        [<span class=\"string\">'age'</span>, <span class=\"string\">'24'</span>]</span><br><span class=\"line\">      ]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map.entries()) &#123;</span><br><span class=\"line\">        resultStr += key + <span class=\"string\">': '</span> + value + <span class=\"string\">'|'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      resultStr.should.be.equal(<span class=\"string\">'name: david|age: 24|'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h2><p><img src=\"http://chuantu.biz/t5/14/1467467341x2918528194.png\" alt=\"unit test result\"></p>\n","excerpt":"","more":"<p>之前粗略的看过<a href=\"http://es6.ruanyifeng.com/\">ECMAScript 6入门</a>教程，对于ES6的语法有了大概的了解，比如箭头函数，let和const声明，设置函数参数的默认值等等，一直没有系统地学习，今天抽空阅读一遍<a href=\"https://github.com/DrkSephy/es6-cheatsheet\">es6-cheatsheet</a>，针对常用的语法写了单元测试，以加强对ES6语法的理解，下面是测试代码和测试结果。</p>\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> chai = <span class=\"built_in\">require</span>(<span class=\"string\">'chai'</span>);</span><br><span class=\"line\">chai.should()</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'var versus let / const'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'let statements are not hoisted to the top of their enclosing scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> snack = <span class=\"string\">'Meow Mix'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFood</span>(<span class=\"params\">food</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (food) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> snack = <span class=\"string\">'Friskies'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> snack;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> snack;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getFood(<span class=\"literal\">false</span>).should.be.equal(<span class=\"string\">'Meow Mix'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Replacing IIFEs with Blocks'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'create block-based scopes'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> food = <span class=\"string\">'noodle'</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> food = <span class=\"string\">'Meow Mix'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    food.should.be.equal(<span class=\"string\">'noodle'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Arrow Functions'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'preserve the lexical value of this'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person.prototype.prefixName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arr.map(character =&gt; <span class=\"keyword\">this</span>.name + character);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    person.name = <span class=\"string\">'prefix-'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resultArr = person.prefixName([<span class=\"string\">'raimon'</span>, <span class=\"string\">'raimonfuns'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    resultArr.length.should.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">    resultArr[<span class=\"number\">0</span>].should.be.equal(<span class=\"string\">'prefix-raimon'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Strings'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'.includes()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> string = <span class=\"string\">'food'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> substring = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      string.includes(substring).should.be.equal(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'.repeat()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"string\">'raimon'</span>.repeat(<span class=\"number\">3</span>).should.be.equal(<span class=\"string\">'raimonraimonraimon'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Template Literals'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'do not need to be escaped anymore'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> test = <span class=\"string\">`This string contains \"double quotes\" which don't need to be escaped anymore.`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      test.should.be.equal(<span class=\"string\">\"This string contains \\\"double quotes\\\" which don't need to be escaped anymore.\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'interpolation'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> name = <span class=\"string\">'raimon'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> age = <span class=\"number\">24</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> test = <span class=\"string\">`My cat is named <span class=\"subst\">$&#123;name&#125;</span> and is <span class=\"subst\">$&#123;age&#125;</span> years old.`</span>;</span><br><span class=\"line\">      test.should.be.equal(<span class=\"string\">'My cat is named raimon and is 24 years old.'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'expressions'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> string = <span class=\"string\">'nba'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> test = <span class=\"string\">`<span class=\"subst\">$&#123;string.toUpperCase()&#125;</span>, where amazing happens`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      test.should.be.equal(<span class=\"string\">'NBA, where amazing happens'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Destructuring'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'Destructuring Arrays'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> [a, b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      a.should.be.equal(<span class=\"number\">1</span>);</span><br><span class=\"line\">      b.should.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'Destructuring Objects'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> luke = &#123;occupation: <span class=\"string\">'jeki'</span>, father: <span class=\"string\">'anakin'</span>&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123;occupation, father&#125; = luke;</span><br><span class=\"line\"></span><br><span class=\"line\">      occupation.should.be.equal(<span class=\"string\">'jeki'</span>);</span><br><span class=\"line\">      father.should.be.equal(<span class=\"string\">'anakin'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'Default Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTwoNumbers</span>(<span class=\"params\">x=0, y=0</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      addTwoNumbers(<span class=\"number\">2</span>, <span class=\"number\">4</span>).should.be.equal(<span class=\"number\">6</span>);</span><br><span class=\"line\">      addTwoNumbers(<span class=\"number\">2</span>).should.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">      addTwoNumbers().should.be.equal(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'Rest Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">joinArguments</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> args.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      joinArguments(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>).should.be.equal(<span class=\"string\">'ab'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'Named Parameters'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initializeCanvas</span>(<span class=\"params\">&#123; height=600, width=400, lineStroke='black' &#125;</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'height:'</span> + height + <span class=\"string\">';'</span> + <span class=\"string\">'width:'</span> + width + <span class=\"string\">';'</span> + <span class=\"string\">'lineStroke:'</span> + lineStroke;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      initializeCanvas(&#123;height: <span class=\"number\">100</span>, width: <span class=\"number\">100</span>, lineStroke: <span class=\"string\">'black'</span>&#125;).should.be.equal(<span class=\"string\">'height:100;width:100;lineStroke:black'</span>);</span><br><span class=\"line\">      initializeCanvas(&#123;height: <span class=\"number\">100</span>, lineStroke: <span class=\"string\">'black'</span>&#125;).should.be.equal(<span class=\"string\">'height:100;width:400;lineStroke:black'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Spread Operator'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'pass an array of values to be used as parameters to a function'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.max(...[<span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">9001</span>, <span class=\"number\">-32</span>]).should.be.equal(<span class=\"number\">9001</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'concat array literals'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cities = [<span class=\"string\">'San Francisco'</span>, <span class=\"string\">'Los Angeles'</span>];</span><br><span class=\"line\">      <span class=\"keyword\">let</span> places = [<span class=\"string\">'Miami'</span>, ...cities, <span class=\"string\">'Chicago'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      places.length.should.be.equal(<span class=\"number\">4</span>);</span><br><span class=\"line\">      places[<span class=\"number\">1</span>].should.be.equal(<span class=\"string\">'San Francisco'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'Maps'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'set, get, search'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">      map.set(<span class=\"string\">'name'</span>, <span class=\"string\">'david'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      map.get(<span class=\"string\">'name'</span>).should.be.equal(<span class=\"string\">'david'</span>);</span><br><span class=\"line\">      map.has(<span class=\"string\">'name'</span>).should.be.equal(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'use any type as a key'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> typeStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">        [<span class=\"string\">'name'</span>, <span class=\"string\">'david'</span>],</span><br><span class=\"line\">        [<span class=\"literal\">true</span>, <span class=\"string\">'false'</span>],</span><br><span class=\"line\">        [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">        [&#123;&#125;, <span class=\"string\">'object'</span>],</span><br><span class=\"line\">        [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;, <span class=\"string\">'function'</span>]</span><br><span class=\"line\">      ]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> map.keys()) &#123;</span><br><span class=\"line\">        typeStr += <span class=\"keyword\">typeof</span> key + <span class=\"string\">'|'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      typeStr.should.be.equal(<span class=\"string\">'string|boolean|number|object|function|'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'.entries()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> resultStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">        [<span class=\"string\">'name'</span>, <span class=\"string\">'david'</span>],</span><br><span class=\"line\">        [<span class=\"string\">'age'</span>, <span class=\"string\">'24'</span>]</span><br><span class=\"line\">      ]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map.entries()) &#123;</span><br><span class=\"line\">        resultStr += key + <span class=\"string\">': '</span> + value + <span class=\"string\">'|'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      resultStr.should.be.equal(<span class=\"string\">'name: david|age: 24|'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h2><p><img src=\"http://chuantu.biz/t5/14/1467467341x2918528194.png\" alt=\"unit test result\"></p>\n"},{"title":"【项目】文章分享平台","_content":"\n在平时的工作中，主要是通过群聊天来分析文章，随着聊天记录越来越多，分享文章的链接如果没有保存，那就基本上被刷掉了，要找回之前的链接就得去翻聊天记录，非常麻烦。那么，怎么解决这个问题，让有用的文章沉淀下来呢？\n\n> 做一个文章分享平台。\n\n这就是做这个平台的初衷。\n\n让组内的成员把平时看过的好文章，分享到平台上，并且写上自己的笔记或者是评价，这对于其他同事来说可能是一件有帮助的事情，对于新人来说更是如此。只有把知识流动起来，才能实现最大程度的共同成长。\n\n主要的技术栈：\n\n>  koa2 + mongodb + vue + elementUI\n\n项目地址：[文章分享平台](https://polar-journey-84008.herokuapp.com/)\n\n","source":"_posts/2016-12-19-share.md","raw":"---\ntitle: 【项目】文章分享平台\ncategories: 项目\n---\n\n在平时的工作中，主要是通过群聊天来分析文章，随着聊天记录越来越多，分享文章的链接如果没有保存，那就基本上被刷掉了，要找回之前的链接就得去翻聊天记录，非常麻烦。那么，怎么解决这个问题，让有用的文章沉淀下来呢？\n\n> 做一个文章分享平台。\n\n这就是做这个平台的初衷。\n\n让组内的成员把平时看过的好文章，分享到平台上，并且写上自己的笔记或者是评价，这对于其他同事来说可能是一件有帮助的事情，对于新人来说更是如此。只有把知识流动起来，才能实现最大程度的共同成长。\n\n主要的技术栈：\n\n>  koa2 + mongodb + vue + elementUI\n\n项目地址：[文章分享平台](https://polar-journey-84008.herokuapp.com/)\n\n","slug":"2016-12-19-share","published":1,"date":"2016-12-19T03:49:59.000Z","updated":"2016-12-19T04:21:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxrat002ly3onn5t1tewa","content":"<p>在平时的工作中，主要是通过群聊天来分析文章，随着聊天记录越来越多，分享文章的链接如果没有保存，那就基本上被刷掉了，要找回之前的链接就得去翻聊天记录，非常麻烦。那么，怎么解决这个问题，让有用的文章沉淀下来呢？</p>\n<blockquote>\n<p>做一个文章分享平台。</p>\n</blockquote>\n<p>这就是做这个平台的初衷。</p>\n<p>让组内的成员把平时看过的好文章，分享到平台上，并且写上自己的笔记或者是评价，这对于其他同事来说可能是一件有帮助的事情，对于新人来说更是如此。只有把知识流动起来，才能实现最大程度的共同成长。</p>\n<p>主要的技术栈：</p>\n<blockquote>\n<p> koa2 + mongodb + vue + elementUI</p>\n</blockquote>\n<p>项目地址：<a href=\"https://polar-journey-84008.herokuapp.com/\" target=\"_blank\" rel=\"external\">文章分享平台</a></p>\n","excerpt":"","more":"<p>在平时的工作中，主要是通过群聊天来分析文章，随着聊天记录越来越多，分享文章的链接如果没有保存，那就基本上被刷掉了，要找回之前的链接就得去翻聊天记录，非常麻烦。那么，怎么解决这个问题，让有用的文章沉淀下来呢？</p>\n<blockquote>\n<p>做一个文章分享平台。</p>\n</blockquote>\n<p>这就是做这个平台的初衷。</p>\n<p>让组内的成员把平时看过的好文章，分享到平台上，并且写上自己的笔记或者是评价，这对于其他同事来说可能是一件有帮助的事情，对于新人来说更是如此。只有把知识流动起来，才能实现最大程度的共同成长。</p>\n<p>主要的技术栈：</p>\n<blockquote>\n<p> koa2 + mongodb + vue + elementUI</p>\n</blockquote>\n<p>项目地址：<a href=\"https://polar-journey-84008.herokuapp.com/\">文章分享平台</a></p>\n"},{"title":"【错误】ApplicationRecord","_content":"\n新建model时，默认的代码是长这个样子的\n\n```ruby\nclass Group < ApplicationRecord\nend\n```\n\n经常忘记把`ApplicationRecord`改成`ActiveRecord::Base`，同样的错误，犯了2-3次，所以还是把错误记录下来，以免将来再犯。","source":"_posts/2016-12-21-applicationRecord-error.md","raw":"---\ntitle: 【错误】ApplicationRecord\ncategories: rails\ntags: 错误\n---\n\n新建model时，默认的代码是长这个样子的\n\n```ruby\nclass Group < ApplicationRecord\nend\n```\n\n经常忘记把`ApplicationRecord`改成`ActiveRecord::Base`，同样的错误，犯了2-3次，所以还是把错误记录下来，以免将来再犯。","slug":"2016-12-21-applicationRecord-error","published":1,"date":"2016-12-21T02:32:18.000Z","updated":"2016-12-21T02:33:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxrau002py3onxleu9rz3","content":"<p>新建model时，默认的代码是长这个样子的</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Group</span> &lt; ApplicationRecord</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>经常忘记把<code>ApplicationRecord</code>改成<code>ActiveRecord::Base</code>，同样的错误，犯了2-3次，所以还是把错误记录下来，以免将来再犯。</p>\n","excerpt":"","more":"<p>新建model时，默认的代码是长这个样子的</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Group</span> &lt; ApplicationRecord</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>经常忘记把<code>ApplicationRecord</code>改成<code>ActiveRecord::Base</code>，同样的错误，犯了2-3次，所以还是把错误记录下来，以免将来再犯。</p>\n"},{"title":"函数式编程","_content":"\n## 什么是函数式编程？\n\n首先说说什么是编程范式，它指的是计算机编程的基本风格或典范模式。打个比喻，如果说每个编程者都在创造一个虚拟世界，那么编程范式就是他们所采用的世界观和方法论。常见的编程范式有两种：面向过程编程（C）和面向对象编程（C++，JAVA）。\n\n函数式编程是一种编程范性，它有如下特点：\n\n- 函数是有确定性输出的（也就是维基百科上面所说的：避免使用程序状态以及易变对象）。\n- 使用函数进行编程（恩，貌似是废话^_^）。\n- 可以接受函数当作输入和输出（函数可以作为参数，也可以作为返回值）。\n- 强调执行的结果而非执行的过程（比如这个函数 getUserInfo 就是针对结果的，我只关注这个函数需要什么参数，以及它会返回什么 ）。\n- 倡导利用若干简单的执行单元让计算结果不断渐进，逐层推到复杂的运算，而不是设计一个复杂的执行过程。（循序渐进，不要一口气吃成一个大胖子）。\n\n## 基本要求\n\n- 函数是一等公民（函数可以作为参数，也可以作为返回值，也可以把函数赋给变量）。\n- 函数没有副作用、不修改状态。\n- 参数、对象不可变。\n- 只用表达式，不用语句。\n- 不鼓励使用this\n\n## 种类\n\n### 普通函数\n\n```javascript\ny = f(x)\n```\n\n![](http://ww1.sinaimg.cn/large/801b780ajw1f84lcsj027j20cl02bjrc.jpg)\n\n将一个输入（x）隐射到一个输出（y）上。\n\n### 隐射函数（map）\n\n```javascript\ny = map(f, x)\n```\n\n![](http://ww2.sinaimg.cn/large/801b780ajw1f84lffn529j20ch07n74t.jpg)\n\n将一组输入映射到一组输出上。\n\n如果用面向过程编程来写的话就要分别执行3次f函数：\n\n```javascript\nx1 = f(y1)\nx2 = f(y2)\nx3 = f(y3)\n```\n\n### 组合函数（compose）\n\n```javascript\nz = h(g(x))\n```\n\n设：z = f(x)，则\n\n```javascript\nf = compose(h, g)\n```\n\nh就好比是工厂里面的一条生产流水线，而g和h是流水线上的两道工序。\n\n![](http://ww3.sinaimg.cn/large/801b780ajw1f84lo0y7q7j20ke028q30.jpg)\n\n组合函数实例：\n\n```javascript\nfunction compose() {\n  var fns = arguments\n  return function (result) {\n    for (var i = fns.length - 1; i >= 0; i--) {\n      result = fns[i](result)\n    }\n    return result\n  }\n}\n\nfunction a(x) {\n  return x + 'a'\n}\n\nfunction b(x) {\n  return x + 'b'\n}\n\nconst add_ab = compose(b, a)\nconst str = add_ab('')\nconsole.log(str) // 'ab'\n```\n\n### 隐射 + 组合\n\n```javascript\nz = map(compose(h, g), x)\n```\n\n![](http://ww4.sinaimg.cn/large/801b780ajw1f84lpe8qnrj20l70940tr.jpg)\n\n### 柯里化（currify）\n\n柯里化的函数：可以固定一部分参数的函数。\n\n```javascript\nz = h(c, y)\n```\n\n当c为定值时 z = f(y)\n\n```javascript\nh = currify(h) // 柯里话之后的函数h，接受一个固定参数c，并返回一个新的函数\nf = h(c)\n```\n\n![](http://ww2.sinaimg.cn/large/801b780ajw1f84lrce3jtj20sh0bf0th.jpg)\n\ncurrify函数实例：\n\n```javascript\nfunction curry(f) {\n  return function (...a) {\n    if (a.length < f.length) {\n      return function (...b) {\n        return f(...a, ...b)\n      }\n    } else {\n      return f(...a)\n    }\n  }\n}\n\nconst foo = curry(function (a, b, c, d) {\n  return a*b + c*d\n})\n\nconsole.log(foo(1, 2, 3, 4)) // 14\nconst bar = foo(1, 2)\nconsole.log(bar(3, 4)) // 14\n```\n\n### 隐射 + 组合 + 柯里化\n\n```javascript\nz = map(compose(furrify(h)(c), g), x)\n```\n\n![](http://ww3.sinaimg.cn/large/801b780ajw1f84m3nyl17j20l90cg3zt.jpg)\n\n### filter\n\n```javascript\nz = map(compose(h(c), g), filter(x))\n```\n\n通过filter函数过滤掉特定的输入。\n\n![](http://ww1.sinaimg.cn/large/801b780ajw1f84m6rchlqj20se0cigmx.jpg)\n\n### 总结\n\n```javascript\ny = f(x)\n```\n\nf函数就是各种其他函数的组合和变形\n\n![](http://ww1.sinaimg.cn/large/801b780ajw1f84m9zypkdj20la08q0tb.jpg)\n\n## 高阶函数\n\n接受一个或多个函数作为参数，返回一个新的函数。\n\n## 什么是纯函数？\n\n纯函数指的是确定输入能得到确定输出的函数，举个例子\n\n```javascript\nvar minimum = 21\n\n// 非纯函数，输出受到外部变量（minimum）的影响，同一个输入可能得到不同的输出\nfunction checkAge(age) {\n  return age >= minimum\n}\n\nminimum = 50\n\n// 纯函数，确定输入得到确定输出\nfunction checkAge(minimum, age) {\n  return age >= minimum\n}\n```\n\n纯函数有什么好处呢？\n\n- 确定性/可缓存性\n- 自文档化\n- 可测试性\n- 可序列化远程执行\n- 无锁/并行\n\n## 什么是副作用\n\n副作用就是做了与处理输入输出之外的一些事情，常见的有以下场景：\n\n- 更改文件系统\n- 访问系统状态\n- 往数据库插入记录\n- 发送一个http请求\n- 可变数据\n- 打印/log\n- 获取用户输入\n- DOM查询\n\n当然，上面这些操作是必不可少的，我们要做的就是将副作用的影响降到最低，或者是明确地在某一些地方使用这个操作。\n\nPS：npm 有个库叫作[Immutable](https://github.com/facebook/immutable-js)，可以创建一个不可更改的数据，已减少副作用。\n\n## 一个很重要原则\n\n**尽可能**将纯函数（图中的f，g，也就是有确定性输入和输出的函数）集中在一起，不要和有副作用（不确定性）的函数混合在一起。\n\n![](http://ww3.sinaimg.cn/large/801b780ajw1f84mdl00pfj20x208tt9y.jpg)\n\n## 与面向过程式编程的比较\n\n- for loop 对应 map，forEach。\n- if else 对应 filter。\n- 各种运算符，对应各种函数。\n- 变量对应参数和返回值，理论上没有变量。","source":"_posts/2016-12-21-functional_programming.md","raw":"---\ntitle: 函数式编程\ncategories: Javascript\n---\n\n## 什么是函数式编程？\n\n首先说说什么是编程范式，它指的是计算机编程的基本风格或典范模式。打个比喻，如果说每个编程者都在创造一个虚拟世界，那么编程范式就是他们所采用的世界观和方法论。常见的编程范式有两种：面向过程编程（C）和面向对象编程（C++，JAVA）。\n\n函数式编程是一种编程范性，它有如下特点：\n\n- 函数是有确定性输出的（也就是维基百科上面所说的：避免使用程序状态以及易变对象）。\n- 使用函数进行编程（恩，貌似是废话^_^）。\n- 可以接受函数当作输入和输出（函数可以作为参数，也可以作为返回值）。\n- 强调执行的结果而非执行的过程（比如这个函数 getUserInfo 就是针对结果的，我只关注这个函数需要什么参数，以及它会返回什么 ）。\n- 倡导利用若干简单的执行单元让计算结果不断渐进，逐层推到复杂的运算，而不是设计一个复杂的执行过程。（循序渐进，不要一口气吃成一个大胖子）。\n\n## 基本要求\n\n- 函数是一等公民（函数可以作为参数，也可以作为返回值，也可以把函数赋给变量）。\n- 函数没有副作用、不修改状态。\n- 参数、对象不可变。\n- 只用表达式，不用语句。\n- 不鼓励使用this\n\n## 种类\n\n### 普通函数\n\n```javascript\ny = f(x)\n```\n\n![](http://ww1.sinaimg.cn/large/801b780ajw1f84lcsj027j20cl02bjrc.jpg)\n\n将一个输入（x）隐射到一个输出（y）上。\n\n### 隐射函数（map）\n\n```javascript\ny = map(f, x)\n```\n\n![](http://ww2.sinaimg.cn/large/801b780ajw1f84lffn529j20ch07n74t.jpg)\n\n将一组输入映射到一组输出上。\n\n如果用面向过程编程来写的话就要分别执行3次f函数：\n\n```javascript\nx1 = f(y1)\nx2 = f(y2)\nx3 = f(y3)\n```\n\n### 组合函数（compose）\n\n```javascript\nz = h(g(x))\n```\n\n设：z = f(x)，则\n\n```javascript\nf = compose(h, g)\n```\n\nh就好比是工厂里面的一条生产流水线，而g和h是流水线上的两道工序。\n\n![](http://ww3.sinaimg.cn/large/801b780ajw1f84lo0y7q7j20ke028q30.jpg)\n\n组合函数实例：\n\n```javascript\nfunction compose() {\n  var fns = arguments\n  return function (result) {\n    for (var i = fns.length - 1; i >= 0; i--) {\n      result = fns[i](result)\n    }\n    return result\n  }\n}\n\nfunction a(x) {\n  return x + 'a'\n}\n\nfunction b(x) {\n  return x + 'b'\n}\n\nconst add_ab = compose(b, a)\nconst str = add_ab('')\nconsole.log(str) // 'ab'\n```\n\n### 隐射 + 组合\n\n```javascript\nz = map(compose(h, g), x)\n```\n\n![](http://ww4.sinaimg.cn/large/801b780ajw1f84lpe8qnrj20l70940tr.jpg)\n\n### 柯里化（currify）\n\n柯里化的函数：可以固定一部分参数的函数。\n\n```javascript\nz = h(c, y)\n```\n\n当c为定值时 z = f(y)\n\n```javascript\nh = currify(h) // 柯里话之后的函数h，接受一个固定参数c，并返回一个新的函数\nf = h(c)\n```\n\n![](http://ww2.sinaimg.cn/large/801b780ajw1f84lrce3jtj20sh0bf0th.jpg)\n\ncurrify函数实例：\n\n```javascript\nfunction curry(f) {\n  return function (...a) {\n    if (a.length < f.length) {\n      return function (...b) {\n        return f(...a, ...b)\n      }\n    } else {\n      return f(...a)\n    }\n  }\n}\n\nconst foo = curry(function (a, b, c, d) {\n  return a*b + c*d\n})\n\nconsole.log(foo(1, 2, 3, 4)) // 14\nconst bar = foo(1, 2)\nconsole.log(bar(3, 4)) // 14\n```\n\n### 隐射 + 组合 + 柯里化\n\n```javascript\nz = map(compose(furrify(h)(c), g), x)\n```\n\n![](http://ww3.sinaimg.cn/large/801b780ajw1f84m3nyl17j20l90cg3zt.jpg)\n\n### filter\n\n```javascript\nz = map(compose(h(c), g), filter(x))\n```\n\n通过filter函数过滤掉特定的输入。\n\n![](http://ww1.sinaimg.cn/large/801b780ajw1f84m6rchlqj20se0cigmx.jpg)\n\n### 总结\n\n```javascript\ny = f(x)\n```\n\nf函数就是各种其他函数的组合和变形\n\n![](http://ww1.sinaimg.cn/large/801b780ajw1f84m9zypkdj20la08q0tb.jpg)\n\n## 高阶函数\n\n接受一个或多个函数作为参数，返回一个新的函数。\n\n## 什么是纯函数？\n\n纯函数指的是确定输入能得到确定输出的函数，举个例子\n\n```javascript\nvar minimum = 21\n\n// 非纯函数，输出受到外部变量（minimum）的影响，同一个输入可能得到不同的输出\nfunction checkAge(age) {\n  return age >= minimum\n}\n\nminimum = 50\n\n// 纯函数，确定输入得到确定输出\nfunction checkAge(minimum, age) {\n  return age >= minimum\n}\n```\n\n纯函数有什么好处呢？\n\n- 确定性/可缓存性\n- 自文档化\n- 可测试性\n- 可序列化远程执行\n- 无锁/并行\n\n## 什么是副作用\n\n副作用就是做了与处理输入输出之外的一些事情，常见的有以下场景：\n\n- 更改文件系统\n- 访问系统状态\n- 往数据库插入记录\n- 发送一个http请求\n- 可变数据\n- 打印/log\n- 获取用户输入\n- DOM查询\n\n当然，上面这些操作是必不可少的，我们要做的就是将副作用的影响降到最低，或者是明确地在某一些地方使用这个操作。\n\nPS：npm 有个库叫作[Immutable](https://github.com/facebook/immutable-js)，可以创建一个不可更改的数据，已减少副作用。\n\n## 一个很重要原则\n\n**尽可能**将纯函数（图中的f，g，也就是有确定性输入和输出的函数）集中在一起，不要和有副作用（不确定性）的函数混合在一起。\n\n![](http://ww3.sinaimg.cn/large/801b780ajw1f84mdl00pfj20x208tt9y.jpg)\n\n## 与面向过程式编程的比较\n\n- for loop 对应 map，forEach。\n- if else 对应 filter。\n- 各种运算符，对应各种函数。\n- 变量对应参数和返回值，理论上没有变量。","slug":"2016-12-21-functional_programming","published":1,"date":"2016-09-24T06:27:08.000Z","updated":"2016-12-21T02:46:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxraw002sy3onncg85pi4","content":"<h2 id=\"什么是函数式编程？\"><a href=\"#什么是函数式编程？\" class=\"headerlink\" title=\"什么是函数式编程？\"></a>什么是函数式编程？</h2><p>首先说说什么是编程范式，它指的是计算机编程的基本风格或典范模式。打个比喻，如果说每个编程者都在创造一个虚拟世界，那么编程范式就是他们所采用的世界观和方法论。常见的编程范式有两种：面向过程编程（C）和面向对象编程（C++，JAVA）。</p>\n<p>函数式编程是一种编程范性，它有如下特点：</p>\n<ul>\n<li>函数是有确定性输出的（也就是维基百科上面所说的：避免使用程序状态以及易变对象）。</li>\n<li>使用函数进行编程（恩，貌似是废话^_^）。</li>\n<li>可以接受函数当作输入和输出（函数可以作为参数，也可以作为返回值）。</li>\n<li>强调执行的结果而非执行的过程（比如这个函数 getUserInfo 就是针对结果的，我只关注这个函数需要什么参数，以及它会返回什么 ）。</li>\n<li>倡导利用若干简单的执行单元让计算结果不断渐进，逐层推到复杂的运算，而不是设计一个复杂的执行过程。（循序渐进，不要一口气吃成一个大胖子）。</li>\n</ul>\n<h2 id=\"基本要求\"><a href=\"#基本要求\" class=\"headerlink\" title=\"基本要求\"></a>基本要求</h2><ul>\n<li>函数是一等公民（函数可以作为参数，也可以作为返回值，也可以把函数赋给变量）。</li>\n<li>函数没有副作用、不修改状态。</li>\n<li>参数、对象不可变。</li>\n<li>只用表达式，不用语句。</li>\n<li>不鼓励使用this</li>\n</ul>\n<h2 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h2><h3 id=\"普通函数\"><a href=\"#普通函数\" class=\"headerlink\" title=\"普通函数\"></a>普通函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = f(x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780ajw1f84lcsj027j20cl02bjrc.jpg\" alt=\"\"></p>\n<p>将一个输入（x）隐射到一个输出（y）上。</p>\n<h3 id=\"隐射函数（map）\"><a href=\"#隐射函数（map）\" class=\"headerlink\" title=\"隐射函数（map）\"></a>隐射函数（map）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = map(f, x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww2.sinaimg.cn/large/801b780ajw1f84lffn529j20ch07n74t.jpg\" alt=\"\"></p>\n<p>将一组输入映射到一组输出上。</p>\n<p>如果用面向过程编程来写的话就要分别执行3次f函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x1 = f(y1)</span><br><span class=\"line\">x2 = f(y2)</span><br><span class=\"line\">x3 = f(y3)</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合函数（compose）\"><a href=\"#组合函数（compose）\" class=\"headerlink\" title=\"组合函数（compose）\"></a>组合函数（compose）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = h(g(x))</span><br></pre></td></tr></table></figure>\n<p>设：z = f(x)，则</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = compose(h, g)</span><br></pre></td></tr></table></figure>\n<p>h就好比是工厂里面的一条生产流水线，而g和h是流水线上的两道工序。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780ajw1f84lo0y7q7j20ke028q30.jpg\" alt=\"\"></p>\n<p>组合函数实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fns = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = fns.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      result = fns[i](result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"string\">'a'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"string\">'b'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> add_ab = compose(b, a)</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = add_ab(<span class=\"string\">''</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str) <span class=\"comment\">// 'ab'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"隐射-组合\"><a href=\"#隐射-组合\" class=\"headerlink\" title=\"隐射 + 组合\"></a>隐射 + 组合</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = map(compose(h, g), x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww4.sinaimg.cn/large/801b780ajw1f84lpe8qnrj20l70940tr.jpg\" alt=\"\"></p>\n<h3 id=\"柯里化（currify）\"><a href=\"#柯里化（currify）\" class=\"headerlink\" title=\"柯里化（currify）\"></a>柯里化（currify）</h3><p>柯里化的函数：可以固定一部分参数的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = h(c, y)</span><br></pre></td></tr></table></figure>\n<p>当c为定值时 z = f(y)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h = currify(h) <span class=\"comment\">// 柯里话之后的函数h，接受一个固定参数c，并返回一个新的函数</span></span><br><span class=\"line\">f = h(c)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww2.sinaimg.cn/large/801b780ajw1f84lrce3jtj20sh0bf0th.jpg\" alt=\"\"></p>\n<p>currify函数实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.length &lt; f.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(...a, ...b)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> f(...a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = curry(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a*b + c*d</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)) <span class=\"comment\">// 14</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar(<span class=\"number\">3</span>, <span class=\"number\">4</span>)) <span class=\"comment\">// 14</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"隐射-组合-柯里化\"><a href=\"#隐射-组合-柯里化\" class=\"headerlink\" title=\"隐射 + 组合 + 柯里化\"></a>隐射 + 组合 + 柯里化</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = map(compose(furrify(h)(c), g), x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780ajw1f84m3nyl17j20l90cg3zt.jpg\" alt=\"\"></p>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = map(compose(h(c), g), filter(x))</span><br></pre></td></tr></table></figure>\n<p>通过filter函数过滤掉特定的输入。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780ajw1f84m6rchlqj20se0cigmx.jpg\" alt=\"\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = f(x)</span><br></pre></td></tr></table></figure>\n<p>f函数就是各种其他函数的组合和变形</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780ajw1f84m9zypkdj20la08q0tb.jpg\" alt=\"\"></p>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p>接受一个或多个函数作为参数，返回一个新的函数。</p>\n<h2 id=\"什么是纯函数？\"><a href=\"#什么是纯函数？\" class=\"headerlink\" title=\"什么是纯函数？\"></a>什么是纯函数？</h2><p>纯函数指的是确定输入能得到确定输出的函数，举个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> minimum = <span class=\"number\">21</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非纯函数，输出受到外部变量（minimum）的影响，同一个输入可能得到不同的输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAge</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= minimum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">minimum = <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 纯函数，确定输入得到确定输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAge</span>(<span class=\"params\">minimum, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= minimum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>纯函数有什么好处呢？</p>\n<ul>\n<li>确定性/可缓存性</li>\n<li>自文档化</li>\n<li>可测试性</li>\n<li>可序列化远程执行</li>\n<li>无锁/并行</li>\n</ul>\n<h2 id=\"什么是副作用\"><a href=\"#什么是副作用\" class=\"headerlink\" title=\"什么是副作用\"></a>什么是副作用</h2><p>副作用就是做了与处理输入输出之外的一些事情，常见的有以下场景：</p>\n<ul>\n<li>更改文件系统</li>\n<li>访问系统状态</li>\n<li>往数据库插入记录</li>\n<li>发送一个http请求</li>\n<li>可变数据</li>\n<li>打印/log</li>\n<li>获取用户输入</li>\n<li>DOM查询</li>\n</ul>\n<p>当然，上面这些操作是必不可少的，我们要做的就是将副作用的影响降到最低，或者是明确地在某一些地方使用这个操作。</p>\n<p>PS：npm 有个库叫作<a href=\"https://github.com/facebook/immutable-js\" target=\"_blank\" rel=\"external\">Immutable</a>，可以创建一个不可更改的数据，已减少副作用。</p>\n<h2 id=\"一个很重要原则\"><a href=\"#一个很重要原则\" class=\"headerlink\" title=\"一个很重要原则\"></a>一个很重要原则</h2><p><strong>尽可能</strong>将纯函数（图中的f，g，也就是有确定性输入和输出的函数）集中在一起，不要和有副作用（不确定性）的函数混合在一起。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780ajw1f84mdl00pfj20x208tt9y.jpg\" alt=\"\"></p>\n<h2 id=\"与面向过程式编程的比较\"><a href=\"#与面向过程式编程的比较\" class=\"headerlink\" title=\"与面向过程式编程的比较\"></a>与面向过程式编程的比较</h2><ul>\n<li>for loop 对应 map，forEach。</li>\n<li>if else 对应 filter。</li>\n<li>各种运算符，对应各种函数。</li>\n<li>变量对应参数和返回值，理论上没有变量。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"什么是函数式编程？\"><a href=\"#什么是函数式编程？\" class=\"headerlink\" title=\"什么是函数式编程？\"></a>什么是函数式编程？</h2><p>首先说说什么是编程范式，它指的是计算机编程的基本风格或典范模式。打个比喻，如果说每个编程者都在创造一个虚拟世界，那么编程范式就是他们所采用的世界观和方法论。常见的编程范式有两种：面向过程编程（C）和面向对象编程（C++，JAVA）。</p>\n<p>函数式编程是一种编程范性，它有如下特点：</p>\n<ul>\n<li>函数是有确定性输出的（也就是维基百科上面所说的：避免使用程序状态以及易变对象）。</li>\n<li>使用函数进行编程（恩，貌似是废话^_^）。</li>\n<li>可以接受函数当作输入和输出（函数可以作为参数，也可以作为返回值）。</li>\n<li>强调执行的结果而非执行的过程（比如这个函数 getUserInfo 就是针对结果的，我只关注这个函数需要什么参数，以及它会返回什么 ）。</li>\n<li>倡导利用若干简单的执行单元让计算结果不断渐进，逐层推到复杂的运算，而不是设计一个复杂的执行过程。（循序渐进，不要一口气吃成一个大胖子）。</li>\n</ul>\n<h2 id=\"基本要求\"><a href=\"#基本要求\" class=\"headerlink\" title=\"基本要求\"></a>基本要求</h2><ul>\n<li>函数是一等公民（函数可以作为参数，也可以作为返回值，也可以把函数赋给变量）。</li>\n<li>函数没有副作用、不修改状态。</li>\n<li>参数、对象不可变。</li>\n<li>只用表达式，不用语句。</li>\n<li>不鼓励使用this</li>\n</ul>\n<h2 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h2><h3 id=\"普通函数\"><a href=\"#普通函数\" class=\"headerlink\" title=\"普通函数\"></a>普通函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = f(x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780ajw1f84lcsj027j20cl02bjrc.jpg\" alt=\"\"></p>\n<p>将一个输入（x）隐射到一个输出（y）上。</p>\n<h3 id=\"隐射函数（map）\"><a href=\"#隐射函数（map）\" class=\"headerlink\" title=\"隐射函数（map）\"></a>隐射函数（map）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = map(f, x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww2.sinaimg.cn/large/801b780ajw1f84lffn529j20ch07n74t.jpg\" alt=\"\"></p>\n<p>将一组输入映射到一组输出上。</p>\n<p>如果用面向过程编程来写的话就要分别执行3次f函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x1 = f(y1)</span><br><span class=\"line\">x2 = f(y2)</span><br><span class=\"line\">x3 = f(y3)</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合函数（compose）\"><a href=\"#组合函数（compose）\" class=\"headerlink\" title=\"组合函数（compose）\"></a>组合函数（compose）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = h(g(x))</span><br></pre></td></tr></table></figure>\n<p>设：z = f(x)，则</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = compose(h, g)</span><br></pre></td></tr></table></figure>\n<p>h就好比是工厂里面的一条生产流水线，而g和h是流水线上的两道工序。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780ajw1f84lo0y7q7j20ke028q30.jpg\" alt=\"\"></p>\n<p>组合函数实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fns = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = fns.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      result = fns[i](result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"string\">'a'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"string\">'b'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> add_ab = compose(b, a)</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = add_ab(<span class=\"string\">''</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str) <span class=\"comment\">// 'ab'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"隐射-组合\"><a href=\"#隐射-组合\" class=\"headerlink\" title=\"隐射 + 组合\"></a>隐射 + 组合</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = map(compose(h, g), x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww4.sinaimg.cn/large/801b780ajw1f84lpe8qnrj20l70940tr.jpg\" alt=\"\"></p>\n<h3 id=\"柯里化（currify）\"><a href=\"#柯里化（currify）\" class=\"headerlink\" title=\"柯里化（currify）\"></a>柯里化（currify）</h3><p>柯里化的函数：可以固定一部分参数的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = h(c, y)</span><br></pre></td></tr></table></figure>\n<p>当c为定值时 z = f(y)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h = currify(h) <span class=\"comment\">// 柯里话之后的函数h，接受一个固定参数c，并返回一个新的函数</span></span><br><span class=\"line\">f = h(c)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww2.sinaimg.cn/large/801b780ajw1f84lrce3jtj20sh0bf0th.jpg\" alt=\"\"></p>\n<p>currify函数实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.length &lt; f.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(...a, ...b)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> f(...a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = curry(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a*b + c*d</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)) <span class=\"comment\">// 14</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar(<span class=\"number\">3</span>, <span class=\"number\">4</span>)) <span class=\"comment\">// 14</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"隐射-组合-柯里化\"><a href=\"#隐射-组合-柯里化\" class=\"headerlink\" title=\"隐射 + 组合 + 柯里化\"></a>隐射 + 组合 + 柯里化</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = map(compose(furrify(h)(c), g), x)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780ajw1f84m3nyl17j20l90cg3zt.jpg\" alt=\"\"></p>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z = map(compose(h(c), g), filter(x))</span><br></pre></td></tr></table></figure>\n<p>通过filter函数过滤掉特定的输入。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780ajw1f84m6rchlqj20se0cigmx.jpg\" alt=\"\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y = f(x)</span><br></pre></td></tr></table></figure>\n<p>f函数就是各种其他函数的组合和变形</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780ajw1f84m9zypkdj20la08q0tb.jpg\" alt=\"\"></p>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p>接受一个或多个函数作为参数，返回一个新的函数。</p>\n<h2 id=\"什么是纯函数？\"><a href=\"#什么是纯函数？\" class=\"headerlink\" title=\"什么是纯函数？\"></a>什么是纯函数？</h2><p>纯函数指的是确定输入能得到确定输出的函数，举个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> minimum = <span class=\"number\">21</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非纯函数，输出受到外部变量（minimum）的影响，同一个输入可能得到不同的输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAge</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= minimum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">minimum = <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 纯函数，确定输入得到确定输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAge</span>(<span class=\"params\">minimum, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= minimum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>纯函数有什么好处呢？</p>\n<ul>\n<li>确定性/可缓存性</li>\n<li>自文档化</li>\n<li>可测试性</li>\n<li>可序列化远程执行</li>\n<li>无锁/并行</li>\n</ul>\n<h2 id=\"什么是副作用\"><a href=\"#什么是副作用\" class=\"headerlink\" title=\"什么是副作用\"></a>什么是副作用</h2><p>副作用就是做了与处理输入输出之外的一些事情，常见的有以下场景：</p>\n<ul>\n<li>更改文件系统</li>\n<li>访问系统状态</li>\n<li>往数据库插入记录</li>\n<li>发送一个http请求</li>\n<li>可变数据</li>\n<li>打印/log</li>\n<li>获取用户输入</li>\n<li>DOM查询</li>\n</ul>\n<p>当然，上面这些操作是必不可少的，我们要做的就是将副作用的影响降到最低，或者是明确地在某一些地方使用这个操作。</p>\n<p>PS：npm 有个库叫作<a href=\"https://github.com/facebook/immutable-js\">Immutable</a>，可以创建一个不可更改的数据，已减少副作用。</p>\n<h2 id=\"一个很重要原则\"><a href=\"#一个很重要原则\" class=\"headerlink\" title=\"一个很重要原则\"></a>一个很重要原则</h2><p><strong>尽可能</strong>将纯函数（图中的f，g，也就是有确定性输入和输出的函数）集中在一起，不要和有副作用（不确定性）的函数混合在一起。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780ajw1f84mdl00pfj20x208tt9y.jpg\" alt=\"\"></p>\n<h2 id=\"与面向过程式编程的比较\"><a href=\"#与面向过程式编程的比较\" class=\"headerlink\" title=\"与面向过程式编程的比较\"></a>与面向过程式编程的比较</h2><ul>\n<li>for loop 对应 map，forEach。</li>\n<li>if else 对应 filter。</li>\n<li>各种运算符，对应各种函数。</li>\n<li>变量对应参数和返回值，理论上没有变量。</li>\n</ul>\n"},{"title":"【git】如何修改最近的提交？","_content":"\n## 问题\n\n有时把代码提交了之后，发现少提交东西了，或者里面有包含错误代码的文件，怎么办？\n\n## 解决方法\n\n如果是少提交东西了，那就执行`git add`添加文件到暂存区。\n\n如果是有提交了错误的代码，那就改成代码，同样地，执行`git add`添加文件到暂存区。\n\n这时候就不能直接运行\n\n```bash\ngit commit -m \"xxx\"\n```\n\n因为这会产生一条新的提交记录。\n\n正确的解法是运行\n\n```bash\ngit commit --amend\n```\n\n然后，你就会进入编辑模式，如果有需要，就可以修改上一次的注释，然后`:wq`退出，再运行`git log`就能看到，以上操作并不会产生新的commit，而是修改上一次commit，done！\n\n\n\n","source":"_posts/2016-12-21-git-amend.md","raw":"---\ntitle: 【git】如何修改最近的提交？\ncategories: git\n---\n\n## 问题\n\n有时把代码提交了之后，发现少提交东西了，或者里面有包含错误代码的文件，怎么办？\n\n## 解决方法\n\n如果是少提交东西了，那就执行`git add`添加文件到暂存区。\n\n如果是有提交了错误的代码，那就改成代码，同样地，执行`git add`添加文件到暂存区。\n\n这时候就不能直接运行\n\n```bash\ngit commit -m \"xxx\"\n```\n\n因为这会产生一条新的提交记录。\n\n正确的解法是运行\n\n```bash\ngit commit --amend\n```\n\n然后，你就会进入编辑模式，如果有需要，就可以修改上一次的注释，然后`:wq`退出，再运行`git log`就能看到，以上操作并不会产生新的commit，而是修改上一次commit，done！\n\n\n\n","slug":"2016-12-21-git-amend","published":1,"date":"2016-12-21T02:39:05.000Z","updated":"2016-12-21T02:39:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxray002wy3onm84odalq","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>有时把代码提交了之后，发现少提交东西了，或者里面有包含错误代码的文件，怎么办？</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>如果是少提交东西了，那就执行<code>git add</code>添加文件到暂存区。</p>\n<p>如果是有提交了错误的代码，那就改成代码，同样地，执行<code>git add</code>添加文件到暂存区。</p>\n<p>这时候就不能直接运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"xxx\"</span></span><br></pre></td></tr></table></figure>\n<p>因为这会产生一条新的提交记录。</p>\n<p>正确的解法是运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n<p>然后，你就会进入编辑模式，如果有需要，就可以修改上一次的注释，然后<code>:wq</code>退出，再运行<code>git log</code>就能看到，以上操作并不会产生新的commit，而是修改上一次commit，done！</p>\n","excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>有时把代码提交了之后，发现少提交东西了，或者里面有包含错误代码的文件，怎么办？</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>如果是少提交东西了，那就执行<code>git add</code>添加文件到暂存区。</p>\n<p>如果是有提交了错误的代码，那就改成代码，同样地，执行<code>git add</code>添加文件到暂存区。</p>\n<p>这时候就不能直接运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"xxx\"</span></span><br></pre></td></tr></table></figure>\n<p>因为这会产生一条新的提交记录。</p>\n<p>正确的解法是运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n<p>然后，你就会进入编辑模式，如果有需要，就可以修改上一次的注释，然后<code>:wq</code>退出，再运行<code>git log</code>就能看到，以上操作并不会产生新的commit，而是修改上一次commit，done！</p>\n"},{"title":"【git】为什么在.gitignore设置忽略文件夹无效？","_content":"\n当我不想把某个文件夹提交到git时，可以在`.gitignore`文件中写入要忽略的文件夹。当时我的操作是这样子的，先把所有的文件夹都提交上去，然后才意识到有一个文件夹不应该提交，所以我就在`.gitignore`中写（我要忽略的文件夹是buildfiles）\n\n```\nbuildfiles/\n```\n\n![](http://oggx6lf7f.bkt.clouddn.com/n2v9e.jpg)\n\n然后当我修改buildfiles里面的文件夹时，用`git status`查看git状态，发现里面竟然还有buildfiles的内容！！！我不是忽略它了吗，怎么还有？\n\n![](http://oggx6lf7f.bkt.clouddn.com/820n4.jpg)\n\n后来才知道，**已经提交到git的文件，就会一直存在着，无法没忽略，除非你把它从git上面删除**。于是，我把本地`buildfiles`里面所有的文件都删除，重新提交一遍，之后在添加文件就会自动被git忽略掉了，done！\n\n\n\n","source":"_posts/2016-12-21-git-ignore.md","raw":"---\ntitle: 【git】为什么在.gitignore设置忽略文件夹无效？\ncategories: git\n---\n\n当我不想把某个文件夹提交到git时，可以在`.gitignore`文件中写入要忽略的文件夹。当时我的操作是这样子的，先把所有的文件夹都提交上去，然后才意识到有一个文件夹不应该提交，所以我就在`.gitignore`中写（我要忽略的文件夹是buildfiles）\n\n```\nbuildfiles/\n```\n\n![](http://oggx6lf7f.bkt.clouddn.com/n2v9e.jpg)\n\n然后当我修改buildfiles里面的文件夹时，用`git status`查看git状态，发现里面竟然还有buildfiles的内容！！！我不是忽略它了吗，怎么还有？\n\n![](http://oggx6lf7f.bkt.clouddn.com/820n4.jpg)\n\n后来才知道，**已经提交到git的文件，就会一直存在着，无法没忽略，除非你把它从git上面删除**。于是，我把本地`buildfiles`里面所有的文件都删除，重新提交一遍，之后在添加文件就会自动被git忽略掉了，done！\n\n\n\n","slug":"2016-12-21-git-ignore","published":1,"date":"2016-12-21T02:39:36.000Z","updated":"2016-12-21T02:40:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxrb1002xy3on91rh34nr","content":"<p>当我不想把某个文件夹提交到git时，可以在<code>.gitignore</code>文件中写入要忽略的文件夹。当时我的操作是这样子的，先把所有的文件夹都提交上去，然后才意识到有一个文件夹不应该提交，所以我就在<code>.gitignore</code>中写（我要忽略的文件夹是buildfiles）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildfiles/</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/n2v9e.jpg\" alt=\"\"></p>\n<p>然后当我修改buildfiles里面的文件夹时，用<code>git status</code>查看git状态，发现里面竟然还有buildfiles的内容！！！我不是忽略它了吗，怎么还有？</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/820n4.jpg\" alt=\"\"></p>\n<p>后来才知道，<strong>已经提交到git的文件，就会一直存在着，无法没忽略，除非你把它从git上面删除</strong>。于是，我把本地<code>buildfiles</code>里面所有的文件都删除，重新提交一遍，之后在添加文件就会自动被git忽略掉了，done！</p>\n","excerpt":"","more":"<p>当我不想把某个文件夹提交到git时，可以在<code>.gitignore</code>文件中写入要忽略的文件夹。当时我的操作是这样子的，先把所有的文件夹都提交上去，然后才意识到有一个文件夹不应该提交，所以我就在<code>.gitignore</code>中写（我要忽略的文件夹是buildfiles）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildfiles/</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/n2v9e.jpg\" alt=\"\"></p>\n<p>然后当我修改buildfiles里面的文件夹时，用<code>git status</code>查看git状态，发现里面竟然还有buildfiles的内容！！！我不是忽略它了吗，怎么还有？</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/820n4.jpg\" alt=\"\"></p>\n<p>后来才知道，<strong>已经提交到git的文件，就会一直存在着，无法没忽略，除非你把它从git上面删除</strong>。于是，我把本地<code>buildfiles</code>里面所有的文件都删除，重新提交一遍，之后在添加文件就会自动被git忽略掉了，done！</p>\n"},{"title":"【错误】项目上传到heroku之后，访问报错","_content":"\n## 动作\n\n《rails 初级练习》3-14，上传项目到heroku，运行\n\n```bash\n$ heroku create\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n然后访问[项目页面](https://protected-coast-71491.herokuapp.com/)\n\n## 结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/f46bz.jpg)\n\n原因：运行`git status`查看git工作区的状态，发现有文件没有提交\n\n![](http://oggx6lf7f.bkt.clouddn.com/bjkoi.jpg)\n\n## 解决方法\n\n提交文件到heroku，done！\n\n","source":"_posts/2016-12-21-heroku-publish-error.md","raw":"---\ntitle: 【错误】项目上传到heroku之后，访问报错\ncategories: rails\ntags: 错误\n---\n\n## 动作\n\n《rails 初级练习》3-14，上传项目到heroku，运行\n\n```bash\n$ heroku create\n$ git push heroku master\n$ heroku run rake db:migrate\n```\n\n然后访问[项目页面](https://protected-coast-71491.herokuapp.com/)\n\n## 结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/f46bz.jpg)\n\n原因：运行`git status`查看git工作区的状态，发现有文件没有提交\n\n![](http://oggx6lf7f.bkt.clouddn.com/bjkoi.jpg)\n\n## 解决方法\n\n提交文件到heroku，done！\n\n","slug":"2016-12-21-heroku-publish-error","published":1,"date":"2016-12-21T02:37:13.000Z","updated":"2016-12-21T02:38:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxrb40032y3ondqwqacpv","content":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>《rails 初级练习》3-14，上传项目到heroku，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ heroku create</span><br><span class=\"line\">$ git push heroku master</span><br><span class=\"line\">$ heroku run rake db:migrate</span><br></pre></td></tr></table></figure>\n<p>然后访问<a href=\"https://protected-coast-71491.herokuapp.com/\" target=\"_blank\" rel=\"external\">项目页面</a></p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/f46bz.jpg\" alt=\"\"></p>\n<p>原因：运行<code>git status</code>查看git工作区的状态，发现有文件没有提交</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bjkoi.jpg\" alt=\"\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>提交文件到heroku，done！</p>\n","excerpt":"","more":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>《rails 初级练习》3-14，上传项目到heroku，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ heroku create</span><br><span class=\"line\">$ git push heroku master</span><br><span class=\"line\">$ heroku run rake db:migrate</span><br></pre></td></tr></table></figure>\n<p>然后访问<a href=\"https://protected-coast-71491.herokuapp.com/\">项目页面</a></p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/f46bz.jpg\" alt=\"\"></p>\n<p>原因：运行<code>git status</code>查看git工作区的状态，发现有文件没有提交</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bjkoi.jpg\" alt=\"\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>提交文件到heroku，done！</p>\n"},{"title":"【错误】安装devise出错","_content":"\n## 动作\n\n《rails 101》5-2节，本来是要运行\n\n```bash\nrails g devise:install\n```\n\n但是手误，写成了\n\n```bash\nrails g divise:install\n```\n\n但没有发现，接着执行\n\n```bash\nrails g devise user\n```\n\n执行完之后，才发现`devise`敲成了`divise`，所以想着重新执行\n\n```bash\nrails g devise:install\n```\n\n## 结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/hc004.jpg)\n\n## 解决方法\n\n一开始就想着，既然安装不了devise了，那就卸载devise咯，于是就上网查了很多删除devise的资料，越找越复杂，心里就在想：“为什么一个简单的问题，搞得那么复杂呢？”，就在这时候，我想到的解决方法！\n\ngit是什么？时光机呀！如果你在某一个分支搞砸了，那就回到之前的分支，重新来过就行了。\n\n于是，我先回到上一个分支\n\n```bash\ngit checkout ch03\n```\n\n这时，服务已经能够正常运行了，时光机果然名不虚传，哈哈。\n\n然后，我删除当前这个有着脏代码的分支\n\n```bash\ngit branch -D ch04\n```\n\n最后，再次新建`ch04`分支，按照教程重新操作一遍，done！\n\n这个经历这让我想起了一个比喻 ：\n\n> 一道锁着的门，钥匙可能不在锁上面，而是在其他地方。\n\n","source":"_posts/2016-12-21-install-devise-error.md","raw":"---\ntitle: 【错误】安装devise出错\ncategories: rails\ntags: 错误\n---\n\n## 动作\n\n《rails 101》5-2节，本来是要运行\n\n```bash\nrails g devise:install\n```\n\n但是手误，写成了\n\n```bash\nrails g divise:install\n```\n\n但没有发现，接着执行\n\n```bash\nrails g devise user\n```\n\n执行完之后，才发现`devise`敲成了`divise`，所以想着重新执行\n\n```bash\nrails g devise:install\n```\n\n## 结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/hc004.jpg)\n\n## 解决方法\n\n一开始就想着，既然安装不了devise了，那就卸载devise咯，于是就上网查了很多删除devise的资料，越找越复杂，心里就在想：“为什么一个简单的问题，搞得那么复杂呢？”，就在这时候，我想到的解决方法！\n\ngit是什么？时光机呀！如果你在某一个分支搞砸了，那就回到之前的分支，重新来过就行了。\n\n于是，我先回到上一个分支\n\n```bash\ngit checkout ch03\n```\n\n这时，服务已经能够正常运行了，时光机果然名不虚传，哈哈。\n\n然后，我删除当前这个有着脏代码的分支\n\n```bash\ngit branch -D ch04\n```\n\n最后，再次新建`ch04`分支，按照教程重新操作一遍，done！\n\n这个经历这让我想起了一个比喻 ：\n\n> 一道锁着的门，钥匙可能不在锁上面，而是在其他地方。\n\n","slug":"2016-12-21-install-devise-error","published":1,"date":"2016-12-21T02:38:18.000Z","updated":"2016-12-21T02:38:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxrb50035y3on2pppg7rf","content":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>《rails 101》5-2节，本来是要运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g devise:install</span><br></pre></td></tr></table></figure>\n<p>但是手误，写成了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g divise:install</span><br></pre></td></tr></table></figure>\n<p>但没有发现，接着执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g devise user</span><br></pre></td></tr></table></figure>\n<p>执行完之后，才发现<code>devise</code>敲成了<code>divise</code>，所以想着重新执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g devise:install</span><br></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/hc004.jpg\" alt=\"\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>一开始就想着，既然安装不了devise了，那就卸载devise咯，于是就上网查了很多删除devise的资料，越找越复杂，心里就在想：“为什么一个简单的问题，搞得那么复杂呢？”，就在这时候，我想到的解决方法！</p>\n<p>git是什么？时光机呀！如果你在某一个分支搞砸了，那就回到之前的分支，重新来过就行了。</p>\n<p>于是，我先回到上一个分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout ch03</span><br></pre></td></tr></table></figure>\n<p>这时，服务已经能够正常运行了，时光机果然名不虚传，哈哈。</p>\n<p>然后，我删除当前这个有着脏代码的分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D ch04</span><br></pre></td></tr></table></figure>\n<p>最后，再次新建<code>ch04</code>分支，按照教程重新操作一遍，done！</p>\n<p>这个经历这让我想起了一个比喻 ：</p>\n<blockquote>\n<p>一道锁着的门，钥匙可能不在锁上面，而是在其他地方。</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>《rails 101》5-2节，本来是要运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g devise:install</span><br></pre></td></tr></table></figure>\n<p>但是手误，写成了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g divise:install</span><br></pre></td></tr></table></figure>\n<p>但没有发现，接着执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g devise user</span><br></pre></td></tr></table></figure>\n<p>执行完之后，才发现<code>devise</code>敲成了<code>divise</code>，所以想着重新执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails g devise:install</span><br></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/hc004.jpg\" alt=\"\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>一开始就想着，既然安装不了devise了，那就卸载devise咯，于是就上网查了很多删除devise的资料，越找越复杂，心里就在想：“为什么一个简单的问题，搞得那么复杂呢？”，就在这时候，我想到的解决方法！</p>\n<p>git是什么？时光机呀！如果你在某一个分支搞砸了，那就回到之前的分支，重新来过就行了。</p>\n<p>于是，我先回到上一个分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout ch03</span><br></pre></td></tr></table></figure>\n<p>这时，服务已经能够正常运行了，时光机果然名不虚传，哈哈。</p>\n<p>然后，我删除当前这个有着脏代码的分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D ch04</span><br></pre></td></tr></table></figure>\n<p>最后，再次新建<code>ch04</code>分支，按照教程重新操作一遍，done！</p>\n<p>这个经历这让我想起了一个比喻 ：</p>\n<blockquote>\n<p>一道锁着的门，钥匙可能不在锁上面，而是在其他地方。</p>\n</blockquote>\n"},{"title":"rails 101 额外作业","_content":"\n![](http://oggx6lf7f.bkt.clouddn.com/3xg77.jpg)\n\n\n\n一开始认为，既然是删除我的文章，那肯定是写在`account/posts`里面咯，于是就写了`account/posts#edit`这个action。然后打开刷新页面，却出现这个结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/iofxy.png)\n\n百思不得其解...\n\n后来，发现点击编辑文章是，跳转的路径是`edit_group_post_path(post.group, post)`，焕然大悟\n\n![](http://oggx6lf7f.bkt.clouddn.com/m35el.jpg)\n\n于是就把`edit`这个action从`controllers/account/posts.controller.rb`搬到`controllers/posts.controller.rb`，再把`edit.html.erb`从`views/account/posts`搬到`views/posts`，然后刷新页面，done！\n\n同样的，接着写`posts#destroy`，可以删除文章了，done！\n\n另外一点，我发现教程上的路径函数中传入了当前文章对应的group\n\n![](http://oggx6lf7f.bkt.clouddn.com/bscpf.jpg)\n\n一开始真不知道是要用来干嘛的，所以在写controller时，一直想着怎么用这个group，想不明白，后来才想到，原来是用跳转页面时要用到的。\n\n![](http://oggx6lf7f.bkt.clouddn.com/qn5r7.jpg)\n\n\n","source":"_posts/2016-12-21-rails-101-extra-jobs.md","raw":"---\ntitle: rails 101 额外作业\ncategories: rails\n---\n\n![](http://oggx6lf7f.bkt.clouddn.com/3xg77.jpg)\n\n\n\n一开始认为，既然是删除我的文章，那肯定是写在`account/posts`里面咯，于是就写了`account/posts#edit`这个action。然后打开刷新页面，却出现这个结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/iofxy.png)\n\n百思不得其解...\n\n后来，发现点击编辑文章是，跳转的路径是`edit_group_post_path(post.group, post)`，焕然大悟\n\n![](http://oggx6lf7f.bkt.clouddn.com/m35el.jpg)\n\n于是就把`edit`这个action从`controllers/account/posts.controller.rb`搬到`controllers/posts.controller.rb`，再把`edit.html.erb`从`views/account/posts`搬到`views/posts`，然后刷新页面，done！\n\n同样的，接着写`posts#destroy`，可以删除文章了，done！\n\n另外一点，我发现教程上的路径函数中传入了当前文章对应的group\n\n![](http://oggx6lf7f.bkt.clouddn.com/bscpf.jpg)\n\n一开始真不知道是要用来干嘛的，所以在写controller时，一直想着怎么用这个group，想不明白，后来才想到，原来是用跳转页面时要用到的。\n\n![](http://oggx6lf7f.bkt.clouddn.com/qn5r7.jpg)\n\n\n","slug":"2016-12-21-rails-101-extra-jobs","published":1,"date":"2016-12-21T02:29:00.000Z","updated":"2016-12-21T02:29:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxrb70039y3onwaoi9ah7","content":"<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/3xg77.jpg\" alt=\"\"></p>\n<p>一开始认为，既然是删除我的文章，那肯定是写在<code>account/posts</code>里面咯，于是就写了<code>account/posts#edit</code>这个action。然后打开刷新页面，却出现这个结果</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/iofxy.png\" alt=\"\"></p>\n<p>百思不得其解…</p>\n<p>后来，发现点击编辑文章是，跳转的路径是<code>edit_group_post_path(post.group, post)</code>，焕然大悟</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/m35el.jpg\" alt=\"\"></p>\n<p>于是就把<code>edit</code>这个action从<code>controllers/account/posts.controller.rb</code>搬到<code>controllers/posts.controller.rb</code>，再把<code>edit.html.erb</code>从<code>views/account/posts</code>搬到<code>views/posts</code>，然后刷新页面，done！</p>\n<p>同样的，接着写<code>posts#destroy</code>，可以删除文章了，done！</p>\n<p>另外一点，我发现教程上的路径函数中传入了当前文章对应的group</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bscpf.jpg\" alt=\"\"></p>\n<p>一开始真不知道是要用来干嘛的，所以在写controller时，一直想着怎么用这个group，想不明白，后来才想到，原来是用跳转页面时要用到的。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/qn5r7.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/3xg77.jpg\" alt=\"\"></p>\n<p>一开始认为，既然是删除我的文章，那肯定是写在<code>account/posts</code>里面咯，于是就写了<code>account/posts#edit</code>这个action。然后打开刷新页面，却出现这个结果</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/iofxy.png\" alt=\"\"></p>\n<p>百思不得其解…</p>\n<p>后来，发现点击编辑文章是，跳转的路径是<code>edit_group_post_path(post.group, post)</code>，焕然大悟</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/m35el.jpg\" alt=\"\"></p>\n<p>于是就把<code>edit</code>这个action从<code>controllers/account/posts.controller.rb</code>搬到<code>controllers/posts.controller.rb</code>，再把<code>edit.html.erb</code>从<code>views/account/posts</code>搬到<code>views/posts</code>，然后刷新页面，done！</p>\n<p>同样的，接着写<code>posts#destroy</code>，可以删除文章了，done！</p>\n<p>另外一点，我发现教程上的路径函数中传入了当前文章对应的group</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bscpf.jpg\" alt=\"\"></p>\n<p>一开始真不知道是要用来干嘛的，所以在写controller时，一直想着怎么用这个group，想不明白，后来才想到，原来是用跳转页面时要用到的。</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/qn5r7.jpg\" alt=\"\"></p>\n"},{"title":"【错误】在rails console中操作数据库报错","_content":"\n## 动作\n\n《rails初级练习》3-8节，进入rails console，运行`Topic.count`。\n\n## 结果\n\n![2016-11-26 13-25-19](http://oggx6lf7f.bkt.clouddn.com/69foq.jpg)\n\n## 解决方法\n运行 `bundle update`，如果问题没有解决，执行`spring stop`应该就ok。\n\n## 参考链接\n[Segmentation fault with Rails after upgrading to OS Sierra, possibly related to sqlite3 gem](http://stackoverflow.com/questions/39812707/segmentation-fault-with-rails-after-upgrading-to-os-sierra-possibly-related-to)\n","source":"_posts/2016-12-21-rails-console-error.md","raw":"---\ntitle: 【错误】在rails console中操作数据库报错\ncategories: rails\ntags: 错误\n---\n\n## 动作\n\n《rails初级练习》3-8节，进入rails console，运行`Topic.count`。\n\n## 结果\n\n![2016-11-26 13-25-19](http://oggx6lf7f.bkt.clouddn.com/69foq.jpg)\n\n## 解决方法\n运行 `bundle update`，如果问题没有解决，执行`spring stop`应该就ok。\n\n## 参考链接\n[Segmentation fault with Rails after upgrading to OS Sierra, possibly related to sqlite3 gem](http://stackoverflow.com/questions/39812707/segmentation-fault-with-rails-after-upgrading-to-os-sierra-possibly-related-to)\n","slug":"2016-12-21-rails-console-error","published":1,"date":"2016-12-21T02:24:15.000Z","updated":"2016-12-21T02:33:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxrb8003by3onxe90s8yh","content":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>《rails初级练习》3-8节，进入rails console，运行<code>Topic.count</code>。</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/69foq.jpg\" alt=\"2016-11-26 13-25-19\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>运行 <code>bundle update</code>，如果问题没有解决，执行<code>spring stop</code>应该就ok。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://stackoverflow.com/questions/39812707/segmentation-fault-with-rails-after-upgrading-to-os-sierra-possibly-related-to\" target=\"_blank\" rel=\"external\">Segmentation fault with Rails after upgrading to OS Sierra, possibly related to sqlite3 gem</a></p>\n","excerpt":"","more":"<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>《rails初级练习》3-8节，进入rails console，运行<code>Topic.count</code>。</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/69foq.jpg\" alt=\"2016-11-26 13-25-19\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>运行 <code>bundle update</code>，如果问题没有解决，执行<code>spring stop</code>应该就ok。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://stackoverflow.com/questions/39812707/segmentation-fault-with-rails-after-upgrading-to-os-sierra-possibly-related-to\">Segmentation fault with Rails after upgrading to OS Sierra, possibly related to sqlite3 gem</a></p>\n"},{"title":"【错误】textarea为啥变成了input？","_content":"\n## 位置\n\n《rails 101》4-8节：将表单换为 Bootstrap 提供的版型。\n\n## 动作\n\n使用`simple_form`简化表单\n\n## 预期结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/k2owp.jpg)\n\n## 错误结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/ixyqh.jpg)\n\n## 分析\n\n首先，上`simple_form`[官网](https://github.com/plataformatec/simple_form)看看寻找解决方法，看到这样一句话：\n\n![](http://oggx6lf7f.bkt.clouddn.com/d07z3.jpg)\n\n也就是说，有可能是我创建model时，把description的类型设置成了`string`，而不是`text`。\n\n于是，我看了一下db里面的文件，果然\n\n![](http://oggx6lf7f.bkt.clouddn.com/4zlkt.jpg)\n\n证据确凿，真的是类型搞错了。\n\n## 解决方法\n\n### step1\n\n执行`rails g migration change_description_type_in_groups`创建migrate\n\n### step2\n\n在`db/migrate`目录中，打开刚才生成的文件，让它变成这样：\n\n```ruby\nclass ChangeDescriptionTypeInGroup < ActiveRecord::Migration[5.0]\n  def change\n  \tchange_column :groups, :description, :text\n  end\nend\n```\n\n### step3\n\n运行`rake db:migrate`，done！\n\n## 参考链接\n\n[http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration](http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration)","source":"_posts/2016-12-21-textarea-input.md","raw":"---\ntitle: 【错误】textarea为啥变成了input？\ncategories: rails\ntags: 错误\n---\n\n## 位置\n\n《rails 101》4-8节：将表单换为 Bootstrap 提供的版型。\n\n## 动作\n\n使用`simple_form`简化表单\n\n## 预期结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/k2owp.jpg)\n\n## 错误结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/ixyqh.jpg)\n\n## 分析\n\n首先，上`simple_form`[官网](https://github.com/plataformatec/simple_form)看看寻找解决方法，看到这样一句话：\n\n![](http://oggx6lf7f.bkt.clouddn.com/d07z3.jpg)\n\n也就是说，有可能是我创建model时，把description的类型设置成了`string`，而不是`text`。\n\n于是，我看了一下db里面的文件，果然\n\n![](http://oggx6lf7f.bkt.clouddn.com/4zlkt.jpg)\n\n证据确凿，真的是类型搞错了。\n\n## 解决方法\n\n### step1\n\n执行`rails g migration change_description_type_in_groups`创建migrate\n\n### step2\n\n在`db/migrate`目录中，打开刚才生成的文件，让它变成这样：\n\n```ruby\nclass ChangeDescriptionTypeInGroup < ActiveRecord::Migration[5.0]\n  def change\n  \tchange_column :groups, :description, :text\n  end\nend\n```\n\n### step3\n\n运行`rake db:migrate`，done！\n\n## 参考链接\n\n[http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration](http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration)","slug":"2016-12-21-textarea-input","published":1,"date":"2016-12-21T02:40:41.000Z","updated":"2016-12-21T02:40:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxrbd003fy3on06nmj09u","content":"<h2 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h2><p>《rails 101》4-8节：将表单换为 Bootstrap 提供的版型。</p>\n<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>使用<code>simple_form</code>简化表单</p>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/k2owp.jpg\" alt=\"\"></p>\n<h2 id=\"错误结果\"><a href=\"#错误结果\" class=\"headerlink\" title=\"错误结果\"></a>错误结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ixyqh.jpg\" alt=\"\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>首先，上<code>simple_form</code><a href=\"https://github.com/plataformatec/simple_form\" target=\"_blank\" rel=\"external\">官网</a>看看寻找解决方法，看到这样一句话：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/d07z3.jpg\" alt=\"\"></p>\n<p>也就是说，有可能是我创建model时，把description的类型设置成了<code>string</code>，而不是<code>text</code>。</p>\n<p>于是，我看了一下db里面的文件，果然</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/4zlkt.jpg\" alt=\"\"></p>\n<p>证据确凿，真的是类型搞错了。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><h3 id=\"step1\"><a href=\"#step1\" class=\"headerlink\" title=\"step1\"></a>step1</h3><p>执行<code>rails g migration change_description_type_in_groups</code>创建migrate</p>\n<h3 id=\"step2\"><a href=\"#step2\" class=\"headerlink\" title=\"step2\"></a>step2</h3><p>在<code>db/migrate</code>目录中，打开刚才生成的文件，让它变成这样：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChangeDescriptionTypeInGroup</span> &lt; ActiveRecord::Migration[5.0]</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span></span></span><br><span class=\"line\">  \tchange_column <span class=\"symbol\">:groups</span>, <span class=\"symbol\">:description</span>, <span class=\"symbol\">:text</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"step3\"><a href=\"#step3\" class=\"headerlink\" title=\"step3\"></a>step3</h3><p>运行<code>rake db:migrate</code>，done！</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration</a></p>\n","excerpt":"","more":"<h2 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h2><p>《rails 101》4-8节：将表单换为 Bootstrap 提供的版型。</p>\n<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>使用<code>simple_form</code>简化表单</p>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/k2owp.jpg\" alt=\"\"></p>\n<h2 id=\"错误结果\"><a href=\"#错误结果\" class=\"headerlink\" title=\"错误结果\"></a>错误结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/ixyqh.jpg\" alt=\"\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>首先，上<code>simple_form</code><a href=\"https://github.com/plataformatec/simple_form\">官网</a>看看寻找解决方法，看到这样一句话：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/d07z3.jpg\" alt=\"\"></p>\n<p>也就是说，有可能是我创建model时，把description的类型设置成了<code>string</code>，而不是<code>text</code>。</p>\n<p>于是，我看了一下db里面的文件，果然</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/4zlkt.jpg\" alt=\"\"></p>\n<p>证据确凿，真的是类型搞错了。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><h3 id=\"step1\"><a href=\"#step1\" class=\"headerlink\" title=\"step1\"></a>step1</h3><p>执行<code>rails g migration change_description_type_in_groups</code>创建migrate</p>\n<h3 id=\"step2\"><a href=\"#step2\" class=\"headerlink\" title=\"step2\"></a>step2</h3><p>在<code>db/migrate</code>目录中，打开刚才生成的文件，让它变成这样：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChangeDescriptionTypeInGroup</span> &lt; ActiveRecord::Migration[5.0]</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span></span></span><br><span class=\"line\">  \tchange_column <span class=\"symbol\">:groups</span>, <span class=\"symbol\">:description</span>, <span class=\"symbol\">:text</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"step3\"><a href=\"#step3\" class=\"headerlink\" title=\"step3\"></a>step3</h3><p>运行<code>rake db:migrate</code>，done！</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration\">http://stackoverflow.com/questions/5191405/change-a-column-type-from-date-to-datetime-during-ror-migration</a></p>\n"},{"title":"【错误】关联表的计数问题","_content":"\n## 位置\n\n《rails 初级练习》3-13 加分题 & 下一步\n\n## 动作\n\n当投票数为0时，让检票按钮失效，处于不能点击的状态\n\n## 预期结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/0lj8k.jpg)\n\n## 实际结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/xq6yg.jpg)\n\n## 分析\n\n我将`-1`按钮封装成helper，代码如下：\n\n![](http://oggx6lf7f.bkt.clouddn.com/5s8kk.jpg)\n\n当投票数为0时，让按钮变成disabled状态。但是结果却不是预期的那样子，说明这个的`topic.count`不是0，于是我就把它显示出来看一下究竟，在view写如下代码\n\n```ruby\n<td><%= topic.votes.count %> -- <%= topic.count %></td>\n```\n\n得到：\n\n![](http://oggx6lf7f.bkt.clouddn.com/bo9j2.jpg)\n\n哦！当点击`-1`时，原来`topic.votes.count`是会减少的，而topic.count没有减少，这样一来，错误可能出在`downvote`这个action中，果然\n\n![](http://oggx6lf7f.bkt.clouddn.com/rdgvi.jpg)\n\n原来是在执行`-1`时，没有更新count的值。\n\n## 解决方法\n\n![](http://oggx6lf7f.bkt.clouddn.com/4ybed.jpg)\n\n而且，更为合理的是，在view中使用`topic.count`而不是`topic.votes.count`，虽然这两个的值是一样的，但因为在helper中使用到`topic.count`，所以在view中也使用它就能防止本次遇到的错误。view的代码如下\n\n```ruby\n<td><%= pluralize(topic.count, \"voute\") %></td>\n```\n\n## 参考链接\n\n[RailsBridge：初探rails加分題](http://lesley.logdown.com/posts/736430-rails-beginners-the-practice-of-lu-series-railsbridge)","source":"_posts/2016-12-21-the-wrong-count-for-the-associated-table-problem.md","raw":"---\ntitle: 【错误】关联表的计数问题\ncategories: rails\ntags: 错误\n---\n\n## 位置\n\n《rails 初级练习》3-13 加分题 & 下一步\n\n## 动作\n\n当投票数为0时，让检票按钮失效，处于不能点击的状态\n\n## 预期结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/0lj8k.jpg)\n\n## 实际结果\n\n![](http://oggx6lf7f.bkt.clouddn.com/xq6yg.jpg)\n\n## 分析\n\n我将`-1`按钮封装成helper，代码如下：\n\n![](http://oggx6lf7f.bkt.clouddn.com/5s8kk.jpg)\n\n当投票数为0时，让按钮变成disabled状态。但是结果却不是预期的那样子，说明这个的`topic.count`不是0，于是我就把它显示出来看一下究竟，在view写如下代码\n\n```ruby\n<td><%= topic.votes.count %> -- <%= topic.count %></td>\n```\n\n得到：\n\n![](http://oggx6lf7f.bkt.clouddn.com/bo9j2.jpg)\n\n哦！当点击`-1`时，原来`topic.votes.count`是会减少的，而topic.count没有减少，这样一来，错误可能出在`downvote`这个action中，果然\n\n![](http://oggx6lf7f.bkt.clouddn.com/rdgvi.jpg)\n\n原来是在执行`-1`时，没有更新count的值。\n\n## 解决方法\n\n![](http://oggx6lf7f.bkt.clouddn.com/4ybed.jpg)\n\n而且，更为合理的是，在view中使用`topic.count`而不是`topic.votes.count`，虽然这两个的值是一样的，但因为在helper中使用到`topic.count`，所以在view中也使用它就能防止本次遇到的错误。view的代码如下\n\n```ruby\n<td><%= pluralize(topic.count, \"voute\") %></td>\n```\n\n## 参考链接\n\n[RailsBridge：初探rails加分題](http://lesley.logdown.com/posts/736430-rails-beginners-the-practice-of-lu-series-railsbridge)","slug":"2016-12-21-the-wrong-count-for-the-associated-table-problem","published":1,"date":"2016-12-21T02:41:14.000Z","updated":"2016-12-21T02:41:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxrbf003gy3onkb22mrhf","content":"<h2 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h2><p>《rails 初级练习》3-13 加分题 &amp; 下一步</p>\n<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>当投票数为0时，让检票按钮失效，处于不能点击的状态</p>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/0lj8k.jpg\" alt=\"\"></p>\n<h2 id=\"实际结果\"><a href=\"#实际结果\" class=\"headerlink\" title=\"实际结果\"></a>实际结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/xq6yg.jpg\" alt=\"\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我将<code>-1</code>按钮封装成helper，代码如下：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/5s8kk.jpg\" alt=\"\"></p>\n<p>当投票数为0时，让按钮变成disabled状态。但是结果却不是预期的那样子，说明这个的<code>topic.count</code>不是0，于是我就把它显示出来看一下究竟，在view写如下代码</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;&lt;%= topic.votes.count %&gt; -- &lt;%= topic.count %&gt;&lt;<span class=\"regexp\">/td&gt;</span></span><br></pre></td></tr></table></figure>\n<p>得到：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bo9j2.jpg\" alt=\"\"></p>\n<p>哦！当点击<code>-1</code>时，原来<code>topic.votes.count</code>是会减少的，而topic.count没有减少，这样一来，错误可能出在<code>downvote</code>这个action中，果然</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/rdgvi.jpg\" alt=\"\"></p>\n<p>原来是在执行<code>-1</code>时，没有更新count的值。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/4ybed.jpg\" alt=\"\"></p>\n<p>而且，更为合理的是，在view中使用<code>topic.count</code>而不是<code>topic.votes.count</code>，虽然这两个的值是一样的，但因为在helper中使用到<code>topic.count</code>，所以在view中也使用它就能防止本次遇到的错误。view的代码如下</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;&lt;%= pluralize(topic.count, <span class=\"string\">\"voute\"</span>) %&gt;&lt;<span class=\"regexp\">/td&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://lesley.logdown.com/posts/736430-rails-beginners-the-practice-of-lu-series-railsbridge\" target=\"_blank\" rel=\"external\">RailsBridge：初探rails加分題</a></p>\n","excerpt":"","more":"<h2 id=\"位置\"><a href=\"#位置\" class=\"headerlink\" title=\"位置\"></a>位置</h2><p>《rails 初级练习》3-13 加分题 &amp; 下一步</p>\n<h2 id=\"动作\"><a href=\"#动作\" class=\"headerlink\" title=\"动作\"></a>动作</h2><p>当投票数为0时，让检票按钮失效，处于不能点击的状态</p>\n<h2 id=\"预期结果\"><a href=\"#预期结果\" class=\"headerlink\" title=\"预期结果\"></a>预期结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/0lj8k.jpg\" alt=\"\"></p>\n<h2 id=\"实际结果\"><a href=\"#实际结果\" class=\"headerlink\" title=\"实际结果\"></a>实际结果</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/xq6yg.jpg\" alt=\"\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我将<code>-1</code>按钮封装成helper，代码如下：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/5s8kk.jpg\" alt=\"\"></p>\n<p>当投票数为0时，让按钮变成disabled状态。但是结果却不是预期的那样子，说明这个的<code>topic.count</code>不是0，于是我就把它显示出来看一下究竟，在view写如下代码</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;&lt;%= topic.votes.count %&gt; -- &lt;%= topic.count %&gt;&lt;<span class=\"regexp\">/td&gt;</span></span><br></pre></td></tr></table></figure>\n<p>得到：</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/bo9j2.jpg\" alt=\"\"></p>\n<p>哦！当点击<code>-1</code>时，原来<code>topic.votes.count</code>是会减少的，而topic.count没有减少，这样一来，错误可能出在<code>downvote</code>这个action中，果然</p>\n<p><img src=\"http://oggx6lf7f.bkt.clouddn.com/rdgvi.jpg\" alt=\"\"></p>\n<p>原来是在执行<code>-1</code>时，没有更新count的值。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p><img src=\"http://oggx6lf7f.bkt.clouddn.com/4ybed.jpg\" alt=\"\"></p>\n<p>而且，更为合理的是，在view中使用<code>topic.count</code>而不是<code>topic.votes.count</code>，虽然这两个的值是一样的，但因为在helper中使用到<code>topic.count</code>，所以在view中也使用它就能防止本次遇到的错误。view的代码如下</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;&lt;%= pluralize(topic.count, <span class=\"string\">\"voute\"</span>) %&gt;&lt;<span class=\"regexp\">/td&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://lesley.logdown.com/posts/736430-rails-beginners-the-practice-of-lu-series-railsbridge\">RailsBridge：初探rails加分題</a></p>\n"},{"title":"为什么要公开写文章？","_content":"\n## 很多东西你忘了，但是你却不知道你忘了。\n\n为什么这么说呢？让我引述一下，把时间当做朋友里面的一段话。\n\n> 大多数人会对自己的记忆力过分高估。这个幻觉来自每时每刻都有一些确实可以记得住的东西，而记不住的东西恰恰则因为没有被记住所以看上去“并不存在”。换言之，每时每刻都有“我记得住”的证据，而“我记不住”的证据基本上难觅其踪。这也就是为什么总有那么多人真诚地相信自己考试成绩差是因为“没发挥好”。\n\n我们可以看出来，很多人都会高估自己的注意力，对于那些你已经忘记的东西，在没有复习或者措施的前提下，你可能根本不知道你已经忘记了，你甚至会觉得你都记着，这是很可怕的，因为一不小心就活在了虚假的想象中。\n\n所以，好记性不如烂笔头，把学到的想到的东西写下来，一切都靠积累。\n\n## 写下来才能看清楚自己是否进步了。\n\n之前我一直没有写总结，因为我其实不太重视这一块，后来看到全栈班同学们的笔记，从笔记里面看得出来他们进步有多大，也看得到他们在这个过程中的各种情绪，非常真实。所以说，把学到的想到的经历的写下来，就能明显的看到自己的进步，这对自己来说本身就是一种强大的正反馈。\n\n## 倒逼学习和思考\n\n写作可以倒逼学习。如果你今天偷懒，没有学习，那你就没有东西可以写。所以你为了要写出东西，你就不得不去学习，去践行。\n\n写作可以倒逼思考。想要写清楚，前提是得先想明白，于是你每天就会自然而然地花一点时间去思考。而且，我觉得写出来的文字逻辑质量就等于思考的质量。\n\n## 你不站出来，世界怎么看得到你？\n\nxdite老师的文章[《写给大学生的程式技能》](http://blog.xdite.net/posts/2013/11/22/opensource-cheatsheets)里面有一段话：\n\n> 不斷的貼 code 以及練習在網路上發表文章，可以強化你的表達能力與邏輯組織能力。知名軟體公司 37Signals 甚至表示，他們不太注重程式底子，只雇用「寫作能力」良好的人。因為寫作能力強大代表著：組織能力與邏輯能力強。\n\n在[《给尚未大学毕业的朋友的几个人生建议》](http://blog.xdite.net/posts/2012/10/26/another-advice-for-undergraduate)也有提到：\n\n> 培養寫作能力與程式開發能力，其實最大的好處不是培養出強大的邏輯核心能力群。而是產生出來的副產品：「文章」以及「程式碼」。\n>\n> 很多 Developer 常常怨歎，我也很有能力，為什麼沒有人要挖掘我？很簡單的道理，因為沒有人知道你作過什麼。沒有文章放在 Blog 上，沒有程式碼放在 Github 上，沒有可以實際端出的 project。光憑短短的幾分鐘面談，和洋洋灑灑履歷。誰能在這麼短的時間，知道你是不世出的曠世奇才呢？\n>\n> 如果你想要世界看到你，你必須要做的就是，主動站出來。\n\n所以写文章是一件很有意义，很有使命感的事情，既可以锻炼思考能力，也可以成为自己学习的动力，还能让外部世界了解你。","source":"_posts/2016-12-21-why-writing.md","raw":"---\ntitle: 为什么要公开写文章？\ncategories: 践行\n---\n\n## 很多东西你忘了，但是你却不知道你忘了。\n\n为什么这么说呢？让我引述一下，把时间当做朋友里面的一段话。\n\n> 大多数人会对自己的记忆力过分高估。这个幻觉来自每时每刻都有一些确实可以记得住的东西，而记不住的东西恰恰则因为没有被记住所以看上去“并不存在”。换言之，每时每刻都有“我记得住”的证据，而“我记不住”的证据基本上难觅其踪。这也就是为什么总有那么多人真诚地相信自己考试成绩差是因为“没发挥好”。\n\n我们可以看出来，很多人都会高估自己的注意力，对于那些你已经忘记的东西，在没有复习或者措施的前提下，你可能根本不知道你已经忘记了，你甚至会觉得你都记着，这是很可怕的，因为一不小心就活在了虚假的想象中。\n\n所以，好记性不如烂笔头，把学到的想到的东西写下来，一切都靠积累。\n\n## 写下来才能看清楚自己是否进步了。\n\n之前我一直没有写总结，因为我其实不太重视这一块，后来看到全栈班同学们的笔记，从笔记里面看得出来他们进步有多大，也看得到他们在这个过程中的各种情绪，非常真实。所以说，把学到的想到的经历的写下来，就能明显的看到自己的进步，这对自己来说本身就是一种强大的正反馈。\n\n## 倒逼学习和思考\n\n写作可以倒逼学习。如果你今天偷懒，没有学习，那你就没有东西可以写。所以你为了要写出东西，你就不得不去学习，去践行。\n\n写作可以倒逼思考。想要写清楚，前提是得先想明白，于是你每天就会自然而然地花一点时间去思考。而且，我觉得写出来的文字逻辑质量就等于思考的质量。\n\n## 你不站出来，世界怎么看得到你？\n\nxdite老师的文章[《写给大学生的程式技能》](http://blog.xdite.net/posts/2013/11/22/opensource-cheatsheets)里面有一段话：\n\n> 不斷的貼 code 以及練習在網路上發表文章，可以強化你的表達能力與邏輯組織能力。知名軟體公司 37Signals 甚至表示，他們不太注重程式底子，只雇用「寫作能力」良好的人。因為寫作能力強大代表著：組織能力與邏輯能力強。\n\n在[《给尚未大学毕业的朋友的几个人生建议》](http://blog.xdite.net/posts/2012/10/26/another-advice-for-undergraduate)也有提到：\n\n> 培養寫作能力與程式開發能力，其實最大的好處不是培養出強大的邏輯核心能力群。而是產生出來的副產品：「文章」以及「程式碼」。\n>\n> 很多 Developer 常常怨歎，我也很有能力，為什麼沒有人要挖掘我？很簡單的道理，因為沒有人知道你作過什麼。沒有文章放在 Blog 上，沒有程式碼放在 Github 上，沒有可以實際端出的 project。光憑短短的幾分鐘面談，和洋洋灑灑履歷。誰能在這麼短的時間，知道你是不世出的曠世奇才呢？\n>\n> 如果你想要世界看到你，你必須要做的就是，主動站出來。\n\n所以写文章是一件很有意义，很有使命感的事情，既可以锻炼思考能力，也可以成为自己学习的动力，还能让外部世界了解你。","slug":"2016-12-21-why-writing","published":1,"date":"2016-12-21T02:35:39.000Z","updated":"2016-12-21T02:46:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixhpxrbi003ky3onavlrwtzg","content":"<h2 id=\"很多东西你忘了，但是你却不知道你忘了。\"><a href=\"#很多东西你忘了，但是你却不知道你忘了。\" class=\"headerlink\" title=\"很多东西你忘了，但是你却不知道你忘了。\"></a>很多东西你忘了，但是你却不知道你忘了。</h2><p>为什么这么说呢？让我引述一下，把时间当做朋友里面的一段话。</p>\n<blockquote>\n<p>大多数人会对自己的记忆力过分高估。这个幻觉来自每时每刻都有一些确实可以记得住的东西，而记不住的东西恰恰则因为没有被记住所以看上去“并不存在”。换言之，每时每刻都有“我记得住”的证据，而“我记不住”的证据基本上难觅其踪。这也就是为什么总有那么多人真诚地相信自己考试成绩差是因为“没发挥好”。</p>\n</blockquote>\n<p>我们可以看出来，很多人都会高估自己的注意力，对于那些你已经忘记的东西，在没有复习或者措施的前提下，你可能根本不知道你已经忘记了，你甚至会觉得你都记着，这是很可怕的，因为一不小心就活在了虚假的想象中。</p>\n<p>所以，好记性不如烂笔头，把学到的想到的东西写下来，一切都靠积累。</p>\n<h2 id=\"写下来才能看清楚自己是否进步了。\"><a href=\"#写下来才能看清楚自己是否进步了。\" class=\"headerlink\" title=\"写下来才能看清楚自己是否进步了。\"></a>写下来才能看清楚自己是否进步了。</h2><p>之前我一直没有写总结，因为我其实不太重视这一块，后来看到全栈班同学们的笔记，从笔记里面看得出来他们进步有多大，也看得到他们在这个过程中的各种情绪，非常真实。所以说，把学到的想到的经历的写下来，就能明显的看到自己的进步，这对自己来说本身就是一种强大的正反馈。</p>\n<h2 id=\"倒逼学习和思考\"><a href=\"#倒逼学习和思考\" class=\"headerlink\" title=\"倒逼学习和思考\"></a>倒逼学习和思考</h2><p>写作可以倒逼学习。如果你今天偷懒，没有学习，那你就没有东西可以写。所以你为了要写出东西，你就不得不去学习，去践行。</p>\n<p>写作可以倒逼思考。想要写清楚，前提是得先想明白，于是你每天就会自然而然地花一点时间去思考。而且，我觉得写出来的文字逻辑质量就等于思考的质量。</p>\n<h2 id=\"你不站出来，世界怎么看得到你？\"><a href=\"#你不站出来，世界怎么看得到你？\" class=\"headerlink\" title=\"你不站出来，世界怎么看得到你？\"></a>你不站出来，世界怎么看得到你？</h2><p>xdite老师的文章<a href=\"http://blog.xdite.net/posts/2013/11/22/opensource-cheatsheets\" target=\"_blank\" rel=\"external\">《写给大学生的程式技能》</a>里面有一段话：</p>\n<blockquote>\n<p>不斷的貼 code 以及練習在網路上發表文章，可以強化你的表達能力與邏輯組織能力。知名軟體公司 37Signals 甚至表示，他們不太注重程式底子，只雇用「寫作能力」良好的人。因為寫作能力強大代表著：組織能力與邏輯能力強。</p>\n</blockquote>\n<p>在<a href=\"http://blog.xdite.net/posts/2012/10/26/another-advice-for-undergraduate\" target=\"_blank\" rel=\"external\">《给尚未大学毕业的朋友的几个人生建议》</a>也有提到：</p>\n<blockquote>\n<p>培養寫作能力與程式開發能力，其實最大的好處不是培養出強大的邏輯核心能力群。而是產生出來的副產品：「文章」以及「程式碼」。</p>\n<p>很多 Developer 常常怨歎，我也很有能力，為什麼沒有人要挖掘我？很簡單的道理，因為沒有人知道你作過什麼。沒有文章放在 Blog 上，沒有程式碼放在 Github 上，沒有可以實際端出的 project。光憑短短的幾分鐘面談，和洋洋灑灑履歷。誰能在這麼短的時間，知道你是不世出的曠世奇才呢？</p>\n<p>如果你想要世界看到你，你必須要做的就是，主動站出來。</p>\n</blockquote>\n<p>所以写文章是一件很有意义，很有使命感的事情，既可以锻炼思考能力，也可以成为自己学习的动力，还能让外部世界了解你。</p>\n","excerpt":"","more":"<h2 id=\"很多东西你忘了，但是你却不知道你忘了。\"><a href=\"#很多东西你忘了，但是你却不知道你忘了。\" class=\"headerlink\" title=\"很多东西你忘了，但是你却不知道你忘了。\"></a>很多东西你忘了，但是你却不知道你忘了。</h2><p>为什么这么说呢？让我引述一下，把时间当做朋友里面的一段话。</p>\n<blockquote>\n<p>大多数人会对自己的记忆力过分高估。这个幻觉来自每时每刻都有一些确实可以记得住的东西，而记不住的东西恰恰则因为没有被记住所以看上去“并不存在”。换言之，每时每刻都有“我记得住”的证据，而“我记不住”的证据基本上难觅其踪。这也就是为什么总有那么多人真诚地相信自己考试成绩差是因为“没发挥好”。</p>\n</blockquote>\n<p>我们可以看出来，很多人都会高估自己的注意力，对于那些你已经忘记的东西，在没有复习或者措施的前提下，你可能根本不知道你已经忘记了，你甚至会觉得你都记着，这是很可怕的，因为一不小心就活在了虚假的想象中。</p>\n<p>所以，好记性不如烂笔头，把学到的想到的东西写下来，一切都靠积累。</p>\n<h2 id=\"写下来才能看清楚自己是否进步了。\"><a href=\"#写下来才能看清楚自己是否进步了。\" class=\"headerlink\" title=\"写下来才能看清楚自己是否进步了。\"></a>写下来才能看清楚自己是否进步了。</h2><p>之前我一直没有写总结，因为我其实不太重视这一块，后来看到全栈班同学们的笔记，从笔记里面看得出来他们进步有多大，也看得到他们在这个过程中的各种情绪，非常真实。所以说，把学到的想到的经历的写下来，就能明显的看到自己的进步，这对自己来说本身就是一种强大的正反馈。</p>\n<h2 id=\"倒逼学习和思考\"><a href=\"#倒逼学习和思考\" class=\"headerlink\" title=\"倒逼学习和思考\"></a>倒逼学习和思考</h2><p>写作可以倒逼学习。如果你今天偷懒，没有学习，那你就没有东西可以写。所以你为了要写出东西，你就不得不去学习，去践行。</p>\n<p>写作可以倒逼思考。想要写清楚，前提是得先想明白，于是你每天就会自然而然地花一点时间去思考。而且，我觉得写出来的文字逻辑质量就等于思考的质量。</p>\n<h2 id=\"你不站出来，世界怎么看得到你？\"><a href=\"#你不站出来，世界怎么看得到你？\" class=\"headerlink\" title=\"你不站出来，世界怎么看得到你？\"></a>你不站出来，世界怎么看得到你？</h2><p>xdite老师的文章<a href=\"http://blog.xdite.net/posts/2013/11/22/opensource-cheatsheets\">《写给大学生的程式技能》</a>里面有一段话：</p>\n<blockquote>\n<p>不斷的貼 code 以及練習在網路上發表文章，可以強化你的表達能力與邏輯組織能力。知名軟體公司 37Signals 甚至表示，他們不太注重程式底子，只雇用「寫作能力」良好的人。因為寫作能力強大代表著：組織能力與邏輯能力強。</p>\n</blockquote>\n<p>在<a href=\"http://blog.xdite.net/posts/2012/10/26/another-advice-for-undergraduate\">《给尚未大学毕业的朋友的几个人生建议》</a>也有提到：</p>\n<blockquote>\n<p>培養寫作能力與程式開發能力，其實最大的好處不是培養出強大的邏輯核心能力群。而是產生出來的副產品：「文章」以及「程式碼」。</p>\n<p>很多 Developer 常常怨歎，我也很有能力，為什麼沒有人要挖掘我？很簡單的道理，因為沒有人知道你作過什麼。沒有文章放在 Blog 上，沒有程式碼放在 Github 上，沒有可以實際端出的 project。光憑短短的幾分鐘面談，和洋洋灑灑履歷。誰能在這麼短的時間，知道你是不世出的曠世奇才呢？</p>\n<p>如果你想要世界看到你，你必須要做的就是，主動站出來。</p>\n</blockquote>\n<p>所以写文章是一件很有意义，很有使命感的事情，既可以锻炼思考能力，也可以成为自己学习的动力，还能让外部世界了解你。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cixhpxr7f0000y3onu5mh7gm8","category_id":"cixhpxr7x0005y3onedl1unh5","_id":"cixhpxr8h000dy3onebm1601z"},{"post_id":"cixhpxr7o0002y3onfgnqbu0p","category_id":"cixhpxr7x0005y3onedl1unh5","_id":"cixhpxr8n000hy3onumkqz3g2"},{"post_id":"cixhpxr8n000iy3on4901kco6","category_id":"cixhpxr8q000ky3onvllvkmil","_id":"cixhpxr92000sy3on1f9zd2br"},{"post_id":"cixhpxr8p000jy3onsxwjwyab","category_id":"cixhpxr8z000py3onczdq6dvn","_id":"cixhpxr9e000zy3onehgvjucn"},{"post_id":"cixhpxr8r000ly3on0qtu7qhn","category_id":"cixhpxr8z000py3onczdq6dvn","_id":"cixhpxr9j0015y3ono9514m4v"},{"post_id":"cixhpxr9g0012y3onhqfpvdo2","category_id":"cixhpxr8q000ky3onvllvkmil","_id":"cixhpxr9m0019y3on41bvynod"},{"post_id":"cixhpxr8t000ny3on7nhcmqx0","category_id":"cixhpxr8z000py3onczdq6dvn","_id":"cixhpxr9o001dy3onro0dkcdu"},{"post_id":"cixhpxr8x000oy3onlzfhbc0w","category_id":"cixhpxr9k0016y3onfn8pm2lk","_id":"cixhpxr9r001iy3onvxk7mxam"},{"post_id":"cixhpxr9m001ay3onnb295rmh","category_id":"cixhpxr8z000py3onczdq6dvn","_id":"cixhpxr9u001ly3onmbw607qx"},{"post_id":"cixhpxr9o001ey3on4q3zpb44","category_id":"cixhpxr9o001cy3on1ylp9q6k","_id":"cixhpxr9z001py3onibiw4ta4"},{"post_id":"cixhpxr90000ry3oniqvxybp9","category_id":"cixhpxr9o001cy3on1ylp9q6k","_id":"cixhpxra1001sy3onmqizcmt3"},{"post_id":"cixhpxr9q001hy3onon1jj25t","category_id":"cixhpxr8z000py3onczdq6dvn","_id":"cixhpxra7001vy3onunqk4k47"},{"post_id":"cixhpxr9s001ky3on9scbywv4","category_id":"cixhpxr8z000py3onczdq6dvn","_id":"cixhpxraa001zy3onwud9ww3y"},{"post_id":"cixhpxr92000ty3on3dpzfsgm","category_id":"cixhpxr9s001jy3onnpn4twzs","_id":"cixhpxrac0023y3on8b7wkw3l"},{"post_id":"cixhpxra0001qy3onpf4410gs","category_id":"cixhpxr8z000py3onczdq6dvn","_id":"cixhpxrae0027y3ony6ygwgah"},{"post_id":"cixhpxr96000vy3onwxcmlg7k","category_id":"cixhpxr9o001cy3on1ylp9q6k","_id":"cixhpxrai002ay3onu9pg7b3r"},{"post_id":"cixhpxra7001xy3on562fohm7","category_id":"cixhpxr8z000py3onczdq6dvn","_id":"cixhpxram002fy3on1cje80vv"},{"post_id":"cixhpxr9d000yy3oncs3t2e2s","category_id":"cixhpxr9s001jy3onnpn4twzs","_id":"cixhpxras002iy3on7y43mwbr"},{"post_id":"cixhpxr9i0014y3on3ikbr80a","category_id":"cixhpxr9s001jy3onnpn4twzs","_id":"cixhpxrau002ny3onai3x932g"},{"post_id":"cixhpxram002hy3onogqtxsir","category_id":"cixhpxr8z000py3onczdq6dvn","_id":"cixhpxrav002qy3onrqu4wnl4"},{"post_id":"cixhpxr9k0017y3onjya1nlsw","category_id":"cixhpxr9s001jy3onnpn4twzs","_id":"cixhpxray002vy3on2ns5n72p"},{"post_id":"cixhpxr9v001oy3on1fwe24e2","category_id":"cixhpxrau002my3onjbd24l9s","_id":"cixhpxrb3002zy3onmth4ggvl"},{"post_id":"cixhpxraw002sy3onncg85pi4","category_id":"cixhpxr8z000py3onczdq6dvn","_id":"cixhpxrb50033y3on7rj4ucxs"},{"post_id":"cixhpxra2001ty3onagu4fiyc","category_id":"cixhpxrax002ty3onwpbqspnz","_id":"cixhpxrb60037y3onubrqqgs8"},{"post_id":"cixhpxraa0021y3onn45wyral","category_id":"cixhpxrax002ty3onwpbqspnz","_id":"cixhpxrbc003cy3on3dkjcqfs"},{"post_id":"cixhpxrad0025y3onsphlzxu6","category_id":"cixhpxrax002ty3onwpbqspnz","_id":"cixhpxrbh003hy3onoopjvvme"},{"post_id":"cixhpxrae0029y3on4y5srucy","category_id":"cixhpxrax002ty3onwpbqspnz","_id":"cixhpxrbl003my3onr8sv06r4"},{"post_id":"cixhpxrbi003ky3onavlrwtzg","category_id":"cixhpxr9o001cy3on1ylp9q6k","_id":"cixhpxrbo003qy3onizwfeldb"},{"post_id":"cixhpxraj002dy3on4hztlkcw","category_id":"cixhpxrbi003iy3onpv3rj165","_id":"cixhpxrbo003sy3onf8d0t0d8"},{"post_id":"cixhpxrat002ly3onn5t1tewa","category_id":"cixhpxrbn003oy3on4d504jpw","_id":"cixhpxrbq003wy3onr3woyzrf"},{"post_id":"cixhpxrau002py3onxleu9rz3","category_id":"cixhpxrbp003uy3onc9nb6u6s","_id":"cixhpxrbr0041y3onsu4ypcof"},{"post_id":"cixhpxray002wy3onm84odalq","category_id":"cixhpxrbq003yy3on7rfyi0i4","_id":"cixhpxrbu0045y3on7a0s9xjl"},{"post_id":"cixhpxrb1002xy3on91rh34nr","category_id":"cixhpxrbq003yy3on7rfyi0i4","_id":"cixhpxrbw0048y3on92c51ejk"},{"post_id":"cixhpxrb40032y3ondqwqacpv","category_id":"cixhpxrbp003uy3onc9nb6u6s","_id":"cixhpxrbx004by3onqzxbmgi7"},{"post_id":"cixhpxrb50035y3on2pppg7rf","category_id":"cixhpxrbp003uy3onc9nb6u6s","_id":"cixhpxrbz004dy3onoipe8rip"},{"post_id":"cixhpxrb70039y3onwaoi9ah7","category_id":"cixhpxrbp003uy3onc9nb6u6s","_id":"cixhpxrc0004fy3ons2gvo4ij"},{"post_id":"cixhpxrb8003by3onxe90s8yh","category_id":"cixhpxrbp003uy3onc9nb6u6s","_id":"cixhpxrc1004hy3on7pdqv3a6"},{"post_id":"cixhpxrbd003fy3on06nmj09u","category_id":"cixhpxrbp003uy3onc9nb6u6s","_id":"cixhpxrc1004jy3onh5dsw776"},{"post_id":"cixhpxrbf003gy3onkb22mrhf","category_id":"cixhpxrbp003uy3onc9nb6u6s","_id":"cixhpxrc2004ky3onvmwtq3dw"},{"post_id":"cixhpxr8h000ey3onr1t8kxia","category_id":"cixhpxrax002ty3onwpbqspnz","_id":"cixhq0psh0004z7on209b1f9r"}],"PostTag":[{"post_id":"cixhpxr7f0000y3onu5mh7gm8","tag_id":"cixhpxr7w0004y3on4kvwvkgy","_id":"cixhpxr8e000by3onfdvwnti1"},{"post_id":"cixhpxr7o0002y3onfgnqbu0p","tag_id":"cixhpxr7w0004y3on4kvwvkgy","_id":"cixhpxr8k000fy3ony7q4raav"},{"post_id":"cixhpxr8p000jy3onsxwjwyab","tag_id":"cixhpxr8s000my3on6smbyv6p","_id":"cixhpxr9c000xy3ong7aaskhh"},{"post_id":"cixhpxr8p000jy3onsxwjwyab","tag_id":"cixhpxr8z000qy3on1p7c99v7","_id":"cixhpxr9g0011y3on6kry3mur"},{"post_id":"cixhpxr8r000ly3on0qtu7qhn","tag_id":"cixhpxr99000wy3on96hqwgy6","_id":"cixhpxr9n001by3onmcd8dwal"},{"post_id":"cixhpxr8r000ly3on0qtu7qhn","tag_id":"cixhpxr9h0013y3onuykm1tuf","_id":"cixhpxr9q001fy3ongcg7jl6e"},{"post_id":"cixhpxr9q001hy3onon1jj25t","tag_id":"cixhpxr99000wy3on96hqwgy6","_id":"cixhpxr9u001my3onqoc16lg7"},{"post_id":"cixhpxra0001qy3onpf4410gs","tag_id":"cixhpxr99000wy3on96hqwgy6","_id":"cixhpxra7001wy3onf6jpexlj"},{"post_id":"cixhpxr8t000ny3on7nhcmqx0","tag_id":"cixhpxr99000wy3on96hqwgy6","_id":"cixhpxraa0020y3ondb5qb7d2"},{"post_id":"cixhpxr8t000ny3on7nhcmqx0","tag_id":"cixhpxr9q001gy3onhgs4qj4j","_id":"cixhpxrac0024y3on9v1qlavo"},{"post_id":"cixhpxr8t000ny3on7nhcmqx0","tag_id":"cixhpxr9u001ny3onirklk8fz","_id":"cixhpxrae0028y3onk8ugx70b"},{"post_id":"cixhpxra7001xy3on562fohm7","tag_id":"cixhpxr99000wy3on96hqwgy6","_id":"cixhpxrai002by3ondgwnwdkr"},{"post_id":"cixhpxr8x000oy3onlzfhbc0w","tag_id":"cixhpxra6001uy3on8dpbad1o","_id":"cixhpxram002gy3onwk11cxo5"},{"post_id":"cixhpxr92000ty3on3dpzfsgm","tag_id":"cixhpxrac0022y3on50pl9wu0","_id":"cixhpxras002jy3onzt49fn9z"},{"post_id":"cixhpxr9d000yy3oncs3t2e2s","tag_id":"cixhpxrac0022y3on50pl9wu0","_id":"cixhpxrau002oy3on81bc0krj"},{"post_id":"cixhpxr9i0014y3on3ikbr80a","tag_id":"cixhpxrat002ky3onegnmdf2w","_id":"cixhpxrax002uy3onk7ppxq27"},{"post_id":"cixhpxr9m001ay3onnb295rmh","tag_id":"cixhpxrav002ry3onr7hu0nz4","_id":"cixhpxrb30031y3onx8q2usx5"},{"post_id":"cixhpxr9m001ay3onnb295rmh","tag_id":"cixhpxr99000wy3on96hqwgy6","_id":"cixhpxrb50034y3onw5xvdeiw"},{"post_id":"cixhpxr9v001oy3on1fwe24e2","tag_id":"cixhpxrb2002yy3on4o3iichh","_id":"cixhpxrb8003ay3ona6ziebtd"},{"post_id":"cixhpxram002hy3onogqtxsir","tag_id":"cixhpxrb60036y3on62zbhe07","_id":"cixhpxrbl003ly3onriqdaab2"},{"post_id":"cixhpxram002hy3onogqtxsir","tag_id":"cixhpxrbd003dy3onricamo8o","_id":"cixhpxrbm003ny3on0thq76cu"},{"post_id":"cixhpxrau002py3onxleu9rz3","tag_id":"cixhpxrbi003jy3on525u8l9h","_id":"cixhpxrbo003ry3onvj89f2nk"},{"post_id":"cixhpxrb40032y3ondqwqacpv","tag_id":"cixhpxrbi003jy3on525u8l9h","_id":"cixhpxrbq003vy3on0g3pzvof"},{"post_id":"cixhpxrb50035y3on2pppg7rf","tag_id":"cixhpxrbi003jy3on525u8l9h","_id":"cixhpxrbq003zy3onxqn319ya"},{"post_id":"cixhpxrb8003by3onxe90s8yh","tag_id":"cixhpxrbi003jy3on525u8l9h","_id":"cixhpxrbr0043y3on5w15qbu2"},{"post_id":"cixhpxrbd003fy3on06nmj09u","tag_id":"cixhpxrbi003jy3on525u8l9h","_id":"cixhpxrbv0047y3onszvq9uqe"},{"post_id":"cixhpxrbf003gy3onkb22mrhf","tag_id":"cixhpxrbi003jy3on525u8l9h","_id":"cixhpxrbw004ay3onqm2ctcos"}],"Tag":[{"name":"《精进》","_id":"cixhpxr7w0004y3on4kvwvkgy"},{"name":"Mocha","_id":"cixhpxr8s000my3on6smbyv6p"},{"name":"Cheatsheets","_id":"cixhpxr8z000qy3on1p7c99v7"},{"name":"vue","_id":"cixhpxr99000wy3on96hqwgy6"},{"name":"vuex","_id":"cixhpxr9h0013y3onuykm1tuf"},{"name":"vue-loader","_id":"cixhpxr9q001gy3onhgs4qj4j"},{"name":"组件化","_id":"cixhpxr9u001ny3onirklk8fz"},{"name":"Nginx","_id":"cixhpxra6001uy3on8dpbad1o"},{"name":"node","_id":"cixhpxrac0022y3on50pl9wu0"},{"name":"测试","_id":"cixhpxrat002ky3onegnmdf2w"},{"name":"koa2","_id":"cixhpxrav002ry3onr7hu0nz4"},{"name":"react","_id":"cixhpxrb2002yy3on4o3iichh"},{"name":"es6","_id":"cixhpxrb60036y3on62zbhe07"},{"name":"单元测试","_id":"cixhpxrbd003dy3onricamo8o"},{"name":"错误","_id":"cixhpxrbi003jy3on525u8l9h"},{"name":"总结","_id":"cixhq0nwe0002z7onxmjsyygt"}]}}